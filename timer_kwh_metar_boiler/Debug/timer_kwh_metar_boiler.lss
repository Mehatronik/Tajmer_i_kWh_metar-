
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00002b7a  00002c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  008001c0  008001c0  00002cce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000304a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a0  00000000  00000000  0000609e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fbc  00000000  00000000  0000713e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000870  00000000  00000000  000090fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be8  00000000  00000000  0000996c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026ed  00000000  00000000  0000a554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000cc41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__vector_4>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_14>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_18>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_20>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_21>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	1e 06       	cpc	r1, r30
      6a:	73 06       	cpc	r7, r19
      6c:	a0 06       	cpc	r10, r16
      6e:	29 07       	cpc	r18, r25
      70:	16 08       	sbc	r1, r6
      72:	38 09       	sbc	r19, r8
      74:	59 0a       	sbc	r5, r25

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <__stack+0xd1>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <lcd1602_send_byte+0x34>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <i2c_send_packet+0x8>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <__vector_21+0x14>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	11 e0       	ldi	r17, 0x01	; 1
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	ea e7       	ldi	r30, 0x7A	; 122
     184:	fb e2       	ldi	r31, 0x2B	; 43
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a0 3c       	cpi	r26, 0xC0	; 192
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	22 e0       	ldi	r18, 0x02	; 2
     194:	a0 ec       	ldi	r26, 0xC0	; 192
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a3 35       	cpi	r26, 0x53	; 83
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 6f 0a 	call	0x14de	; 0x14de <main>
     1a6:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <ADC_init>:


void ADC_init()
{
	
	PRR = 0;						//power reduction off
     1ae:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
     1b2:	80 ec       	ldi	r24, 0xC0	; 192
     1b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
     1b8:	8e ee       	ldi	r24, 0xEE	; 238
     1ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
     1be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
     1c2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ad_kanal>
     1c6:	08 95       	ret

000001c8 <__vector_21>:


/* TODO: u ISR-u neka bude samo flag, a obrada podataka izdvojeno, jer je ovo glup nacin, da racun radim u prekidnoj rutini */

ISR(ADC_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
	/*
	 * AD konverzija
	 * ISR okine kada je gotova konverzija
	 */
	isr_adc = 1;	//set flag
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>

}
     1da:	8f 91       	pop	r24
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <adc_read>:

void adc_read()
{
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
	
	if (isr_adc)
     1f6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
     1fa:	88 23       	and	r24, r24
     1fc:	09 f4       	brne	.+2      	; 0x200 <adc_read+0x1a>
     1fe:	85 c0       	rjmp	.+266    	; 0x30a <adc_read+0x124>
	{
		isr_adc = 0;	//reset flag
     200:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
	
	
		//upis ad konverzije oba kanala u odgovarajuce promenljive
		if(ad_kanal == 0)
     204:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ad_kanal>
     208:	81 11       	cpse	r24, r1
     20a:	09 c0       	rjmp	.+18     	; 0x21e <adc_read+0x38>
			adc_napon_raw = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
     20c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     210:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     214:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <adc_napon_raw+0x1>
     218:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <adc_napon_raw>
     21c:	0a c0       	rjmp	.+20     	; 0x232 <adc_read+0x4c>
		else if(ad_kanal == 1)
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	41 f4       	brne	.+16     	; 0x232 <adc_read+0x4c>
			adc_struja_raw = (uint16_t)ADC;
     222:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     226:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     22a:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <adc_struja_raw+0x1>
     22e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <adc_struja_raw>
	
		//npr: napon 1023 = 280V
		//     struja 1023 = 25A
		napon = adc_napon_raw/3.65;
     232:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <adc_napon_raw>
     236:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <adc_napon_raw+0x1>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__floatunsisf>
     242:	2a e9       	ldi	r18, 0x9A	; 154
     244:	39 e9       	ldi	r19, 0x99	; 153
     246:	49 e6       	ldi	r20, 0x69	; 105
     248:	50 e4       	ldi	r21, 0x40	; 64
     24a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divsf3>
     24e:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__fixunssfsi>
     252:	6b 01       	movw	r12, r22
     254:	7c 01       	movw	r14, r24
     256:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <napon+0x1>
     25a:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <napon>
		struja = adc_struja_raw/40.92;
     25e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <adc_struja_raw>
     262:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <adc_struja_raw+0x1>
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__floatunsisf>
     26e:	24 e1       	ldi	r18, 0x14	; 20
     270:	3e ea       	ldi	r19, 0xAE	; 174
     272:	43 e2       	ldi	r20, 0x23	; 35
     274:	52 e4       	ldi	r21, 0x42	; 66
     276:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divsf3>
     27a:	4b 01       	movw	r8, r22
     27c:	5c 01       	movw	r10, r24
     27e:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <struja>
     282:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <struja+0x1>
     286:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <struja+0x2>
     28a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <struja+0x3>
		snaga = (napon * struja)/1000.0;	//kW
     28e:	b6 01       	movw	r22, r12
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__floatunsisf>
     298:	a5 01       	movw	r20, r10
     29a:	94 01       	movw	r18, r8
     29c:	0e 94 0c 10 	call	0x2018	; 0x2018 <__mulsf3>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	4a e7       	ldi	r20, 0x7A	; 122
     2a6:	54 e4       	ldi	r21, 0x44	; 68
     2a8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divsf3>
     2ac:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <snaga>
     2b0:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <snaga+0x1>
     2b4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <snaga+0x2>
     2b8:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <snaga+0x3>
		//snaga se integrali(sumira) svaki sekund u main-u cime se racuna elektricna energija
		
		/**************************************************************************************************************/
		ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 77       	andi	r24, 0x7F	; 127
     2c4:	80 83       	st	Z, r24
	
	
		ad_kanal++;			//inkrementiraj kanal
     2c6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ad_kanal>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <ad_kanal>
		if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	18 f0       	brcs	.+6      	; 0x2da <adc_read+0xf4>
			ad_kanal = 0;
     2d4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ad_kanal>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <adc_read+0xfe>
	


	
		//multipleksiranje ad ulaza; tj. promena ad kanala
		switch(ad_kanal)
     2da:	88 23       	and	r24, r24
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <adc_read+0xfe>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <adc_read+0x10a>
     2e2:	0e c0       	rjmp	.+28     	; 0x300 <adc_read+0x11a>
		{
			case 0:
			ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     2e4:	ec e7       	ldi	r30, 0x7C	; 124
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8c 7f       	andi	r24, 0xFC	; 252
     2ec:	80 83       	st	Z, r24
			break;
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <adc_read+0x11a>
		
			case 1:
			ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     2f0:	ec e7       	ldi	r30, 0x7C	; 124
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 83       	st	Z, r24
			ADMUX |= (0b1);
     2fa:	80 81       	ld	r24, Z
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	80 83       	st	Z, r24
		}
	
	
		//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala.
	
		ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     300:	ea e7       	ldi	r30, 0x7A	; 122
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	80 6c       	ori	r24, 0xC0	; 192
     308:	80 83       	st	Z, r24
		
	}
}
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	af 90       	pop	r10
     316:	9f 90       	pop	r9
     318:	8f 90       	pop	r8
     31a:	08 95       	ret

0000031c <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     31c:	f9 99       	sbic	0x1f, 1	; 31
     31e:	fe cf       	rjmp	.-4      	; 0x31c <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     320:	92 bd       	out	0x22, r25	; 34
     322:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     324:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     326:	80 b5       	in	r24, 0x20	; 32
}
     328:	08 95       	ret

0000032a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     32a:	f9 99       	sbic	0x1f, 1	; 31
     32c:	fe cf       	rjmp	.-4      	; 0x32a <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     32e:	92 bd       	out	0x22, r25	; 34
     330:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     332:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     334:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     336:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     338:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     33a:	78 94       	sei
     33c:	08 95       	ret

0000033e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     33e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     342:	88 e4       	ldi	r24, 0x48	; 72
     344:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     348:	08 95       	ret

0000034a <i2c_start_wait>:
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec eb       	ldi	r30, 0xBC	; 188
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	24 ea       	ldi	r18, 0xA4	; 164
     354:	a9 eb       	ldi	r26, 0xB9	; 185
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	cb eb       	ldi	r28, 0xBB	; 187
     35a:	d0 e0       	ldi	r29, 0x00	; 0
     35c:	34 e8       	ldi	r19, 0x84	; 132
     35e:	44 e9       	ldi	r20, 0x94	; 148
     360:	20 83       	st	Z, r18
     362:	90 81       	ld	r25, Z
     364:	99 23       	and	r25, r25
     366:	ec f7       	brge	.-6      	; 0x362 <i2c_start_wait+0x18>
     368:	9c 91       	ld	r25, X
     36a:	98 7f       	andi	r25, 0xF8	; 248
     36c:	98 30       	cpi	r25, 0x08	; 8
     36e:	11 f0       	breq	.+4      	; 0x374 <i2c_start_wait+0x2a>
     370:	90 31       	cpi	r25, 0x10	; 16
     372:	b1 f7       	brne	.-20     	; 0x360 <i2c_start_wait+0x16>
     374:	88 83       	st	Y, r24
     376:	30 83       	st	Z, r19
     378:	90 81       	ld	r25, Z
     37a:	99 23       	and	r25, r25
     37c:	ec f7       	brge	.-6      	; 0x378 <i2c_start_wait+0x2e>
     37e:	9c 91       	ld	r25, X
     380:	98 7f       	andi	r25, 0xF8	; 248
     382:	90 32       	cpi	r25, 0x20	; 32
     384:	11 f0       	breq	.+4      	; 0x38a <i2c_start_wait+0x40>
     386:	98 35       	cpi	r25, 0x58	; 88
     388:	29 f4       	brne	.+10     	; 0x394 <i2c_start_wait+0x4a>
     38a:	40 83       	st	Z, r20
     38c:	90 81       	ld	r25, Z
     38e:	94 fd       	sbrc	r25, 4
     390:	fd cf       	rjmp	.-6      	; 0x38c <i2c_start_wait+0x42>
     392:	e6 cf       	rjmp	.-52     	; 0x360 <i2c_start_wait+0x16>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <i2c_stop>:
     39a:	84 e9       	ldi	r24, 0x94	; 148
     39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a0:	ec eb       	ldi	r30, 0xBC	; 188
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	84 fd       	sbrc	r24, 4
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <i2c_stop+0xa>
     3aa:	08 95       	ret

000003ac <i2c_write>:
     3ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3b0:	84 e8       	ldi	r24, 0x84	; 132
     3b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3b6:	ec eb       	ldi	r30, 0xBC	; 188
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	88 23       	and	r24, r24
     3be:	ec f7       	brge	.-6      	; 0x3ba <i2c_write+0xe>
     3c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3c4:	98 7f       	andi	r25, 0xF8	; 248
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	98 32       	cpi	r25, 0x28	; 40
     3ca:	09 f4       	brne	.+2      	; 0x3ce <i2c_write+0x22>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3d0:	84 e8       	ldi	r24, 0x84	; 132
     3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     3d6:	ec eb       	ldi	r30, 0xBC	; 188
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	88 23       	and	r24, r24
     3de:	ec f7       	brge	.-6      	; 0x3da <i2c_readNak+0xa>
	
    return TWDR;
     3e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     3e4:	08 95       	ret

000003e6 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     3e6:	cf 93       	push	r28
     3e8:	c8 2f       	mov	r28, r24
     3ea:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     3ec:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
	i2c_write(value);                      // write 
     3f0:	8c 2f       	mov	r24, r28
     3f2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     3f6:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	fc 01       	movw	r30, r24
     408:	06 2f       	mov	r16, r22
     40a:	17 2f       	mov	r17, r23
     40c:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     40e:	21 11       	cpse	r18, r1
     410:	28 c0       	rjmp	.+80     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		(*sat)++;
     412:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     414:	99 ee       	ldi	r25, 0xE9	; 233
     416:	98 0f       	add	r25, r24
     418:	96 30       	cpi	r25, 0x06	; 6
     41a:	18 f0       	brcs	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 83       	st	Z, r24
     420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     422:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     424:	80 81       	ld	r24, Z
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	89 e1       	ldi	r24, 0x19	; 25
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	1f 93       	push	r17
     434:	0f 93       	push	r16
     436:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     43a:	88 81       	ld	r24, Y
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     444:	80 2f       	mov	r24, r16
     446:	91 2f       	mov	r25, r17
     448:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	88 81       	ld	r24, Y
     450:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	28 c0       	rjmp	.+80     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}
	else if (inc_dec == UMANJI)
     462:	21 30       	cpi	r18, 0x01	; 1
     464:	31 f5       	brne	.+76     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{
		(*sat)--;
     466:	80 81       	ld	r24, Z
     468:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     46a:	8a 3f       	cpi	r24, 0xFA	; 250
     46c:	10 f4       	brcc	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     46e:	80 83       	st	Z, r24
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     472:	87 e1       	ldi	r24, 0x17	; 23
     474:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     476:	80 81       	ld	r24, Z
     478:	1f 92       	push	r1
     47a:	8f 93       	push	r24
     47c:	89 e1       	ldi	r24, 0x19	; 25
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	1f 93       	push	r17
     486:	0f 93       	push	r16
     488:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     48c:	88 81       	ld	r24, Y
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	81 50       	subi	r24, 0x01	; 1
     492:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     496:	80 2f       	mov	r24, r16
     498:	91 2f       	mov	r25, r17
     49a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	88 81       	ld	r24, Y
     4a2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
	}
	
	
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	fc 01       	movw	r30, r24
     4c6:	06 2f       	mov	r16, r22
     4c8:	17 2f       	mov	r17, r23
     4ca:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     4cc:	21 11       	cpse	r18, r1
     4ce:	28 c0       	rjmp	.+80     	; 0x520 <minuti_ispis+0x64>
	{
		(*minut)++;
     4d0:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     4d2:	95 ec       	ldi	r25, 0xC5	; 197
     4d4:	98 0f       	add	r25, r24
     4d6:	95 30       	cpi	r25, 0x05	; 5
     4d8:	18 f0       	brcs	.+6      	; 0x4e0 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	80 83       	st	Z, r24
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     4e0:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     4e2:	80 81       	ld	r24, Z
     4e4:	1f 92       	push	r1
     4e6:	8f 93       	push	r24
     4e8:	89 e1       	ldi	r24, 0x19	; 25
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	1f 93       	push	r17
     4f2:	0f 93       	push	r16
     4f4:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4f8:	88 81       	ld	r24, Y
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	81 50       	subi	r24, 0x01	; 1
     4fe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     502:	80 2f       	mov	r24, r16
     504:	91 2f       	mov	r25, r17
     506:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	88 81       	ld	r24, Y
     50e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	28 c0       	rjmp	.+80     	; 0x570 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     520:	21 30       	cpi	r18, 0x01	; 1
     522:	31 f5       	brne	.+76     	; 0x570 <minuti_ispis+0xb4>
	{
		(*minut)--;
     524:	80 81       	ld	r24, Z
     526:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     528:	8a 3f       	cpi	r24, 0xFA	; 250
     52a:	10 f4       	brcc	.+4      	; 0x530 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     52c:	80 83       	st	Z, r24
     52e:	02 c0       	rjmp	.+4      	; 0x534 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     530:	8b e3       	ldi	r24, 0x3B	; 59
     532:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     534:	80 81       	ld	r24, Z
     536:	1f 92       	push	r1
     538:	8f 93       	push	r24
     53a:	89 e1       	ldi	r24, 0x19	; 25
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	1f 93       	push	r17
     544:	0f 93       	push	r16
     546:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     54a:	88 81       	ld	r24, Y
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     554:	80 2f       	mov	r24, r16
     556:	91 2f       	mov	r25, r17
     558:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	88 81       	ld	r24, Y
     560:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
	}
	
	
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	08 95       	ret

0000057a <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	fc 01       	movw	r30, r24
     584:	06 2f       	mov	r16, r22
     586:	17 2f       	mov	r17, r23
     588:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     58a:	21 11       	cpse	r18, r1
     58c:	28 c0       	rjmp	.+80     	; 0x5de <sekundi_ispis+0x64>
	{
		(*sekund)++;
     58e:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     590:	95 ec       	ldi	r25, 0xC5	; 197
     592:	98 0f       	add	r25, r24
     594:	95 30       	cpi	r25, 0x05	; 5
     596:	18 f0       	brcs	.+6      	; 0x59e <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 83       	st	Z, r24
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     59e:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     5a0:	80 81       	ld	r24, Z
     5a2:	1f 92       	push	r1
     5a4:	8f 93       	push	r24
     5a6:	89 e1       	ldi	r24, 0x19	; 25
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	1f 93       	push	r17
     5b0:	0f 93       	push	r16
     5b2:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5b6:	88 81       	ld	r24, Y
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	81 50       	subi	r24, 0x01	; 1
     5bc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     5c0:	80 2f       	mov	r24, r16
     5c2:	91 2f       	mov	r25, r17
     5c4:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	88 81       	ld	r24, Y
     5cc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	28 c0       	rjmp	.+80     	; 0x62e <sekundi_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     5de:	21 30       	cpi	r18, 0x01	; 1
     5e0:	31 f5       	brne	.+76     	; 0x62e <sekundi_ispis+0xb4>
	{
		(*sekund)--;
     5e2:	80 81       	ld	r24, Z
     5e4:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     5e6:	8a 3f       	cpi	r24, 0xFA	; 250
     5e8:	10 f4       	brcc	.+4      	; 0x5ee <sekundi_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     5ea:	80 83       	st	Z, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <sekundi_ispis+0x78>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     5f2:	80 81       	ld	r24, Z
     5f4:	1f 92       	push	r1
     5f6:	8f 93       	push	r24
     5f8:	89 e1       	ldi	r24, 0x19	; 25
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	1f 93       	push	r17
     602:	0f 93       	push	r16
     604:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     608:	88 81       	ld	r24, Y
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     612:	80 2f       	mov	r24, r16
     614:	91 2f       	mov	r25, r17
     616:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	88 81       	ld	r24, Y
     61e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
	}
	
	
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	08 95       	ret

00000638 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
     63c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     640:	84 60       	ori	r24, 0x04	; 4
     642:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     646:	6e e4       	ldi	r22, 0x4E	; 78
     648:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     64c:	87 ec       	ldi	r24, 0xC7	; 199
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <putnibble+0x18>
     654:	00 c0       	rjmp	.+0      	; 0x656 <putnibble+0x1e>
     656:	00 00       	nop
     658:	c2 95       	swap	r28
     65a:	c0 7f       	andi	r28, 0xF0	; 240
     65c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     660:	6e e4       	ldi	r22, 0x4E	; 78
     662:	8c 2b       	or	r24, r28
     664:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     668:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     66c:	8b 7f       	andi	r24, 0xFB	; 251
     66e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     672:	6e e4       	ldi	r22, 0x4E	; 78
     674:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     678:	87 ec       	ldi	r24, 0xC7	; 199
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <putnibble+0x44>
     680:	00 c0       	rjmp	.+0      	; 0x682 <putnibble+0x4a>
     682:	00 00       	nop
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <lcd1602_send_byte>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	c8 2f       	mov	r28, r24
     68e:	d8 2f       	mov	r29, r24
     690:	d2 95       	swap	r29
     692:	df 70       	andi	r29, 0x0F	; 15
     694:	61 11       	cpse	r22, r1
     696:	09 c0       	rjmp	.+18     	; 0x6aa <lcd1602_send_byte+0x22>
     698:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     69c:	8e 7f       	andi	r24, 0xFE	; 254
     69e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     6a2:	6e e4       	ldi	r22, 0x4E	; 78
     6a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <lcd1602_send_byte+0x32>
     6aa:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     6ae:	81 60       	ori	r24, 0x01	; 1
     6b0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     6b4:	6e e4       	ldi	r22, 0x4E	; 78
     6b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6ba:	8d 2f       	mov	r24, r29
     6bc:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6c0:	8c 2f       	mov	r24, r28
     6c2:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <lcd1602_send_char>:
     6cc:	cf 93       	push	r28
     6ce:	c8 2f       	mov	r28, r24
     6d0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     6da:	6e e4       	ldi	r22, 0x4E	; 78
     6dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6e0:	8c 2f       	mov	r24, r28
     6e2:	82 95       	swap	r24
     6e4:	8f 70       	andi	r24, 0x0F	; 15
     6e6:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6ea:	8c 2f       	mov	r24, r28
     6ec:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <lcd1602_init>:
     6f4:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <led_pin>
     6f8:	8f e5       	ldi	r24, 0x5F	; 95
     6fa:	9a ee       	ldi	r25, 0xEA	; 234
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <lcd1602_init+0x8>
     700:	00 c0       	rjmp	.+0      	; 0x702 <lcd1602_init+0xe>
     702:	00 00       	nop
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     70a:	8f e7       	ldi	r24, 0x7F	; 127
     70c:	9e e3       	ldi	r25, 0x3E	; 62
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <lcd1602_init+0x1a>
     712:	00 c0       	rjmp	.+0      	; 0x714 <lcd1602_init+0x20>
     714:	00 00       	nop
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     71c:	8f e8       	ldi	r24, 0x8F	; 143
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <lcd1602_init+0x2c>
     724:	00 c0       	rjmp	.+0      	; 0x726 <lcd1602_init+0x32>
     726:	00 00       	nop
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     72e:	8f e9       	ldi	r24, 0x9F	; 159
     730:	9f e0       	ldi	r25, 0x0F	; 15
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <lcd1602_init+0x3e>
     736:	00 c0       	rjmp	.+0      	; 0x738 <lcd1602_init+0x44>
     738:	00 00       	nop
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     740:	8f e9       	ldi	r24, 0x9F	; 159
     742:	9f e0       	ldi	r25, 0x0F	; 15
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <lcd1602_init+0x50>
     748:	00 c0       	rjmp	.+0      	; 0x74a <lcd1602_init+0x56>
     74a:	00 00       	nop
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	88 e2       	ldi	r24, 0x28	; 40
     750:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     754:	8f e9       	ldi	r24, 0x9F	; 159
     756:	9f e0       	ldi	r25, 0x0F	; 15
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <lcd1602_init+0x64>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <lcd1602_init+0x6a>
     75e:	00 00       	nop
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	8c e0       	ldi	r24, 0x0C	; 12
     764:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     768:	8f e9       	ldi	r24, 0x9F	; 159
     76a:	9f e0       	ldi	r25, 0x0F	; 15
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd1602_init+0x78>
     770:	00 c0       	rjmp	.+0      	; 0x772 <lcd1602_init+0x7e>
     772:	00 00       	nop
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	86 e0       	ldi	r24, 0x06	; 6
     778:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     77c:	8f e9       	ldi	r24, 0x9F	; 159
     77e:	9f e0       	ldi	r25, 0x0F	; 15
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <lcd1602_init+0x8c>
     784:	00 c0       	rjmp	.+0      	; 0x786 <lcd1602_init+0x92>
     786:	00 00       	nop
     788:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     78c:	88 60       	ori	r24, 0x08	; 8
     78e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     792:	6e e4       	ldi	r22, 0x4E	; 78
     794:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     798:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     7a2:	6e e4       	ldi	r22, 0x4E	; 78
     7a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     7a8:	08 95       	ret

000007aa <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     7aa:	90 e4       	ldi	r25, 0x40	; 64
     7ac:	69 9f       	mul	r22, r25
     7ae:	80 0d       	add	r24, r0
     7b0:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	80 68       	ori	r24, 0x80	; 128
     7b6:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7ba:	08 95       	ret

000007bc <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7c4:	80 81       	ld	r24, Z
     7c6:	88 23       	and	r24, r24
     7c8:	59 f0       	breq	.+22     	; 0x7e0 <lcd1602_send_string+0x24>
     7ca:	8f 01       	movw	r16, r30
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     7ce:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd1602_send_char>
		i++;
     7d2:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7d4:	f8 01       	movw	r30, r16
     7d6:	ec 0f       	add	r30, r28
     7d8:	f1 1d       	adc	r31, r1
     7da:	80 81       	ld	r24, Z
     7dc:	81 11       	cpse	r24, r1
     7de:	f7 cf       	rjmp	.-18     	; 0x7ce <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     7e8:	88 23       	and	r24, r24
     7ea:	29 f0       	breq	.+10     	; 0x7f6 <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);	//blink on
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	8f e0       	ldi	r24, 0x0F	; 15
     7f0:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7f4:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);	//blink off
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	8c e0       	ldi	r24, 0x0C	; 12
     7fa:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7fe:	08 95       	ret

00000800 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     800:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     802:	dc 01       	movw	r26, r24
     804:	12 96       	adiw	r26, 0x02	; 2
     806:	2c 91       	ld	r18, X
     808:	12 97       	sbiw	r26, 0x02	; 2
     80a:	54 e6       	ldi	r21, 0x64	; 100
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	8c 91       	ld	r24, X
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	52 9f       	mul	r21, r18
     814:	80 0d       	add	r24, r0
     816:	91 1d       	adc	r25, r1
     818:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     81a:	db 01       	movw	r26, r22
     81c:	12 96       	adiw	r26, 0x02	; 2
     81e:	2c 91       	ld	r18, X
     820:	12 97       	sbiw	r26, 0x02	; 2
     822:	11 96       	adiw	r26, 0x01	; 1
     824:	6c 91       	ld	r22, X
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	52 9f       	mul	r21, r18
     82a:	60 0d       	add	r22, r0
     82c:	71 1d       	adc	r23, r1
     82e:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     830:	42 81       	ldd	r20, Z+2	; 0x02
     832:	21 81       	ldd	r18, Z+1	; 0x01
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	54 9f       	mul	r21, r20
     838:	20 0d       	add	r18, r0
     83a:	31 1d       	adc	r19, r1
     83c:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     83e:	86 17       	cp	r24, r22
     840:	97 07       	cpc	r25, r23
     842:	68 f0       	brcs	.+26     	; 0x85e <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     844:	28 17       	cp	r18, r24
     846:	39 07       	cpc	r19, r25
     848:	20 f0       	brcs	.+8      	; 0x852 <period_paljenja+0x52>
     84a:	28 33       	cpi	r18, 0x38	; 56
     84c:	b9 e0       	ldi	r27, 0x09	; 9
     84e:	3b 07       	cpc	r19, r27
     850:	78 f0       	brcs	.+30     	; 0x870 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	26 17       	cp	r18, r22
     856:	37 07       	cpc	r19, r23
     858:	70 f0       	brcs	.+28     	; 0x876 <period_paljenja+0x76>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	40 f0       	brcs	.+16     	; 0x874 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	26 17       	cp	r18, r22
     868:	37 07       	cpc	r19, r23
     86a:	28 f0       	brcs	.+10     	; 0x876 <period_paljenja+0x76>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     874:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     876:	08 95       	ret

00000878 <displ1_LCD_ispis>:


void displ1_LCD_ispis()
{
	/*izbegao sam celear-ovanje ekrana koje izaziva treperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
	lcd1602_goto_xy(0,0);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("    ");
     880:	84 e0       	ldi	r24, 0x04	; 4
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("    ");
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(0,1);
     898:	61 e0       	ldi	r22, 0x01	; 1
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     8a8:	e7 e3       	ldi	r30, 0x37	; 55
     8aa:	f2 e0       	ldi	r31, 0x02	; 2
     8ac:	81 81       	ldd	r24, Z+1	; 0x01
     8ae:	1f 92       	push	r1
     8b0:	8f 93       	push	r24
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	1f 92       	push	r1
     8b6:	8f 93       	push	r24
     8b8:	e5 e2       	ldi	r30, 0x25	; 37
     8ba:	f2 e0       	ldi	r31, 0x02	; 2
     8bc:	81 81       	ldd	r24, Z+1	; 0x01
     8be:	1f 92       	push	r1
     8c0:	8f 93       	push	r24
     8c2:	82 81       	ldd	r24, Z+2	; 0x02
     8c4:	1f 92       	push	r1
     8c6:	8f 93       	push	r24
     8c8:	89 e0       	ldi	r24, 0x09	; 9
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	9f 93       	push	r25
     8ce:	8f 93       	push	r24
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	9f 93       	push	r25
     8d6:	8f 93       	push	r24
     8d8:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
	lcd1602_send_string(bafer);
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("  ");
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
}
     8ec:	8d b7       	in	r24, 0x3d	; 61
     8ee:	9e b7       	in	r25, 0x3e	; 62
     8f0:	0c 96       	adiw	r24, 0x0c	; 12
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	9e bf       	out	0x3e, r25	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	8d bf       	out	0x3d, r24	; 61
     8fc:	08 95       	ret

000008fe <menu1_LCD_ispis>:

void menu1_LCD_ispis()
{
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
	int pomocna = kursor_vert;
     902:	c0 91 d7 01 	lds	r28, 0x01D7	; 0x8001d7 <kursor_vert>
     906:	0c 2e       	mov	r0, r28
     908:	00 0c       	add	r0, r0
     90a:	dd 0b       	sbc	r29, r29
	
	lcd1602_goto_xy(0, 0);
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     914:	86 e2       	ldi	r24, 0x26	; 38
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(" ");	//prazno polje ispod ">"
     924:	87 e0       	ldi	r24, 0x07	; 7
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>

	lcd1602_goto_xy(1,0);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(menu1_txt[kursor_vert]);
     934:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     938:	20 e1       	ldi	r18, 0x10	; 16
     93a:	82 02       	muls	r24, r18
     93c:	c0 01       	movw	r24, r0
     93e:	11 24       	eor	r1, r1
     940:	81 58       	subi	r24, 0x81	; 129
     942:	9e 4f       	sbci	r25, 0xFE	; 254
     944:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	if (kursor_vert == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     948:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     94c:	81 11       	cpse	r24, r1
     94e:	15 c0       	rjmp	.+42     	; 0x97a <__stack+0x7b>
	{
		if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     950:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <jednok_on_off>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	49 f4       	brne	.+18     	; 0x96a <__stack+0x6b>
		{
			lcd1602_goto_xy(12,0);
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	8c e0       	ldi	r24, 0x0C	; 12
     95c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     960:	8e e1       	ldi	r24, 0x1E	; 30
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     968:	08 c0       	rjmp	.+16     	; 0x97a <__stack+0x7b>
		}
		else					//ako je off ispisi <OF> pored JEDNOKRATNO
		{
			lcd1602_goto_xy(12,0);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	8c e0       	ldi	r24, 0x0C	; 12
     96e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     972:	83 e2       	ldi	r24, 0x23	; 35
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		}
	}
	
	lcd1602_goto_xy(1,1);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	pomocna = (pomocna==KURSOR_MENU1_MAX) ? -1 : pomocna;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     982:	c3 30       	cpi	r28, 0x03	; 3
     984:	d1 05       	cpc	r29, r1
     986:	19 f1       	breq	.+70     	; 0x9ce <__stack+0xcf>
	lcd1602_send_string(menu1_txt[pomocna + 1]);
     988:	ce 01       	movw	r24, r28
     98a:	82 95       	swap	r24
     98c:	92 95       	swap	r25
     98e:	90 7f       	andi	r25, 0xF0	; 240
     990:	98 27       	eor	r25, r24
     992:	80 7f       	andi	r24, 0xF0	; 240
     994:	98 27       	eor	r25, r24
     996:	81 57       	subi	r24, 0x71	; 113
     998:	9e 4f       	sbci	r25, 0xFE	; 254
     99a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	if ( (pomocna+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     99e:	21 96       	adiw	r28, 0x01	; 1
     9a0:	d9 f4       	brne	.+54     	; 0x9d8 <__stack+0xd9>
	{
		if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     9a2:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <jednok_on_off>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	49 f4       	brne	.+18     	; 0x9bc <__stack+0xbd>
		{
			lcd1602_goto_xy(12,1);
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	8c e0       	ldi	r24, 0x0C	; 12
     9ae:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     9b2:	8e e1       	ldi	r24, 0x1E	; 30
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <__stack+0xd9>
		}
		else					//ako je off ispisi <OF> pored JEDNOKRATNO
		{
			lcd1602_goto_xy(12,1);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	8c e0       	ldi	r24, 0x0C	; 12
     9c0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     9c4:	83 e2       	ldi	r24, 0x23	; 35
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		}
	}
	
}
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <__stack+0xd9>
		}
	}
	
	lcd1602_goto_xy(1,1);
	pomocna = (pomocna==KURSOR_MENU1_MAX) ? -1 : pomocna;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
	lcd1602_send_string(menu1_txt[pomocna + 1]);
     9ce:	8f e7       	ldi	r24, 0x7F	; 127
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     9d6:	e5 cf       	rjmp	.-54     	; 0x9a2 <__stack+0xa3>
			lcd1602_goto_xy(12,1);
			lcd1602_send_string("<OF>");
		}
	}
	
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <podSat_LCD_ispis>:

void podSat_LCD_ispis()
{
	lcd1602_goto_xy(0,0);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("PODESAVANJE SATA");
     9e6:	88 e2       	ldi	r24, 0x28	; 40
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(0,1);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("    ");
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("    ");
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     a14:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
     a1e:	08 95       	ret

00000a20 <podOnOff_LCD_ispis>:
}

void podOnOff_LCD_ispis()
{
	
	sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     a20:	ec e1       	ldi	r30, 0x1C	; 28
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	81 81       	ldd	r24, Z+1	; 0x01
     a26:	1f 92       	push	r1
     a28:	8f 93       	push	r24
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	1f 92       	push	r1
     a2e:	8f 93       	push	r24
     a30:	ee e2       	ldi	r30, 0x2E	; 46
     a32:	f2 e0       	ldi	r31, 0x02	; 2
     a34:	81 81       	ldd	r24, Z+1	; 0x01
     a36:	1f 92       	push	r1
     a38:	8f 93       	push	r24
     a3a:	82 81       	ldd	r24, Z+2	; 0x02
     a3c:	1f 92       	push	r1
     a3e:	8f 93       	push	r24
     a40:	89 e0       	ldi	r24, 0x09	; 9
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	88 e0       	ldi	r24, 0x08	; 8
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
	
	lcd1602_goto_xy(0,0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  UPALI--UGASI  ");
     a5c:	89 e3       	ldi	r24, 0x39	; 57
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     a6c:	86 e0       	ldi	r24, 0x06	; 6
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     a74:	88 e0       	ldi	r24, 0x08	; 8
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("  ");
     a7c:	86 e0       	ldi	r24, 0x06	; 6
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     a8a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
}
     a94:	8d b7       	in	r24, 0x3d	; 61
     a96:	9e b7       	in	r25, 0x3e	; 62
     a98:	0c 96       	adiw	r24, 0x0c	; 12
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	9e bf       	out	0x3e, r25	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	8d bf       	out	0x3d, r24	; 61
     aa4:	08 95       	ret

00000aa6 <jednokrat_LCD_ispis>:

void jednokrat_LCD_ispis()
{
	
	sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     aa6:	ec e1       	ldi	r30, 0x1C	; 28
     aa8:	f2 e0       	ldi	r31, 0x02	; 2
     aaa:	81 81       	ldd	r24, Z+1	; 0x01
     aac:	1f 92       	push	r1
     aae:	8f 93       	push	r24
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	1f 92       	push	r1
     ab4:	8f 93       	push	r24
     ab6:	ee e2       	ldi	r30, 0x2E	; 46
     ab8:	f2 e0       	ldi	r31, 0x02	; 2
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	1f 92       	push	r1
     abe:	8f 93       	push	r24
     ac0:	82 81       	ldd	r24, Z+2	; 0x02
     ac2:	1f 92       	push	r1
     ac4:	8f 93       	push	r24
     ac6:	89 e0       	ldi	r24, 0x09	; 9
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	9f 93       	push	r25
     ad4:	8f 93       	push	r24
     ad6:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
	
	lcd1602_goto_xy(0,0);
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  JEDNOKRATNO:  ");
     ae2:	8a e4       	ldi	r24, 0x4A	; 74
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("  ");
     b02:	86 e0       	ldi	r24, 0x06	; 6
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     b10:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
}
     b1a:	8d b7       	in	r24, 0x3d	; 61
     b1c:	9e b7       	in	r25, 0x3e	; 62
     b1e:	0c 96       	adiw	r24, 0x0c	; 12
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	9e bf       	out	0x3e, r25	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	8d bf       	out	0x3d, r24	; 61
     b2a:	08 95       	ret

00000b2c <brojilo_LCD_ispis>:

void brojilo_LCD_ispis()
{
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
	//lcd1602_clear(); izbrgavam, zbog treperenja, na praznim mestima stampam razmake
	
	sprintf(bafer, "%5dV", napon);
     b30:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
     b34:	8f 93       	push	r24
     b36:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
     b3a:	8f 93       	push	r24
     b3c:	8b e5       	ldi	r24, 0x5B	; 91
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	88 e0       	ldi	r24, 0x08	; 8
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
	lcd1602_goto_xy(0,0);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     b58:	88 e0       	ldi	r24, 0x08	; 8
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_send_string("   ");
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	dtostrf(snaga, 4, 2, bafer);
     b68:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
     b6c:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
     b70:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
     b74:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
     b78:	08 e0       	ldi	r16, 0x08	; 8
     b7a:	12 e0       	ldi	r17, 0x02	; 2
     b7c:	22 e0       	ldi	r18, 0x02	; 2
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	44 e0       	ldi	r20, 0x04	; 4
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dtostrf>
	lcd1602_goto_xy(9,0);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	89 e0       	ldi	r24, 0x09	; 9
     b8c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     b90:	c8 01       	movw	r24, r16
     b92:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("kW ");	  //+ razmak da popuni ekran
     b96:	80 e6       	ldi	r24, 0x60	; 96
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	dtostrf(struja, 5, 1, bafer);
     b9e:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
     ba2:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
     ba6:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
     baa:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	45 e0       	ldi	r20, 0x05	; 5
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dtostrf>
	lcd1602_goto_xy(0,1);
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     bc2:	c8 01       	movw	r24, r16
     bc4:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("A");
     bc8:	87 e3       	ldi	r24, 0x37	; 55
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_send_string("   ");
     bd0:	85 e0       	ldi	r24, 0x05	; 5
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	dtostrf(energija, 5, 2, bafer);
     bd8:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
     bdc:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
     be0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
     be4:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
     be8:	22 e0       	ldi	r18, 0x02	; 2
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	45 e0       	ldi	r20, 0x05	; 5
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dtostrf>
	lcd1602_goto_xy(8,1);
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     bfc:	c8 01       	movw	r24, r16
     bfe:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("kWh");
     c02:	84 e6       	ldi	r24, 0x64	; 100
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <fsm_lcd_menu>:
	return stanje;
	
}

void fsm_lcd_menu()
{
     c1c:	0f 93       	push	r16
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	
	switch(STATE)
     c22:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <STATE>
     c26:	8e 2f       	mov	r24, r30
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	87 30       	cpi	r24, 0x07	; 7
     c2c:	91 05       	cpc	r25, r1
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <fsm_lcd_menu+0x16>
     c30:	52 c4       	rjmp	.+2212   	; 0x14d6 <fsm_lcd_menu+0x8ba>
     c32:	fc 01       	movw	r30, r24
     c34:	ec 5c       	subi	r30, 0xCC	; 204
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__tablejump2__>
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     c3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c40:	88 23       	and	r24, r24
     c42:	31 f0       	breq	.+12     	; 0xc50 <fsm_lcd_menu+0x34>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     c44:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     c48:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <timer_disp_cycle+0x1>
     c4c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <timer_disp_cycle>
				}
				
				if (timer_disp_cycle > 7000)	//7 sekundi
     c50:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer_disp_cycle>
     c54:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer_disp_cycle+0x1>
     c58:	89 35       	cpi	r24, 0x59	; 89
     c5a:	9b 41       	sbci	r25, 0x1B	; 27
     c5c:	28 f0       	brcs	.+10     	; 0xc68 <fsm_lcd_menu+0x4c>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL2;
     c64:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
				}
						
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     c68:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <flag_pc_int>
     c6c:	88 23       	and	r24, r24
     c6e:	61 f1       	breq	.+88     	; 0xcc8 <fsm_lcd_menu+0xac>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     c70:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     c74:	00 e0       	ldi	r16, 0x00	; 0
     c76:	28 e4       	ldi	r18, 0x48	; 72
     c78:	32 e0       	ldi	r19, 0x02	; 2
     c7a:	40 e4       	ldi	r20, 0x40	; 64
     c7c:	52 e0       	ldi	r21, 0x02	; 2
     c7e:	61 e4       	ldi	r22, 0x41	; 65
     c80:	72 e0       	ldi	r23, 0x02	; 2
     c82:	82 e4       	ldi	r24, 0x42	; 66
     c84:	92 e0       	ldi	r25, 0x02	; 2
     c86:	0e 94 c9 0c 	call	0x1992	; 0x1992 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     c8a:	e0 e4       	ldi	r30, 0x40	; 64
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
     c8e:	80 81       	ld	r24, Z
     c90:	1f 92       	push	r1
     c92:	8f 93       	push	r24
     c94:	81 81       	ldd	r24, Z+1	; 0x01
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	82 81       	ldd	r24, Z+2	; 0x02
     c9c:	1f 92       	push	r1
     c9e:	8f 93       	push	r24
     ca0:	88 e6       	ldi	r24, 0x68	; 104
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	9f 93       	push	r25
     ca6:	8f 93       	push	r24
     ca8:	88 e0       	ldi	r24, 0x08	; 8
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
				
					displ1_LCD_ispis();			//ispis karaktera na LCD
     cb4:	0e 94 3c 04 	call	0x878	; 0x878 <displ1_LCD_ispis>
     cb8:	8d b7       	in	r24, 0x3d	; 61
     cba:	9e b7       	in	r25, 0x3e	; 62
     cbc:	0a 96       	adiw	r24, 0x0a	; 10
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	9e bf       	out	0x3e, r25	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	8d bf       	out	0x3d, r24	; 61
			
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     cce:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <fsm_lcd_menu+0xbc>
     cd6:	ff c3       	rjmp	.+2046   	; 0x14d6 <fsm_lcd_menu+0x8ba>
				{
					displ_flag_shot = 1;	//opet dozvolim, pri izlazku iz ovog stejta
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     ce4:	f8 c3       	rjmp	.+2032   	; 0x14d6 <fsm_lcd_menu+0x8ba>
		break;
		
		case DISPL2:
				//ispisuje napon, struju, snagu... Smenjuje se periodicno sa DISPL1, uz pomoc tajmera
				
				if(displ_flag_shot)	//startujem tajmer samo prvi put za ciklicno menjanje DIPL1 i DISPL2
     ce6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cea:	88 23       	and	r24, r24
     cec:	31 f0       	breq	.+12     	; 0xcfa <fsm_lcd_menu+0xde>
				{
					displ_flag_shot = 0; //resetujem flag
     cee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     cf2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <timer_disp_cycle+0x1>
     cf6:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <timer_disp_cycle>
				}
				
				if (timer_disp_cycle > 4000)	//4 sekunde istekle, menjaj meni
     cfa:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer_disp_cycle>
     cfe:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer_disp_cycle+0x1>
     d02:	81 3a       	cpi	r24, 0xA1	; 161
     d04:	9f 40       	sbci	r25, 0x0F	; 15
     d06:	28 f0       	brcs	.+10     	; 0xd12 <fsm_lcd_menu+0xf6>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL1;
     d0e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <STATE>
				}
				
				if ( flag_prekid_100ms_VAkWh )	//Ispisujem napon, struju snagu, sa periodom 100ms, da nije zamrznut ispis vec da se vide promene
     d12:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <flag_prekid_100ms_VAkWh>
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <fsm_lcd_menu+0x106>
				{
					
					flag_prekid_100ms_VAkWh = 0; //reset flaga
     d1a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <flag_prekid_100ms_VAkWh>
					
					brojilo_LCD_ispis();			//ispis karaktera na LCD
     d1e:	0e 94 96 05 	call	0xb2c	; 0xb2c <brojilo_LCD_ispis>
					
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d28:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <fsm_lcd_menu+0x116>
     d30:	d2 c3       	rjmp	.+1956   	; 0x14d6 <fsm_lcd_menu+0x8ba>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     d3e:	cb c3       	rjmp	.+1942   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					
		break;
		
		case MENU1:
					
					menu1_LCD_ispis();			//ispis karaktera na LCD
     d40:	0e 94 7f 04 	call	0x8fe	; 0x8fe <menu1_LCD_ispis>
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     d44:	65 e0       	ldi	r22, 0x05	; 5
     d46:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d4a:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     d4e:	88 23       	and	r24, r24
     d50:	59 f0       	breq	.+22     	; 0xd68 <fsm_lcd_menu+0x14c>
					{
						kursor_vert++;
     d52:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     d56:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor_vert > KURSOR_MENU1_MAX)
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	1c f4       	brge	.+6      	; 0xd62 <fsm_lcd_menu+0x146>
					
					menu1_LCD_ispis();			//ispis karaktera na LCD
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor_vert++;
     d5c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <kursor_vert>
     d60:	ba c3       	rjmp	.+1908   	; 0x14d6 <fsm_lcd_menu+0x8ba>
						if(kursor_vert > KURSOR_MENU1_MAX)
						kursor_vert = 0;
     d62:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <kursor_vert>
     d66:	b7 c3       	rjmp	.+1902   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     d68:	64 e0       	ldi	r22, 0x04	; 4
     d6a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d6e:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     d72:	88 23       	and	r24, r24
     d74:	59 f0       	breq	.+22     	; 0xd8c <fsm_lcd_menu+0x170>
					{
						kursor_vert--;
     d76:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     d7a:	81 50       	subi	r24, 0x01	; 1
						if(kursor_vert < 0)		//min je 0, logicno
     d7c:	1a f0       	brmi	.+6      	; 0xd84 <fsm_lcd_menu+0x168>
						if(kursor_vert > KURSOR_MENU1_MAX)
						kursor_vert = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor_vert--;
     d7e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <kursor_vert>
     d82:	a9 c3       	rjmp	.+1874   	; 0x14d6 <fsm_lcd_menu+0x8ba>
						if(kursor_vert < 0)		//min je 0, logicno
						kursor_vert = KURSOR_MENU1_MAX;
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <kursor_vert>
     d8a:	a5 c3       	rjmp	.+1866   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if(kursor_vert == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     d8c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	59 f4       	brne	.+22     	; 0xdaa <fsm_lcd_menu+0x18e>
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d9a:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     d9e:	88 23       	and	r24, r24
     da0:	21 f0       	breq	.+8      	; 0xdaa <fsm_lcd_menu+0x18e>
						STATE = POD_SAT;	//meni za podesavanje sata
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     da8:	96 c3       	rjmp	.+1836   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					else if(kursor_vert == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     daa:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	59 f4       	brne	.+22     	; 0xdc8 <fsm_lcd_menu+0x1ac>
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     db8:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     dbc:	88 23       	and	r24, r24
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <fsm_lcd_menu+0x1ac>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     dc6:	87 c3       	rjmp	.+1806   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					else if(kursor_vert == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     dc8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     dcc:	81 11       	cpse	r24, r1
     dce:	25 c0       	rjmp	.+74     	; 0xe1a <fsm_lcd_menu+0x1fe>
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     dd6:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     dda:	88 23       	and	r24, r24
     ddc:	21 f0       	breq	.+8      	; 0xde6 <fsm_lcd_menu+0x1ca>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     de4:	78 c3       	rjmp	.+1776   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					else if( kursor_vert == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     de6:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     dea:	81 11       	cpse	r24, r1
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <fsm_lcd_menu+0x1fe>
     dee:	62 e0       	ldi	r22, 0x02	; 2
     df0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     df4:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     df8:	81 11       	cpse	r24, r1
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <fsm_lcd_menu+0x1ee>
     dfc:	63 e0       	ldi	r22, 0x03	; 3
     dfe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e02:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     e06:	88 23       	and	r24, r24
     e08:	41 f0       	breq	.+16     	; 0xe1a <fsm_lcd_menu+0x1fe>
						jednok_on_off = !jednok_on_off;	//toggle
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <jednok_on_off>
     e10:	91 11       	cpse	r25, r1
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <jednok_on_off>
     e18:	5e c3       	rjmp	.+1724   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					else if ( kursor_vert == KURSOR_BROJILO && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     e1a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	59 f4       	brne	.+22     	; 0xe38 <fsm_lcd_menu+0x21c>
     e22:	61 e0       	ldi	r22, 0x01	; 1
     e24:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e28:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     e2c:	88 23       	and	r24, r24
     e2e:	21 f0       	breq	.+8      	; 0xe38 <fsm_lcd_menu+0x21c>
						STATE = BROJILO; //sub meni za prikaz merenja trenutnog napona, struje, snage...
     e30:	86 e0       	ldi	r24, 0x06	; 6
     e32:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     e36:	4f c3       	rjmp	.+1694   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e3e:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <fsm_lcd_menu+0x22c>
     e46:	47 c3       	rjmp	.+1678   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					{
						kursor_vert = 0;			//resetujem kursor jer ostane memorisan
     e48:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <kursor_vert>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     e4c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <STATE>
     e50:	42 c3       	rjmp	.+1668   	; 0x14d6 <fsm_lcd_menu+0x8ba>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (displ_flag_shot)
     e52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e56:	88 23       	and	r24, r24
     e58:	69 f1       	breq	.+90     	; 0xeb4 <fsm_lcd_menu+0x298>
					{
						displ_flag_shot = 0;
     e5a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						snap_shot_vremena = vreme_datum;
     e5e:	89 e0       	ldi	r24, 0x09	; 9
     e60:	e0 e4       	ldi	r30, 0x40	; 64
     e62:	f2 e0       	ldi	r31, 0x02	; 2
     e64:	af ef       	ldi	r26, 0xFF	; 255
     e66:	b1 e0       	ldi	r27, 0x01	; 1
     e68:	01 90       	ld	r0, Z+
     e6a:	0d 92       	st	X+, r0
     e6c:	8a 95       	dec	r24
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <fsm_lcd_menu+0x24c>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     e70:	ef ef       	ldi	r30, 0xFF	; 255
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	80 81       	ld	r24, Z
     e76:	1f 92       	push	r1
     e78:	8f 93       	push	r24
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	1f 92       	push	r1
     e7e:	8f 93       	push	r24
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	1f 92       	push	r1
     e84:	8f 93       	push	r24
     e86:	88 e6       	ldi	r24, 0x68	; 104
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	9f 93       	push	r25
     e8c:	8f 93       	push	r24
     e8e:	88 e0       	ldi	r24, 0x08	; 8
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	9f 93       	push	r25
     e94:	8f 93       	push	r24
     e96:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
			
						kursor_horiz = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						podSat_LCD_ispis();			//ispis karaktera na LCD
     ea0:	0e 94 ef 04 	call	0x9de	; 0x9de <podSat_LCD_ispis>
     ea4:	8d b7       	in	r24, 0x3d	; 61
     ea6:	9e b7       	in	r25, 0x3e	; 62
     ea8:	0a 96       	adiw	r24, 0x0a	; 10
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	9e bf       	out	0x3e, r25	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	8d bf       	out	0x3d, r24	; 61
						
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     eba:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     ebe:	88 23       	and	r24, r24
     ec0:	89 f0       	breq	.+34     	; 0xee4 <fsm_lcd_menu+0x2c8>
					{
						kursor_horiz += 3;
     ec2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     ec6:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 11)
     ec8:	8c 30       	cpi	r24, 0x0C	; 12
     eca:	1c f4       	brge	.+6      	; 0xed2 <fsm_lcd_menu+0x2b6>
						
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
     ecc:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <fsm_lcd_menu+0x2bc>
						if(kursor_horiz > 11)
							kursor_horiz = 11;
     ed2:	8b e0       	ldi	r24, 0x0B	; 11
     ed4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						lcd1602_goto_xy(kursor_horiz,1);
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     ede:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     ee2:	f9 c2       	rjmp	.+1522   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     eea:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     eee:	88 23       	and	r24, r24
     ef0:	89 f0       	breq	.+34     	; 0xf14 <fsm_lcd_menu+0x2f8>
					{
						kursor_horiz -= 3;
     ef2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     ef6:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 5)
     ef8:	85 30       	cpi	r24, 0x05	; 5
     efa:	1c f0       	brlt	.+6      	; 0xf02 <fsm_lcd_menu+0x2e6>
							kursor_horiz = 11;
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
     efc:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <fsm_lcd_menu+0x2ec>
						if(kursor_horiz < 5)
							kursor_horiz = 5;
     f02:	85 e0       	ldi	r24, 0x05	; 5
     f04:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						lcd1602_goto_xy(kursor_horiz,1);
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f0e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     f12:	e1 c2       	rjmp	.+1474   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f1a:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     f1e:	88 23       	and	r24, r24
     f20:	39 f1       	breq	.+78     	; 0xf70 <fsm_lcd_menu+0x354>
					{
						if (kursor_horiz == 5)												//podesava SATE ++
     f22:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	51 f4       	brne	.+20     	; 0xf3e <fsm_lcd_menu+0x322>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor_horiz, UVECAJ);
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	46 ed       	ldi	r20, 0xD6	; 214
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	68 e0       	ldi	r22, 0x08	; 8
     f32:	72 e0       	ldi	r23, 0x02	; 2
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
     f3c:	cc c2       	rjmp	.+1432   	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 8)											//podesava MINUTE ++
     f3e:	88 30       	cpi	r24, 0x08	; 8
     f40:	51 f4       	brne	.+20     	; 0xf56 <fsm_lcd_menu+0x33a>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor_horiz, UVECAJ);
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	46 ed       	ldi	r20, 0xD6	; 214
     f46:	51 e0       	ldi	r21, 0x01	; 1
     f48:	68 e0       	ldi	r22, 0x08	; 8
     f4a:	72 e0       	ldi	r23, 0x02	; 2
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
     f54:	c0 c2       	rjmp	.+1408   	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 11)											//podesava SEKUNDE ++
     f56:	8b 30       	cpi	r24, 0x0B	; 11
     f58:	09 f0       	breq	.+2      	; 0xf5c <fsm_lcd_menu+0x340>
     f5a:	bd c2       	rjmp	.+1402   	; 0x14d6 <fsm_lcd_menu+0x8ba>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor_horiz, UVECAJ);
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	46 ed       	ldi	r20, 0xD6	; 214
     f60:	51 e0       	ldi	r21, 0x01	; 1
     f62:	68 e0       	ldi	r22, 0x08	; 8
     f64:	72 e0       	ldi	r23, 0x02	; 2
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 bd 02 	call	0x57a	; 0x57a <sekundi_ispis>
     f6e:	b3 c2       	rjmp	.+1382   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     f70:	65 e0       	ldi	r22, 0x05	; 5
     f72:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f76:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     f7a:	88 23       	and	r24, r24
     f7c:	39 f1       	breq	.+78     	; 0xfcc <fsm_lcd_menu+0x3b0>
					{
						if (kursor_horiz == 5)												//podesava SATE --
     f7e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f82:	85 30       	cpi	r24, 0x05	; 5
     f84:	51 f4       	brne	.+20     	; 0xf9a <fsm_lcd_menu+0x37e>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor_horiz, UMANJI);
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	46 ed       	ldi	r20, 0xD6	; 214
     f8a:	51 e0       	ldi	r21, 0x01	; 1
     f8c:	68 e0       	ldi	r22, 0x08	; 8
     f8e:	72 e0       	ldi	r23, 0x02	; 2
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
     f98:	9e c2       	rjmp	.+1340   	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 8)											//podesava MINUTE --
     f9a:	88 30       	cpi	r24, 0x08	; 8
     f9c:	51 f4       	brne	.+20     	; 0xfb2 <fsm_lcd_menu+0x396>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor_horiz, UMANJI);
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	46 ed       	ldi	r20, 0xD6	; 214
     fa2:	51 e0       	ldi	r21, 0x01	; 1
     fa4:	68 e0       	ldi	r22, 0x08	; 8
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
     fb0:	92 c2       	rjmp	.+1316   	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 11)											//podesava SEKUNDE --
     fb2:	8b 30       	cpi	r24, 0x0B	; 11
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <fsm_lcd_menu+0x39c>
     fb6:	8f c2       	rjmp	.+1310   	; 0x14d6 <fsm_lcd_menu+0x8ba>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor_horiz, UMANJI);
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	46 ed       	ldi	r20, 0xD6	; 214
     fbc:	51 e0       	ldi	r21, 0x01	; 1
     fbe:	68 e0       	ldi	r22, 0x08	; 8
     fc0:	72 e0       	ldi	r23, 0x02	; 2
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 bd 02 	call	0x57a	; 0x57a <sekundi_ispis>
     fca:	85 c2       	rjmp	.+1290   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     fd2:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
     fd6:	88 23       	and	r24, r24
     fd8:	a9 f0       	breq	.+42     	; 0x1004 <fsm_lcd_menu+0x3e8>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     fda:	ef ef       	ldi	r30, 0xFF	; 255
     fdc:	f1 e0       	ldi	r31, 0x01	; 1
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	40 81       	ld	r20, Z
     fe4:	61 81       	ldd	r22, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <setTime>
						displ_flag_shot = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
     ff2:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    1002:	69 c2       	rjmp	.+1234   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    100a:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    100e:	88 23       	and	r24, r24
    1010:	09 f4       	brne	.+2      	; 0x1014 <fsm_lcd_menu+0x3f8>
    1012:	61 c2       	rjmp	.+1218   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						displ_flag_shot = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    101a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    102a:	55 c2       	rjmp	.+1194   	; 0x14d6 <fsm_lcd_menu+0x8ba>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (displ_flag_shot)
    102c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1030:	88 23       	and	r24, r24
    1032:	c9 f0       	breq	.+50     	; 0x1066 <fsm_lcd_menu+0x44a>
					{
						displ_flag_shot = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    1034:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = vreme_paljenja;	
    1038:	89 e0       	ldi	r24, 0x09	; 9
    103a:	e5 e2       	ldi	r30, 0x25	; 37
    103c:	f2 e0       	ldi	r31, 0x02	; 2
    103e:	ae e2       	ldi	r26, 0x2E	; 46
    1040:	b2 e0       	ldi	r27, 0x02	; 2
    1042:	01 90       	ld	r0, Z+
    1044:	0d 92       	st	X+, r0
    1046:	8a 95       	dec	r24
    1048:	e1 f7       	brne	.-8      	; 0x1042 <fsm_lcd_menu+0x426>
						snap_vreme_gasenja = vreme_gasenja;
    104a:	89 e0       	ldi	r24, 0x09	; 9
    104c:	e7 e3       	ldi	r30, 0x37	; 55
    104e:	f2 e0       	ldi	r31, 0x02	; 2
    1050:	ac e1       	ldi	r26, 0x1C	; 28
    1052:	b2 e0       	ldi	r27, 0x02	; 2
    1054:	01 90       	ld	r0, Z+
    1056:	0d 92       	st	X+, r0
    1058:	8a 95       	dec	r24
    105a:	e1 f7       	brne	.-8      	; 0x1054 <fsm_lcd_menu+0x438>
						
						kursor_horiz = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
    1062:	0e 94 10 05 	call	0xa20	; 0xa20 <podOnOff_LCD_ispis>
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    106c:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    1070:	88 23       	and	r24, r24
    1072:	c9 f0       	breq	.+50     	; 0x10a6 <fsm_lcd_menu+0x48a>
					{
						kursor_horiz += 3;
    1074:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    1078:	9c ef       	ldi	r25, 0xFC	; 252
    107a:	98 0f       	add	r25, r24
    107c:	93 30       	cpi	r25, 0x03	; 3
    107e:	20 f4       	brcc	.+8      	; 0x1088 <fsm_lcd_menu+0x46c>
							kursor_horiz = 10;
    1080:	8a e0       	ldi	r24, 0x0A	; 10
    1082:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    1086:	09 c0       	rjmp	.+18     	; 0x109a <fsm_lcd_menu+0x47e>
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    1088:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 10;
						else if (kursor_horiz > 13)
    108a:	8e 30       	cpi	r24, 0x0E	; 14
    108c:	1c f4       	brge	.+6      	; 0x1094 <fsm_lcd_menu+0x478>
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    108e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    1092:	03 c0       	rjmp	.+6      	; 0x109a <fsm_lcd_menu+0x47e>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 10;
						else if (kursor_horiz > 13)
							kursor_horiz = 13;
    1094:	8d e0       	ldi	r24, 0x0D	; 13
    1096:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
							
						lcd1602_goto_xy(kursor_horiz,1);
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    10a0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    10a4:	18 c2       	rjmp	.+1072   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    10a6:	62 e0       	ldi	r22, 0x02	; 2
    10a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    10ac:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    10b0:	88 23       	and	r24, r24
    10b2:	c9 f0       	breq	.+50     	; 0x10e6 <fsm_lcd_menu+0x4ca>
					{
						kursor_horiz -= 3;
    10b4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    10b8:	96 ef       	ldi	r25, 0xF6	; 246
    10ba:	98 0f       	add	r25, r24
    10bc:	93 30       	cpi	r25, 0x03	; 3
    10be:	20 f4       	brcc	.+8      	; 0x10c8 <fsm_lcd_menu+0x4ac>
							kursor_horiz = 6;
    10c0:	86 e0       	ldi	r24, 0x06	; 6
    10c2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <fsm_lcd_menu+0x4be>
							
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    10c8:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 6;
						else if(kursor_horiz < 3)
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	1c f0       	brlt	.+6      	; 0x10d4 <fsm_lcd_menu+0x4b8>
							
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    10ce:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    10d2:	03 c0       	rjmp	.+6      	; 0x10da <fsm_lcd_menu+0x4be>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 6;
						else if(kursor_horiz < 3)
							kursor_horiz = 3;
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
							
						lcd1602_goto_xy(kursor_horiz,1);
    10da:	61 e0       	ldi	r22, 0x01	; 1
    10dc:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    10e0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    10e4:	f8 c1       	rjmp	.+1008   	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    10e6:	64 e0       	ldi	r22, 0x04	; 4
    10e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    10ec:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    10f0:	88 23       	and	r24, r24
    10f2:	99 f1       	breq	.+102    	; 0x115a <fsm_lcd_menu+0x53e>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON ++
    10f4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	51 f4       	brne	.+20     	; 0x1110 <fsm_lcd_menu+0x4f4>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UVECAJ);
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	46 ed       	ldi	r20, 0xD6	; 214
    1100:	51 e0       	ldi	r21, 0x01	; 1
    1102:	68 e0       	ldi	r22, 0x08	; 8
    1104:	72 e0       	ldi	r23, 0x02	; 2
    1106:	80 e3       	ldi	r24, 0x30	; 48
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    110e:	e3 c1       	rjmp	.+966    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON ++
    1110:	86 30       	cpi	r24, 0x06	; 6
    1112:	51 f4       	brne	.+20     	; 0x1128 <fsm_lcd_menu+0x50c>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UVECAJ);
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	46 ed       	ldi	r20, 0xD6	; 214
    1118:	51 e0       	ldi	r21, 0x01	; 1
    111a:	68 e0       	ldi	r22, 0x08	; 8
    111c:	72 e0       	ldi	r23, 0x02	; 2
    111e:	8f e2       	ldi	r24, 0x2F	; 47
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1126:	d7 c1       	rjmp	.+942    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 10)											//podesava SATE_OFF ++
    1128:	8a 30       	cpi	r24, 0x0A	; 10
    112a:	51 f4       	brne	.+20     	; 0x1140 <fsm_lcd_menu+0x524>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UVECAJ);
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	46 ed       	ldi	r20, 0xD6	; 214
    1130:	51 e0       	ldi	r21, 0x01	; 1
    1132:	68 e0       	ldi	r22, 0x08	; 8
    1134:	72 e0       	ldi	r23, 0x02	; 2
    1136:	8e e1       	ldi	r24, 0x1E	; 30
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    113e:	cb c1       	rjmp	.+918    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF ++
    1140:	8d 30       	cpi	r24, 0x0D	; 13
    1142:	09 f0       	breq	.+2      	; 0x1146 <fsm_lcd_menu+0x52a>
    1144:	c8 c1       	rjmp	.+912    	; 0x14d6 <fsm_lcd_menu+0x8ba>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UVECAJ);
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	46 ed       	ldi	r20, 0xD6	; 214
    114a:	51 e0       	ldi	r21, 0x01	; 1
    114c:	68 e0       	ldi	r22, 0x08	; 8
    114e:	72 e0       	ldi	r23, 0x02	; 2
    1150:	8d e1       	ldi	r24, 0x1D	; 29
    1152:	92 e0       	ldi	r25, 0x02	; 2
    1154:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1158:	be c1       	rjmp	.+892    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    115a:	65 e0       	ldi	r22, 0x05	; 5
    115c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1160:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    1164:	88 23       	and	r24, r24
    1166:	99 f1       	breq	.+102    	; 0x11ce <fsm_lcd_menu+0x5b2>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON --
    1168:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	51 f4       	brne	.+20     	; 0x1184 <fsm_lcd_menu+0x568>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UMANJI);
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	46 ed       	ldi	r20, 0xD6	; 214
    1174:	51 e0       	ldi	r21, 0x01	; 1
    1176:	68 e0       	ldi	r22, 0x08	; 8
    1178:	72 e0       	ldi	r23, 0x02	; 2
    117a:	80 e3       	ldi	r24, 0x30	; 48
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1182:	a9 c1       	rjmp	.+850    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON --
    1184:	86 30       	cpi	r24, 0x06	; 6
    1186:	51 f4       	brne	.+20     	; 0x119c <fsm_lcd_menu+0x580>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UMANJI);
    1188:	21 e0       	ldi	r18, 0x01	; 1
    118a:	46 ed       	ldi	r20, 0xD6	; 214
    118c:	51 e0       	ldi	r21, 0x01	; 1
    118e:	68 e0       	ldi	r22, 0x08	; 8
    1190:	72 e0       	ldi	r23, 0x02	; 2
    1192:	8f e2       	ldi	r24, 0x2F	; 47
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    119a:	9d c1       	rjmp	.+826    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 10)											//podesava SATE_OFF --
    119c:	8a 30       	cpi	r24, 0x0A	; 10
    119e:	51 f4       	brne	.+20     	; 0x11b4 <fsm_lcd_menu+0x598>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UMANJI);
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	46 ed       	ldi	r20, 0xD6	; 214
    11a4:	51 e0       	ldi	r21, 0x01	; 1
    11a6:	68 e0       	ldi	r22, 0x08	; 8
    11a8:	72 e0       	ldi	r23, 0x02	; 2
    11aa:	8e e1       	ldi	r24, 0x1E	; 30
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    11b2:	91 c1       	rjmp	.+802    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF --
    11b4:	8d 30       	cpi	r24, 0x0D	; 13
    11b6:	09 f0       	breq	.+2      	; 0x11ba <fsm_lcd_menu+0x59e>
    11b8:	8e c1       	rjmp	.+796    	; 0x14d6 <fsm_lcd_menu+0x8ba>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UMANJI);
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	46 ed       	ldi	r20, 0xD6	; 214
    11be:	51 e0       	ldi	r21, 0x01	; 1
    11c0:	68 e0       	ldi	r22, 0x08	; 8
    11c2:	72 e0       	ldi	r23, 0x02	; 2
    11c4:	8d e1       	ldi	r24, 0x1D	; 29
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    11cc:	84 c1       	rjmp	.+776    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    11d4:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    11d8:	88 23       	and	r24, r24
    11da:	b1 f1       	breq	.+108    	; 0x1248 <fsm_lcd_menu+0x62c>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
    11dc:	89 e0       	ldi	r24, 0x09	; 9
    11de:	ee e2       	ldi	r30, 0x2E	; 46
    11e0:	f2 e0       	ldi	r31, 0x02	; 2
    11e2:	a5 e2       	ldi	r26, 0x25	; 37
    11e4:	b2 e0       	ldi	r27, 0x02	; 2
    11e6:	01 90       	ld	r0, Z+
    11e8:	0d 92       	st	X+, r0
    11ea:	8a 95       	dec	r24
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <fsm_lcd_menu+0x5ca>
						vreme_gasenja = snap_vreme_gasenja;
    11ee:	89 e0       	ldi	r24, 0x09	; 9
    11f0:	ec e1       	ldi	r30, 0x1C	; 28
    11f2:	f2 e0       	ldi	r31, 0x02	; 2
    11f4:	a7 e3       	ldi	r26, 0x37	; 55
    11f6:	b2 e0       	ldi	r27, 0x02	; 2
    11f8:	01 90       	ld	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	8a 95       	dec	r24
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <fsm_lcd_menu+0x5dc>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
    1200:	c5 e2       	ldi	r28, 0x25	; 37
    1202:	d2 e0       	ldi	r29, 0x02	; 2
    1204:	6a 81       	ldd	r22, Y+2	; 0x02
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
    120e:	69 81       	ldd	r22, Y+1	; 0x01
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
    1218:	c7 e3       	ldi	r28, 0x37	; 55
    121a:	d2 e0       	ldi	r29, 0x02	; 2
    121c:	6a 81       	ldd	r22, Y+2	; 0x02
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
    1226:	69 81       	ldd	r22, Y+1	; 0x01
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    1236:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    1246:	47 c1       	rjmp	.+654    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    124e:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    1252:	88 23       	and	r24, r24
    1254:	09 f4       	brne	.+2      	; 0x1258 <fsm_lcd_menu+0x63c>
    1256:	3f c1       	rjmp	.+638    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					{
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    125e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    126e:	33 c1       	rjmp	.+614    	; 0x14d6 <fsm_lcd_menu+0x8ba>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (displ_flag_shot)
    1270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1274:	88 23       	and	r24, r24
    1276:	c9 f0       	breq	.+50     	; 0x12aa <fsm_lcd_menu+0x68e>
					{
						displ_flag_shot = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    1278:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = jednokratno_paljenje;
    127c:	89 e0       	ldi	r24, 0x09	; 9
    127e:	e6 ef       	ldi	r30, 0xF6	; 246
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	ae e2       	ldi	r26, 0x2E	; 46
    1284:	b2 e0       	ldi	r27, 0x02	; 2
    1286:	01 90       	ld	r0, Z+
    1288:	0d 92       	st	X+, r0
    128a:	8a 95       	dec	r24
    128c:	e1 f7       	brne	.-8      	; 0x1286 <fsm_lcd_menu+0x66a>
						snap_vreme_gasenja = jednokratno_gasenje;
    128e:	89 e0       	ldi	r24, 0x09	; 9
    1290:	ed ee       	ldi	r30, 0xED	; 237
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	ac e1       	ldi	r26, 0x1C	; 28
    1296:	b2 e0       	ldi	r27, 0x02	; 2
    1298:	01 90       	ld	r0, Z+
    129a:	0d 92       	st	X+, r0
    129c:	8a 95       	dec	r24
    129e:	e1 f7       	brne	.-8      	; 0x1298 <fsm_lcd_menu+0x67c>
						
						kursor_horiz = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
    12a6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <jednokrat_LCD_ispis>
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    12aa:	63 e0       	ldi	r22, 0x03	; 3
    12ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    12b0:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    12b4:	88 23       	and	r24, r24
    12b6:	c9 f0       	breq	.+50     	; 0x12ea <fsm_lcd_menu+0x6ce>
					{
						kursor_horiz += 3;
    12b8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    12bc:	9c ef       	ldi	r25, 0xFC	; 252
    12be:	98 0f       	add	r25, r24
    12c0:	93 30       	cpi	r25, 0x03	; 3
    12c2:	20 f4       	brcc	.+8      	; 0x12cc <fsm_lcd_menu+0x6b0>
						kursor_horiz = 10;
    12c4:	8a e0       	ldi	r24, 0x0A	; 10
    12c6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <fsm_lcd_menu+0x6c2>
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    12cc:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 10;
						else if (kursor_horiz > 13)
    12ce:	8e 30       	cpi	r24, 0x0E	; 14
    12d0:	1c f4       	brge	.+6      	; 0x12d8 <fsm_lcd_menu+0x6bc>
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    12d2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <fsm_lcd_menu+0x6c2>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 10;
						else if (kursor_horiz > 13)
						kursor_horiz = 13;
    12d8:	8d e0       	ldi	r24, 0x0D	; 13
    12da:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						lcd1602_goto_xy(kursor_horiz,1);
    12de:	61 e0       	ldi	r22, 0x01	; 1
    12e0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    12e4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    12e8:	f6 c0       	rjmp	.+492    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    12ea:	62 e0       	ldi	r22, 0x02	; 2
    12ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    12f0:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    12f4:	88 23       	and	r24, r24
    12f6:	c9 f0       	breq	.+50     	; 0x132a <fsm_lcd_menu+0x70e>
					{
						kursor_horiz -= 3;
    12f8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    12fc:	96 ef       	ldi	r25, 0xF6	; 246
    12fe:	98 0f       	add	r25, r24
    1300:	93 30       	cpi	r25, 0x03	; 3
    1302:	20 f4       	brcc	.+8      	; 0x130c <fsm_lcd_menu+0x6f0>
						kursor_horiz = 6;
    1304:	86 e0       	ldi	r24, 0x06	; 6
    1306:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    130a:	09 c0       	rjmp	.+18     	; 0x131e <fsm_lcd_menu+0x702>
						
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    130c:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 6;
						else if(kursor_horiz < 3)
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	1c f0       	brlt	.+6      	; 0x1318 <fsm_lcd_menu+0x6fc>
						
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    1312:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    1316:	03 c0       	rjmp	.+6      	; 0x131e <fsm_lcd_menu+0x702>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 6;
						else if(kursor_horiz < 3)
						kursor_horiz = 3;
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						lcd1602_goto_xy(kursor_horiz,1);
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    1324:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    1328:	d6 c0       	rjmp	.+428    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    132a:	64 e0       	ldi	r22, 0x04	; 4
    132c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1330:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    1334:	88 23       	and	r24, r24
    1336:	99 f1       	breq	.+102    	; 0x139e <fsm_lcd_menu+0x782>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON ++
    1338:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    133c:	83 30       	cpi	r24, 0x03	; 3
    133e:	51 f4       	brne	.+20     	; 0x1354 <fsm_lcd_menu+0x738>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UVECAJ);
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	46 ed       	ldi	r20, 0xD6	; 214
    1344:	51 e0       	ldi	r21, 0x01	; 1
    1346:	68 e0       	ldi	r22, 0x08	; 8
    1348:	72 e0       	ldi	r23, 0x02	; 2
    134a:	80 e3       	ldi	r24, 0x30	; 48
    134c:	92 e0       	ldi	r25, 0x02	; 2
    134e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1352:	c1 c0       	rjmp	.+386    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON ++
    1354:	86 30       	cpi	r24, 0x06	; 6
    1356:	51 f4       	brne	.+20     	; 0x136c <fsm_lcd_menu+0x750>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UVECAJ);
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	46 ed       	ldi	r20, 0xD6	; 214
    135c:	51 e0       	ldi	r21, 0x01	; 1
    135e:	68 e0       	ldi	r22, 0x08	; 8
    1360:	72 e0       	ldi	r23, 0x02	; 2
    1362:	8f e2       	ldi	r24, 0x2F	; 47
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    136a:	b5 c0       	rjmp	.+362    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 10)											//podesava SATE_OFF ++
    136c:	8a 30       	cpi	r24, 0x0A	; 10
    136e:	51 f4       	brne	.+20     	; 0x1384 <fsm_lcd_menu+0x768>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UVECAJ);
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	46 ed       	ldi	r20, 0xD6	; 214
    1374:	51 e0       	ldi	r21, 0x01	; 1
    1376:	68 e0       	ldi	r22, 0x08	; 8
    1378:	72 e0       	ldi	r23, 0x02	; 2
    137a:	8e e1       	ldi	r24, 0x1E	; 30
    137c:	92 e0       	ldi	r25, 0x02	; 2
    137e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1382:	a9 c0       	rjmp	.+338    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF ++
    1384:	8d 30       	cpi	r24, 0x0D	; 13
    1386:	09 f0       	breq	.+2      	; 0x138a <fsm_lcd_menu+0x76e>
    1388:	a6 c0       	rjmp	.+332    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UVECAJ);
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	46 ed       	ldi	r20, 0xD6	; 214
    138e:	51 e0       	ldi	r21, 0x01	; 1
    1390:	68 e0       	ldi	r22, 0x08	; 8
    1392:	72 e0       	ldi	r23, 0x02	; 2
    1394:	8d e1       	ldi	r24, 0x1D	; 29
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    139c:	9c c0       	rjmp	.+312    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    139e:	65 e0       	ldi	r22, 0x05	; 5
    13a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    13a4:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    13a8:	88 23       	and	r24, r24
    13aa:	99 f1       	breq	.+102    	; 0x1412 <fsm_lcd_menu+0x7f6>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON --
    13ac:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	51 f4       	brne	.+20     	; 0x13c8 <fsm_lcd_menu+0x7ac>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UMANJI);
    13b4:	21 e0       	ldi	r18, 0x01	; 1
    13b6:	46 ed       	ldi	r20, 0xD6	; 214
    13b8:	51 e0       	ldi	r21, 0x01	; 1
    13ba:	68 e0       	ldi	r22, 0x08	; 8
    13bc:	72 e0       	ldi	r23, 0x02	; 2
    13be:	80 e3       	ldi	r24, 0x30	; 48
    13c0:	92 e0       	ldi	r25, 0x02	; 2
    13c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    13c6:	87 c0       	rjmp	.+270    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON --
    13c8:	86 30       	cpi	r24, 0x06	; 6
    13ca:	51 f4       	brne	.+20     	; 0x13e0 <fsm_lcd_menu+0x7c4>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UMANJI);
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	46 ed       	ldi	r20, 0xD6	; 214
    13d0:	51 e0       	ldi	r21, 0x01	; 1
    13d2:	68 e0       	ldi	r22, 0x08	; 8
    13d4:	72 e0       	ldi	r23, 0x02	; 2
    13d6:	8f e2       	ldi	r24, 0x2F	; 47
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    13de:	7b c0       	rjmp	.+246    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 10)											//podesava SATE_OFF --
    13e0:	8a 30       	cpi	r24, 0x0A	; 10
    13e2:	51 f4       	brne	.+20     	; 0x13f8 <fsm_lcd_menu+0x7dc>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UMANJI);
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	46 ed       	ldi	r20, 0xD6	; 214
    13e8:	51 e0       	ldi	r21, 0x01	; 1
    13ea:	68 e0       	ldi	r22, 0x08	; 8
    13ec:	72 e0       	ldi	r23, 0x02	; 2
    13ee:	8e e1       	ldi	r24, 0x1E	; 30
    13f0:	92 e0       	ldi	r25, 0x02	; 2
    13f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    13f6:	6f c0       	rjmp	.+222    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF --
    13f8:	8d 30       	cpi	r24, 0x0D	; 13
    13fa:	09 f0       	breq	.+2      	; 0x13fe <fsm_lcd_menu+0x7e2>
    13fc:	6c c0       	rjmp	.+216    	; 0x14d6 <fsm_lcd_menu+0x8ba>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UMANJI);
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	46 ed       	ldi	r20, 0xD6	; 214
    1402:	51 e0       	ldi	r21, 0x01	; 1
    1404:	68 e0       	ldi	r22, 0x08	; 8
    1406:	72 e0       	ldi	r23, 0x02	; 2
    1408:	8d e1       	ldi	r24, 0x1D	; 29
    140a:	92 e0       	ldi	r25, 0x02	; 2
    140c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1410:	62 c0       	rjmp	.+196    	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1418:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    141c:	88 23       	and	r24, r24
    141e:	b1 f1       	breq	.+108    	; 0x148c <fsm_lcd_menu+0x870>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    1420:	89 e0       	ldi	r24, 0x09	; 9
    1422:	ee e2       	ldi	r30, 0x2E	; 46
    1424:	f2 e0       	ldi	r31, 0x02	; 2
    1426:	a6 ef       	ldi	r26, 0xF6	; 246
    1428:	b1 e0       	ldi	r27, 0x01	; 1
    142a:	01 90       	ld	r0, Z+
    142c:	0d 92       	st	X+, r0
    142e:	8a 95       	dec	r24
    1430:	e1 f7       	brne	.-8      	; 0x142a <fsm_lcd_menu+0x80e>
						jednokratno_gasenje = snap_vreme_gasenja;
    1432:	89 e0       	ldi	r24, 0x09	; 9
    1434:	ec e1       	ldi	r30, 0x1C	; 28
    1436:	f2 e0       	ldi	r31, 0x02	; 2
    1438:	ad ee       	ldi	r26, 0xED	; 237
    143a:	b1 e0       	ldi	r27, 0x01	; 1
    143c:	01 90       	ld	r0, Z+
    143e:	0d 92       	st	X+, r0
    1440:	8a 95       	dec	r24
    1442:	e1 f7       	brne	.-8      	; 0x143c <fsm_lcd_menu+0x820>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    1444:	c6 ef       	ldi	r28, 0xF6	; 246
    1446:	d1 e0       	ldi	r29, 0x01	; 1
    1448:	6a 81       	ldd	r22, Y+2	; 0x02
    144a:	84 e0       	ldi	r24, 0x04	; 4
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    1452:	69 81       	ldd	r22, Y+1	; 0x01
    1454:	85 e0       	ldi	r24, 0x05	; 5
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    145c:	cd ee       	ldi	r28, 0xED	; 237
    145e:	d1 e0       	ldi	r29, 0x01	; 1
    1460:	6a 81       	ldd	r22, Y+2	; 0x02
    1462:	86 e0       	ldi	r24, 0x06	; 6
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    146a:	69 81       	ldd	r22, Y+1	; 0x01
    146c:	87 e0       	ldi	r24, 0x07	; 7
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    147a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    148a:	25 c0       	rjmp	.+74     	; 0x14d6 <fsm_lcd_menu+0x8ba>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1492:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    1496:	88 23       	and	r24, r24
    1498:	f1 f0       	breq	.+60     	; 0x14d6 <fsm_lcd_menu+0x8ba>
					{
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    14a0:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    14b0:	12 c0       	rjmp	.+36     	; 0x14d6 <fsm_lcd_menu+0x8ba>
		
		case BROJILO:
					
					//Ispisivanje trenutnog napona, struje, snage...
					//kopija DISPL2 ali bez uslova za ciklicno menjanje displeja
					if ( flag_prekid_100ms_VAkWh )	//Ispisujem napon, struju snagu, sa periodom 100ms, da nije zamrznut ispis vec da se vide promene
    14b2:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <flag_prekid_100ms_VAkWh>
    14b6:	88 23       	and	r24, r24
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <fsm_lcd_menu+0x8a6>
					{
						flag_prekid_100ms_VAkWh = 0; //reset flaga
    14ba:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <flag_prekid_100ms_VAkWh>
						
						brojilo_LCD_ispis();
    14be:	0e 94 96 05 	call	0xb2c	; 0xb2c <brojilo_LCD_ispis>
					}
					
					
					if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )	//taster enter stisnut
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    14c8:	0e 94 0e 0c 	call	0x181c	; 0x181c <ocitaj_jedan_taster>
    14cc:	88 23       	and	r24, r24
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <fsm_lcd_menu+0x8ba>
					{
						//displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
						STATE = MENU1;
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
		default: {}
		
	}
	
	
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    14de:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup na SDA i SCL, PC4-PC5 
    14e2:	0e 94 9f 01 	call	0x33e	; 0x33e <i2c_init>
	lcd1602_init();
    14e6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <lcd1602_init>
	ADC_init();				
    14ea:	0e 94 d7 00 	call	0x1ae	; 0x1ae <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda; 500k
    14ee:	60 e2       	ldi	r22, 0x20	; 32
    14f0:	71 ea       	ldi	r23, 0xA1	; 161
    14f2:	87 e0       	ldi	r24, 0x07	; 7
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <uart_init>
	DS3231_init();			//RTC init
    14fa:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    14fe:	0e 94 b7 0b 	call	0x176e	; 0x176e <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    1502:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    1506:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    1508:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    150a:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1514:	c5 e2       	ldi	r28, 0x25	; 37
    1516:	d2 e0       	ldi	r29, 0x02	; 2
    1518:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1522:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    1524:	82 e0       	ldi	r24, 0x02	; 2
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    152c:	c7 e3       	ldi	r28, 0x37	; 55
    152e:	d2 e0       	ldi	r29, 0x02	; 2
    1530:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    153a:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    153c:	84 e0       	ldi	r24, 0x04	; 4
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1544:	c6 ef       	ldi	r28, 0xF6	; 246
    1546:	d1 e0       	ldi	r29, 0x01	; 1
    1548:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    154a:	85 e0       	ldi	r24, 0x05	; 5
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1552:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    1554:	86 e0       	ldi	r24, 0x06	; 6
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    155c:	cd ee       	ldi	r28, 0xED	; 237
    155e:	d1 e0       	ldi	r29, 0x01	; 1
    1560:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    156a:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    156c:	89 e0       	ldi	r24, 0x09	; 9
    156e:	e5 e2       	ldi	r30, 0x25	; 37
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	ae e2       	ldi	r26, 0x2E	; 46
    1574:	b2 e0       	ldi	r27, 0x02	; 2
    1576:	01 90       	ld	r0, Z+
    1578:	0d 92       	st	X+, r0
    157a:	8a 95       	dec	r24
    157c:	e1 f7       	brne	.-8      	; 0x1576 <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    157e:	89 e0       	ldi	r24, 0x09	; 9
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f2 e0       	ldi	r31, 0x02	; 2
    1584:	ac e1       	ldi	r26, 0x1C	; 28
    1586:	b2 e0       	ldi	r27, 0x02	; 2
    1588:	01 90       	ld	r0, Z+
    158a:	0d 92       	st	X+, r0
    158c:	8a 95       	dec	r24
    158e:	e1 f7       	brne	.-8      	; 0x1588 <main+0xaa>
		
		/* ocitava napon i struju */
		adc_read();			
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    1590:	0f 2e       	mov	r0, r31
    1592:	f7 e7       	ldi	r31, 0x77	; 119
    1594:	ef 2e       	mov	r14, r31
    1596:	f1 e0       	ldi	r31, 0x01	; 1
    1598:	ff 2e       	mov	r15, r31
    159a:	f0 2d       	mov	r31, r0
    159c:	c8 e0       	ldi	r28, 0x08	; 8
    159e:	d2 e0       	ldi	r29, 0x02	; 2
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    15a0:	dd 24       	eor	r13, r13
    15a2:	d3 94       	inc	r13
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    15a4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <ocitaj_tastere>
    15a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tasteri>
		
		/* ocitava napon i struju */
		adc_read();			
    15ac:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <adc_read>
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    15b0:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <adc_napon_raw+0x1>
    15b4:	8f 93       	push	r24
    15b6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <adc_napon_raw>
    15ba:	8f 93       	push	r24
    15bc:	ff 92       	push	r15
    15be:	ef 92       	push	r14
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		uart_send_str(bafer);
    15c8:	ce 01       	movw	r24, r28
    15ca:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		sprintf(bafer, "%4d  ", adc_struja_raw);
    15ce:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <adc_struja_raw+0x1>
    15d2:	8f 93       	push	r24
    15d4:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <adc_struja_raw>
    15d8:	8f 93       	push	r24
    15da:	ff 92       	push	r15
    15dc:	ef 92       	push	r14
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		uart_send_str(bafer);
    15e6:	ce 01       	movw	r24, r28
    15e8:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		
		sprintf(bafer, "%4d  ", napon);
    15ec:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
    15f0:	8f 93       	push	r24
    15f2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
    15f6:	8f 93       	push	r24
    15f8:	ff 92       	push	r15
    15fa:	ef 92       	push	r14
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	0e 94 9f 10 	call	0x213e	; 0x213e <sprintf>
		uart_send_str(bafer);
    1604:	ce 01       	movw	r24, r28
    1606:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		dtostrf(struja, 4, 1, bafer);
    160a:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
    160e:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
    1612:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
    1616:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
    161a:	8e 01       	movw	r16, r28
    161c:	21 e0       	ldi	r18, 0x01	; 1
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	44 e0       	ldi	r20, 0x04	; 4
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dtostrf>
		uart_send_str(bafer);
    1628:	ce 01       	movw	r24, r28
    162a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		uart_send_str("  ");
    162e:	86 e0       	ldi	r24, 0x06	; 6
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		dtostrf(snaga, 4, 2, bafer);
    1636:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
    163a:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
    163e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
    1642:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
    1646:	22 e0       	ldi	r18, 0x02	; 2
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	44 e0       	ldi	r20, 0x04	; 4
    164c:	50 e0       	ldi	r21, 0x00	; 0
    164e:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dtostrf>
		uart_send_str(bafer);
    1652:	ce 01       	movw	r24, r28
    1654:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		uart_send_str("  ");
    1658:	86 e0       	ldi	r24, 0x06	; 6
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		dtostrf(energija, 5, 2, bafer);
    1660:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    1664:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    1668:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    166c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    1670:	22 e0       	ldi	r18, 0x02	; 2
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	45 e0       	ldi	r20, 0x05	; 5
    1676:	50 e0       	ldi	r21, 0x00	; 0
    1678:	0e 94 7f 10 	call	0x20fe	; 0x20fe <dtostrf>
		uart_send_str(bafer);
    167c:	ce 01       	movw	r24, r28
    167e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		uart_send_str("\n");
    1682:	8d e7       	ldi	r24, 0x7D	; 125
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <uart_send_str>
		//uart_send_str(bafer_uart);
		//uart_send_str("\n");
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    168a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <flag_pc_int_pomocni>
    168e:	2d b7       	in	r18, 0x3d	; 61
    1690:	3e b7       	in	r19, 0x3e	; 62
    1692:	2e 5e       	subi	r18, 0xEE	; 238
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	3e bf       	out	0x3e, r19	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	2d bf       	out	0x3d, r18	; 61
    16a0:	88 23       	and	r24, r24
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <main+0x1c8>
    16a4:	61 c0       	rjmp	.+194    	; 0x1768 <main+0x28a>
		{
			flag_pc_int_pomocni = 0;
    16a6:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    16aa:	00 e0       	ldi	r16, 0x00	; 0
    16ac:	28 e4       	ldi	r18, 0x48	; 72
    16ae:	32 e0       	ldi	r19, 0x02	; 2
    16b0:	40 e4       	ldi	r20, 0x40	; 64
    16b2:	52 e0       	ldi	r21, 0x02	; 2
    16b4:	61 e4       	ldi	r22, 0x41	; 65
    16b6:	72 e0       	ldi	r23, 0x02	; 2
    16b8:	82 e4       	ldi	r24, 0x42	; 66
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	0e 94 c9 0c 	call	0x1992	; 0x1992 <getTime>
			
			/* integraljenje(sumiranje) snage je enerija. E = P * t     */
			energija += (snaga/3600.0);		//posto merim u kWh, a ovo ide na 1 sekund, a sat ima 3600s delim sa 3600.0
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	41 e6       	ldi	r20, 0x61	; 97
    16c6:	55 e4       	ldi	r21, 0x45	; 69
    16c8:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
    16cc:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
    16d0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
    16d4:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
    16d8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__divsf3>
    16dc:	9b 01       	movw	r18, r22
    16de:	ac 01       	movw	r20, r24
    16e0:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    16e4:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    16e8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    16ec:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    16f0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__addsf3>
    16f4:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <energija>
    16f8:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <energija+0x1>
    16fc:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <energija+0x2>
    1700:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <energija+0x3>
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
		
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    1704:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <jednok_on_off>
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	d1 f4       	brne	.+52     	; 0x1740 <main+0x262>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
    170c:	40 e4       	ldi	r20, 0x40	; 64
    170e:	52 e0       	ldi	r21, 0x02	; 2
    1710:	6d ee       	ldi	r22, 0xED	; 237
    1712:	71 e0       	ldi	r23, 0x01	; 1
    1714:	86 ef       	ldi	r24, 0xF6	; 246
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	0e 94 00 04 	call	0x800	; 0x800 <period_paljenja>
    171c:	88 23       	and	r24, r24
    171e:	29 f0       	breq	.+10     	; 0x172a <main+0x24c>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1720:	d0 92 d9 01 	sts	0x01D9, r13	; 0x8001d9 <ukljuceno>
					jednok_se_desio = 1;
    1724:	d0 92 d4 01 	sts	0x01D4, r13	; 0x8001d4 <jednok_se_desio>
    1728:	0d c0       	rjmp	.+26     	; 0x1744 <main+0x266>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    172a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <jednok_se_desio>
    172e:	88 23       	and	r24, r24
    1730:	49 f0       	breq	.+18     	; 0x1744 <main+0x266>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    1732:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    1736:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    173a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <jednok_se_desio>
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <main+0x266>
				}
			}
			else
				ukljuceno = 0;
    1740:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);	//ILI veza glavnog i jednok. perioda
    1744:	40 e4       	ldi	r20, 0x40	; 64
    1746:	52 e0       	ldi	r21, 0x02	; 2
    1748:	67 e3       	ldi	r22, 0x37	; 55
    174a:	72 e0       	ldi	r23, 0x02	; 2
    174c:	85 e2       	ldi	r24, 0x25	; 37
    174e:	92 e0       	ldi	r25, 0x02	; 2
    1750:	0e 94 00 04 	call	0x800	; 0x800 <period_paljenja>
    1754:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ukljuceno>
    1758:	89 2b       	or	r24, r25
    175a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <ukljuceno>
			
			if (ukljuceno)
    175e:	88 23       	and	r24, r24
    1760:	11 f0       	breq	.+4      	; 0x1766 <main+0x288>
				PORTB |= 1<<PINB5;   //high
    1762:	2d 9a       	sbi	0x05, 5	; 5
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <main+0x28a>
			else
				PORTB &= ~(1<<PINB5);	//low
    1766:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    1768:	0e 94 0e 06 	call	0xc1c	; 0xc1c <fsm_lcd_menu>
		

    }
    176c:	1b cf       	rjmp	.-458    	; 0x15a4 <main+0xc6>

0000176e <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    176e:	e8 e6       	ldi	r30, 0x68	; 104
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	82 60       	ori	r24, 0x02	; 2
    1776:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    1778:	ec e6       	ldi	r30, 0x6C	; 108
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	88 60       	ori	r24, 0x08	; 8
    1780:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    1782:	3b 98       	cbi	0x07, 3	; 7
    1784:	08 95       	ret

00001786 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    1792:	33 9b       	sbis	0x06, 3	; 6
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <flag_pc_int>
		flag_pc_int_pomocni = 1;
    179c:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <flag_pc_int_pomocni>
	}
		
    17a0:	8f 91       	pop	r24
    17a2:	0f 90       	pop	r0
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	0f 90       	pop	r0
    17a8:	1f 90       	pop	r1
    17aa:	18 95       	reti

000017ac <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    17ac:	8a b1       	in	r24, 0x0a	; 10
    17ae:	8f 70       	andi	r24, 0x0F	; 15
    17b0:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    17b2:	8a b1       	in	r24, 0x0a	; 10
    17b4:	83 7f       	andi	r24, 0xF3	; 243
    17b6:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( 1<<TASTER_NONSTOP_pinPort );
    17b8:	20 98       	cbi	0x04, 0	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    17ba:	8b b1       	in	r24, 0x0b	; 11
    17bc:	80 6f       	ori	r24, 0xF0	; 240
    17be:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    17c0:	8b b1       	in	r24, 0x0b	; 11
    17c2:	8c 60       	ori	r24, 0x0C	; 12
    17c4:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NONSTOP_pinPort);
    17c6:	28 9a       	sbi	0x05, 0	; 5
    17c8:	08 95       	ret

000017ca <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    17ca:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <flag_prekid_debounce_time_half>
    17ce:	88 23       	and	r24, r24
    17d0:	69 f0       	breq	.+26     	; 0x17ec <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    17d2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = TEMP_REG_READ;
    17d6:	89 b1       	in	r24, 0x09	; 9
    17d8:	93 b1       	in	r25, 0x03	; 3
    17da:	28 2f       	mov	r18, r24
    17dc:	26 95       	lsr	r18
    17de:	26 95       	lsr	r18
    17e0:	30 e4       	ldi	r19, 0x40	; 64
    17e2:	93 9f       	mul	r25, r19
    17e4:	c0 01       	movw	r24, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	82 2b       	or	r24, r18
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = TEMP_REG_READ;

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    17ee:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <flag_prekid_debounce_time>
    17f2:	99 23       	and	r25, r25
    17f4:	81 f0       	breq	.+32     	; 0x1816 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    17f6:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = TEMP_REG_READ;
    17fa:	29 b1       	in	r18, 0x09	; 9
    17fc:	93 b1       	in	r25, 0x03	; 3
		
		if (temp_reg1 == temp_reg2)
    17fe:	42 2f       	mov	r20, r18
    1800:	46 95       	lsr	r20
    1802:	46 95       	lsr	r20
    1804:	50 e4       	ldi	r21, 0x40	; 64
    1806:	95 9f       	mul	r25, r21
    1808:	90 01       	movw	r18, r0
    180a:	11 24       	eor	r1, r1
    180c:	24 2b       	or	r18, r20
    180e:	82 13       	cpse	r24, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1812:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri_reg.2113>
		
	}
	
	return tasteri_reg;
}
    1816:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri_reg.2113>
    181a:	08 95       	ret

0000181c <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	20 95       	com	r18
    1822:	30 95       	com	r19
    1824:	e6 2f       	mov	r30, r22
    1826:	a9 01       	movw	r20, r18
    1828:	06 2e       	mov	r0, r22
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <ocitaj_jedan_taster+0x14>
    182c:	55 95       	asr	r21
    182e:	47 95       	ror	r20
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <ocitaj_jedan_taster+0x10>
    1834:	40 ff       	sbrs	r20, 0
    1836:	17 c0       	rjmp	.+46     	; 0x1866 <ocitaj_jedan_taster+0x4a>
    1838:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <flag_stisnut.2122>
    183c:	91 11       	cpse	r25, r1
    183e:	13 c0       	rjmp	.+38     	; 0x1866 <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <flag_stisnut.2122>
		temp_tast = button;		//zapamtim koji je taster stisnut
    1846:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <temp_tast.2121>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    184a:	80 95       	com	r24
    184c:	41 e0       	ldi	r20, 0x01	; 1
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	06 2e       	mov	r0, r22
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <ocitaj_jedan_taster+0x3c>
    1854:	44 0f       	add	r20, r20
    1856:	55 1f       	adc	r21, r21
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <ocitaj_jedan_taster+0x38>
    185c:	84 23       	and	r24, r20
    185e:	09 f0       	breq	.+2      	; 0x1862 <ocitaj_jedan_taster+0x46>
    1860:	45 c0       	rjmp	.+138    	; 0x18ec <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    1866:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <temp_tast.2121>
    186a:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    186c:	80 95       	com	r24
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	09 2e       	mov	r0, r25
    1874:	02 c0       	rjmp	.+4      	; 0x187a <ocitaj_jedan_taster+0x5e>
    1876:	44 0f       	add	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <ocitaj_jedan_taster+0x5a>
    187e:	84 23       	and	r24, r20
    1880:	19 f1       	breq	.+70     	; 0x18c8 <ocitaj_jedan_taster+0xac>
    1882:	8c ef       	ldi	r24, 0xFC	; 252
    1884:	89 0f       	add	r24, r25
    1886:	82 30       	cpi	r24, 0x02	; 2
    1888:	08 f5       	brcc	.+66     	; 0x18cc <ocitaj_jedan_taster+0xb0>
    188a:	69 13       	cpse	r22, r25
    188c:	21 c0       	rjmp	.+66     	; 0x18d0 <ocitaj_jedan_taster+0xb4>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    1894:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <delay_enable.2123>
    1898:	91 30       	cpi	r25, 0x01	; 1
    189a:	31 f4       	brne	.+12     	; 0x18a8 <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    189c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <delay_enable.2123>
			delay_timer = 0;	//start, timer ISR ga uvecava
    18a0:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <delay_timer+0x1>
    18a4:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    18a8:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <delay_timer>
    18ac:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <delay_timer+0x1>
    18b0:	20 39       	cpi	r18, 0x90	; 144
    18b2:	31 40       	sbci	r19, 0x01	; 1
    18b4:	00 f1       	brcs	.+64     	; 0x18f6 <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    18b6:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <flag_prekid_50ms>
    18ba:	99 23       	and	r25, r25
    18bc:	e1 f0       	breq	.+56     	; 0x18f6 <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    18be:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	89 27       	eor	r24, r25
    18c6:	08 95       	ret
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	03 c0       	rjmp	.+6      	; 0x18d2 <ocitaj_jedan_taster+0xb6>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <ocitaj_jedan_taster+0xb6>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <ocitaj_jedan_taster+0xbc>
    18d4:	35 95       	asr	r19
    18d6:	27 95       	ror	r18
    18d8:	ea 95       	dec	r30
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <ocitaj_jedan_taster+0xb8>
    18dc:	20 fd       	sbrc	r18, 0
    18de:	0b c0       	rjmp	.+22     	; 0x18f6 <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    18e0:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <flag_stisnut.2122>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <delay_enable.2123>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    18ea:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    18ec:	64 50       	subi	r22, 0x04	; 4
    18ee:	62 30       	cpi	r22, 0x02	; 2
    18f0:	80 f2       	brcs	.-96     	; 0x1892 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	ee cf       	rjmp	.-36     	; 0x18d2 <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    18f6:	08 95       	ret

000018f8 <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    18f8:	98 2f       	mov	r25, r24
    18fa:	92 95       	swap	r25
    18fc:	9f 70       	andi	r25, 0x0F	; 15
    18fe:	99 0f       	add	r25, r25
    1900:	29 2f       	mov	r18, r25
    1902:	22 0f       	add	r18, r18
    1904:	22 0f       	add	r18, r18
    1906:	92 0f       	add	r25, r18
    1908:	8f 70       	andi	r24, 0x0F	; 15
    190a:	89 0f       	add	r24, r25
    190c:	08 95       	ret

0000190e <decimal_to_bcd>:
    190e:	9d ec       	ldi	r25, 0xCD	; 205
    1910:	89 9f       	mul	r24, r25
    1912:	91 2d       	mov	r25, r1
    1914:	11 24       	eor	r1, r1
    1916:	96 95       	lsr	r25
    1918:	96 95       	lsr	r25
    191a:	96 95       	lsr	r25
    191c:	20 e1       	ldi	r18, 0x10	; 16
    191e:	92 9f       	mul	r25, r18
    1920:	a0 01       	movw	r20, r0
    1922:	11 24       	eor	r1, r1
    1924:	99 0f       	add	r25, r25
    1926:	29 2f       	mov	r18, r25
    1928:	22 0f       	add	r18, r18
    192a:	22 0f       	add	r18, r18
    192c:	92 0f       	add	r25, r18
    192e:	89 1b       	sub	r24, r25
    1930:	8f 70       	andi	r24, 0x0F	; 15
    1932:	84 2b       	or	r24, r20
    1934:	08 95       	ret

00001936 <DS3231_Read>:
    1936:	cf 93       	push	r28
    1938:	c8 2f       	mov	r28, r24
    193a:	80 ed       	ldi	r24, 0xD0	; 208
    193c:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1940:	8c 2f       	mov	r24, r28
    1942:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    1946:	81 ed       	ldi	r24, 0xD1	; 209
    1948:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    194c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <i2c_readNak>
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <DS3231_Write>:
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	d8 2f       	mov	r29, r24
    195a:	c6 2f       	mov	r28, r22
    195c:	80 ed       	ldi	r24, 0xD0	; 208
    195e:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1962:	8d 2f       	mov	r24, r29
    1964:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    1968:	8c 2f       	mov	r24, r28
    196a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    196e:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <DS3231_init>:
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	8e e0       	ldi	r24, 0x0E	; 14
    197c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	8f e0       	ldi	r24, 0x0F	; 15
    1984:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
    1988:	68 ee       	ldi	r22, 0xE8	; 232
    198a:	80 e1       	ldi	r24, 0x10	; 16
    198c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
    1990:	08 95       	ret

00001992 <getTime>:
    1992:	af 92       	push	r10
    1994:	bf 92       	push	r11
    1996:	cf 92       	push	r12
    1998:	df 92       	push	r13
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
    19a6:	7b 01       	movw	r14, r22
    19a8:	6a 01       	movw	r12, r20
    19aa:	59 01       	movw	r10, r18
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DS3231_Read>
    19b2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <bcd_to_decimal>
    19b6:	f6 01       	movw	r30, r12
    19b8:	80 83       	st	Z, r24
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DS3231_Read>
    19c0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <bcd_to_decimal>
    19c4:	f7 01       	movw	r30, r14
    19c6:	80 83       	st	Z, r24
    19c8:	01 30       	cpi	r16, 0x01	; 1
    19ca:	81 f4       	brne	.+32     	; 0x19ec <getTime+0x5a>
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DS3231_Read>
    19d2:	85 fb       	bst	r24, 5
    19d4:	88 27       	eor	r24, r24
    19d6:	80 f9       	bld	r24, 0
    19d8:	f5 01       	movw	r30, r10
    19da:	80 83       	st	Z, r24
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DS3231_Read>
    19e2:	8f 71       	andi	r24, 0x1F	; 31
    19e4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <bcd_to_decimal>
    19e8:	88 83       	st	Y, r24
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <getTime+0x68>
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 9b 0c 	call	0x1936	; 0x1936 <DS3231_Read>
    19f2:	8f 73       	andi	r24, 0x3F	; 63
    19f4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <bcd_to_decimal>
    19f8:	88 83       	st	Y, r24
    19fa:	df 91       	pop	r29
    19fc:	cf 91       	pop	r28
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	bf 90       	pop	r11
    1a0a:	af 90       	pop	r10
    1a0c:	08 95       	ret

00001a0e <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	d8 2f       	mov	r29, r24
    1a18:	c6 2f       	mov	r28, r22
    1a1a:	84 2f       	mov	r24, r20
    1a1c:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    1a1e:	0e 94 87 0c 	call	0x190e	; 0x190e <decimal_to_bcd>
    1a22:	68 2f       	mov	r22, r24
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1a2a:	8c 2f       	mov	r24, r28
    1a2c:	0e 94 87 0c 	call	0x190e	; 0x190e <decimal_to_bcd>
    1a30:	68 2f       	mov	r22, r24
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
	
	switch(hour_format)
    1a38:	01 30       	cpi	r16, 0x01	; 1
    1a3a:	79 f4       	brne	.+30     	; 0x1a5a <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    1a3c:	11 30       	cpi	r17, 0x01	; 1
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    1a40:	c0 e4       	ldi	r28, 0x40	; 64
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    1a44:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1a46:	8d 2f       	mov	r24, r29
    1a48:	0e 94 87 0c 	call	0x190e	; 0x190e <decimal_to_bcd>
    1a4c:	8f 71       	andi	r24, 0x1F	; 31
    1a4e:	68 2f       	mov	r22, r24
    1a50:	6c 2b       	or	r22, r28
    1a52:	82 e0       	ldi	r24, 0x02	; 2
    1a54:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
			break;
    1a58:	08 c0       	rjmp	.+16     	; 0x1a6a <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1a5a:	8d 2f       	mov	r24, r29
    1a5c:	0e 94 87 0c 	call	0x190e	; 0x190e <decimal_to_bcd>
    1a60:	68 2f       	mov	r22, r24
    1a62:	6f 73       	andi	r22, 0x3F	; 63
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	0e 94 aa 0c 	call	0x1954	; 0x1954 <DS3231_Write>
			break;
		}
	}
}
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	08 95       	ret

00001a74 <tajmer0_init>:
volatile uint8_t flag_prekid_100ms_VAkWh = 0;		//koristim za ispis napona i struje, da nisu zamrznuti dok se prikazuju vec da se vide eventualne promene
volatile uint8_t brojac_prekida_tajmera0_za100ms_VAkWh = 0;	//za 100ms flag, tj tajmer

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    1a7c:	99 ef       	ldi	r25, 0xF9	; 249
    1a7e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    1a80:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1a84:	08 95       	ret

00001a86 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	8f 93       	push	r24
    1a92:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    1a9a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <brojac_prekida_tajmera0>
    1a9e:	8f 5f       	subi	r24, 0xFF	; 255
    1aa0:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    1aa4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
    1aa8:	8f 5f       	subi	r24, 0xFF	; 255
    1aaa:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    1aae:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad; 16bit
    1ab8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <delay_timer>
    1abc:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <delay_timer+0x1>
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <delay_timer+0x1>
    1ac6:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <delay_timer>
	timer_disp_cycle++;	//u main-u resetujem; 16bit
    1aca:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer_disp_cycle>
    1ace:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer_disp_cycle+0x1>
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <timer_disp_cycle+0x1>
    1ad8:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <timer_disp_cycle>
	brojac_prekida_tajmera0_za100ms_VAkWh++;
    1adc:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <brojac_prekida_tajmera0_za100ms_VAkWh>
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <brojac_prekida_tajmera0_za100ms_VAkWh>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1ae6:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <brojac_prekida_tajmera0>
    1aea:	84 36       	cpi	r24, 0x64	; 100
    1aec:	29 f4       	brne	.+10     	; 0x1af8 <__vector_14+0x72>
	{
		brojac_prekida_tajmera0 = 0;
    1aee:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    1af8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	29 f4       	brne	.+10     	; 0x1b0a <__vector_14+0x84>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1b00:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1b0a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
    1b0e:	86 30       	cpi	r24, 0x06	; 6
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <__vector_14+0x96>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1b12:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <flag_prekid_debounce_time>
	}
	
	if(brojac_prekida_tajmera0_za100ms_VAkWh == 100)
    1b1c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <brojac_prekida_tajmera0_za100ms_VAkWh>
    1b20:	84 36       	cpi	r24, 0x64	; 100
    1b22:	19 f4       	brne	.+6      	; 0x1b2a <__vector_14+0xa4>
	{
		flag_prekid_100ms_VAkWh = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <flag_prekid_100ms_VAkWh>
	}
	
    1b2a:	9f 91       	pop	r25
    1b2c:	8f 91       	pop	r24
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
	poslato=0;
    1b42:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <poslato>
}
    1b46:	0f 90       	pop	r0
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	0f 90       	pop	r0
    1b4c:	1f 90       	pop	r1
    1b4e:	18 95       	reti

00001b50 <__vector_18>:

ISR(USART_RX_vect)
{
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	8f 93       	push	r24
    1b5c:	ef 93       	push	r30
    1b5e:	ff 93       	push	r31
	input_char=UDR0;
    1b60:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b64:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    1b68:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <buff_size>
    1b6c:	88 30       	cpi	r24, 0x08	; 8
    1b6e:	98 f4       	brcc	.+38     	; 0x1b96 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1b70:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <buff_size>
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <input_char>
    1b7a:	e5 5b       	subi	r30, 0xB5	; 181
    1b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7e:	80 83       	st	Z, r24
		buff_size++;
    1b80:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <buff_size>
    1b84:	8f 5f       	subi	r24, 0xFF	; 255
    1b86:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <buff_size>
		input_buffer[buff_size]='\0';
    1b8a:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <buff_size>
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	e5 5b       	subi	r30, 0xB5	; 181
    1b92:	fd 4f       	sbci	r31, 0xFD	; 253
    1b94:	10 82       	st	Z, r1
	}
}
    1b96:	ff 91       	pop	r31
    1b98:	ef 91       	pop	r30
    1b9a:	8f 91       	pop	r24
    1b9c:	0f 90       	pop	r0
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	0f 90       	pop	r0
    1ba2:	1f 90       	pop	r1
    1ba4:	18 95       	reti

00001ba6 <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    1ba6:	22 e0       	ldi	r18, 0x02	; 2
    1ba8:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1bac:	28 ed       	ldi	r18, 0xD8	; 216
    1bae:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1bb2:	26 e0       	ldi	r18, 0x06	; 6
    1bb4:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    1bb8:	61 15       	cp	r22, r1
    1bba:	2c e2       	ldi	r18, 0x2C	; 44
    1bbc:	72 07       	cpc	r23, r18
    1bbe:	21 e0       	ldi	r18, 0x01	; 1
    1bc0:	82 07       	cpc	r24, r18
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <uart_init+0x22>
    1bc6:	51 c0       	rjmp	.+162    	; 0x1c6a <uart_init+0xc4>
    1bc8:	c8 f4       	brcc	.+50     	; 0x1bfc <uart_init+0x56>
    1bca:	60 34       	cpi	r22, 0x40	; 64
    1bcc:	28 e3       	ldi	r18, 0x38	; 56
    1bce:	72 07       	cpc	r23, r18
    1bd0:	81 05       	cpc	r24, r1
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	a9 f1       	breq	.+106    	; 0x1c40 <uart_init+0x9a>
    1bd6:	30 f4       	brcc	.+12     	; 0x1be4 <uart_init+0x3e>
    1bd8:	60 38       	cpi	r22, 0x80	; 128
    1bda:	75 42       	sbci	r23, 0x25	; 37
    1bdc:	81 05       	cpc	r24, r1
    1bde:	91 05       	cpc	r25, r1
    1be0:	41 f1       	breq	.+80     	; 0x1c32 <uart_init+0x8c>
    1be2:	64 c0       	rjmp	.+200    	; 0x1cac <uart_init+0x106>
    1be4:	61 15       	cp	r22, r1
    1be6:	2b e4       	ldi	r18, 0x4B	; 75
    1be8:	72 07       	cpc	r23, r18
    1bea:	81 05       	cpc	r24, r1
    1bec:	91 05       	cpc	r25, r1
    1bee:	79 f1       	breq	.+94     	; 0x1c4e <uart_init+0xa8>
    1bf0:	61 15       	cp	r22, r1
    1bf2:	76 49       	sbci	r23, 0x96	; 150
    1bf4:	81 05       	cpc	r24, r1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	89 f1       	breq	.+98     	; 0x1c5c <uart_init+0xb6>
    1bfa:	58 c0       	rjmp	.+176    	; 0x1cac <uart_init+0x106>
    1bfc:	60 32       	cpi	r22, 0x20	; 32
    1bfe:	21 ea       	ldi	r18, 0xA1	; 161
    1c00:	72 07       	cpc	r23, r18
    1c02:	27 e0       	ldi	r18, 0x07	; 7
    1c04:	82 07       	cpc	r24, r18
    1c06:	91 05       	cpc	r25, r1
    1c08:	f1 f1       	breq	.+124    	; 0x1c86 <uart_init+0xe0>
    1c0a:	30 f4       	brcc	.+12     	; 0x1c18 <uart_init+0x72>
    1c0c:	60 39       	cpi	r22, 0x90	; 144
    1c0e:	70 4d       	sbci	r23, 0xD0	; 208
    1c10:	83 40       	sbci	r24, 0x03	; 3
    1c12:	91 05       	cpc	r25, r1
    1c14:	89 f1       	breq	.+98     	; 0x1c78 <uart_init+0xd2>
    1c16:	4a c0       	rjmp	.+148    	; 0x1cac <uart_init+0x106>
    1c18:	60 34       	cpi	r22, 0x40	; 64
    1c1a:	22 e4       	ldi	r18, 0x42	; 66
    1c1c:	72 07       	cpc	r23, r18
    1c1e:	2f e0       	ldi	r18, 0x0F	; 15
    1c20:	82 07       	cpc	r24, r18
    1c22:	91 05       	cpc	r25, r1
    1c24:	b9 f1       	breq	.+110    	; 0x1c94 <uart_init+0xee>
    1c26:	60 38       	cpi	r22, 0x80	; 128
    1c28:	74 48       	sbci	r23, 0x84	; 132
    1c2a:	8e 41       	sbci	r24, 0x1E	; 30
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	c9 f1       	breq	.+114    	; 0x1ca2 <uart_init+0xfc>
    1c30:	3d c0       	rjmp	.+122    	; 0x1cac <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1c32:	8f ec       	ldi	r24, 0xCF	; 207
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c3a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c3e:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1c40:	8a e8       	ldi	r24, 0x8A	; 138
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c4c:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1c4e:	87 e6       	ldi	r24, 0x67	; 103
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c56:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c5a:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1c5c:	83 e3       	ldi	r24, 0x33	; 51
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c64:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c68:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    1c6a:	89 e1       	ldi	r24, 0x19	; 25
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c72:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c76:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    1c78:	87 e0       	ldi	r24, 0x07	; 7
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c80:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c84:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c8e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c92:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1ca0:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1ca2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1ca6:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1caa:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1cac:	8f ec       	ldi	r24, 0xCF	; 207
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1cb4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1cb8:	08 95       	ret

00001cba <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
    1cba:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1cbc:	90 81       	ld	r25, Z
    1cbe:	99 23       	and	r25, r25
    1cc0:	71 f0       	breq	.+28     	; 0x1cde <uart_send_str+0x24>
    1cc2:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1cc4:	a6 ec       	ldi	r26, 0xC6	; 198
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1cca:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1ccc:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1cd0:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <poslato>
    1cd4:	91 11       	cpse	r25, r1
    1cd6:	fc cf       	rjmp	.-8      	; 0x1cd0 <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1cd8:	91 91       	ld	r25, Z+
    1cda:	91 11       	cpse	r25, r1
    1cdc:	f6 cf       	rjmp	.-20     	; 0x1cca <uart_send_str+0x10>
    1cde:	08 95       	ret

00001ce0 <__subsf3>:
    1ce0:	50 58       	subi	r21, 0x80	; 128

00001ce2 <__addsf3>:
    1ce2:	bb 27       	eor	r27, r27
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3x>
    1cea:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__fp_round>
    1cee:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fp_pscA>
    1cf2:	38 f0       	brcs	.+14     	; 0x1d02 <__addsf3+0x20>
    1cf4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__fp_pscB>
    1cf8:	20 f0       	brcs	.+8      	; 0x1d02 <__addsf3+0x20>
    1cfa:	39 f4       	brne	.+14     	; 0x1d0a <__addsf3+0x28>
    1cfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfe:	19 f4       	brne	.+6      	; 0x1d06 <__addsf3+0x24>
    1d00:	26 f4       	brtc	.+8      	; 0x1d0a <__addsf3+0x28>
    1d02:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_nan>
    1d06:	0e f4       	brtc	.+2      	; 0x1d0a <__addsf3+0x28>
    1d08:	e0 95       	com	r30
    1d0a:	e7 fb       	bst	r30, 7
    1d0c:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__fp_inf>

00001d10 <__addsf3x>:
    1d10:	e9 2f       	mov	r30, r25
    1d12:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__fp_split3>
    1d16:	58 f3       	brcs	.-42     	; 0x1cee <__addsf3+0xc>
    1d18:	ba 17       	cp	r27, r26
    1d1a:	62 07       	cpc	r22, r18
    1d1c:	73 07       	cpc	r23, r19
    1d1e:	84 07       	cpc	r24, r20
    1d20:	95 07       	cpc	r25, r21
    1d22:	20 f0       	brcs	.+8      	; 0x1d2c <__addsf3x+0x1c>
    1d24:	79 f4       	brne	.+30     	; 0x1d44 <__addsf3x+0x34>
    1d26:	a6 f5       	brtc	.+104    	; 0x1d90 <__addsf3x+0x80>
    1d28:	0c 94 05 10 	jmp	0x200a	; 0x200a <__fp_zero>
    1d2c:	0e f4       	brtc	.+2      	; 0x1d30 <__addsf3x+0x20>
    1d2e:	e0 95       	com	r30
    1d30:	0b 2e       	mov	r0, r27
    1d32:	ba 2f       	mov	r27, r26
    1d34:	a0 2d       	mov	r26, r0
    1d36:	0b 01       	movw	r0, r22
    1d38:	b9 01       	movw	r22, r18
    1d3a:	90 01       	movw	r18, r0
    1d3c:	0c 01       	movw	r0, r24
    1d3e:	ca 01       	movw	r24, r20
    1d40:	a0 01       	movw	r20, r0
    1d42:	11 24       	eor	r1, r1
    1d44:	ff 27       	eor	r31, r31
    1d46:	59 1b       	sub	r21, r25
    1d48:	99 f0       	breq	.+38     	; 0x1d70 <__addsf3x+0x60>
    1d4a:	59 3f       	cpi	r21, 0xF9	; 249
    1d4c:	50 f4       	brcc	.+20     	; 0x1d62 <__addsf3x+0x52>
    1d4e:	50 3e       	cpi	r21, 0xE0	; 224
    1d50:	68 f1       	brcs	.+90     	; 0x1dac <__addsf3x+0x9c>
    1d52:	1a 16       	cp	r1, r26
    1d54:	f0 40       	sbci	r31, 0x00	; 0
    1d56:	a2 2f       	mov	r26, r18
    1d58:	23 2f       	mov	r18, r19
    1d5a:	34 2f       	mov	r19, r20
    1d5c:	44 27       	eor	r20, r20
    1d5e:	58 5f       	subi	r21, 0xF8	; 248
    1d60:	f3 cf       	rjmp	.-26     	; 0x1d48 <__addsf3x+0x38>
    1d62:	46 95       	lsr	r20
    1d64:	37 95       	ror	r19
    1d66:	27 95       	ror	r18
    1d68:	a7 95       	ror	r26
    1d6a:	f0 40       	sbci	r31, 0x00	; 0
    1d6c:	53 95       	inc	r21
    1d6e:	c9 f7       	brne	.-14     	; 0x1d62 <__addsf3x+0x52>
    1d70:	7e f4       	brtc	.+30     	; 0x1d90 <__addsf3x+0x80>
    1d72:	1f 16       	cp	r1, r31
    1d74:	ba 0b       	sbc	r27, r26
    1d76:	62 0b       	sbc	r22, r18
    1d78:	73 0b       	sbc	r23, r19
    1d7a:	84 0b       	sbc	r24, r20
    1d7c:	ba f0       	brmi	.+46     	; 0x1dac <__addsf3x+0x9c>
    1d7e:	91 50       	subi	r25, 0x01	; 1
    1d80:	a1 f0       	breq	.+40     	; 0x1daa <__addsf3x+0x9a>
    1d82:	ff 0f       	add	r31, r31
    1d84:	bb 1f       	adc	r27, r27
    1d86:	66 1f       	adc	r22, r22
    1d88:	77 1f       	adc	r23, r23
    1d8a:	88 1f       	adc	r24, r24
    1d8c:	c2 f7       	brpl	.-16     	; 0x1d7e <__addsf3x+0x6e>
    1d8e:	0e c0       	rjmp	.+28     	; 0x1dac <__addsf3x+0x9c>
    1d90:	ba 0f       	add	r27, r26
    1d92:	62 1f       	adc	r22, r18
    1d94:	73 1f       	adc	r23, r19
    1d96:	84 1f       	adc	r24, r20
    1d98:	48 f4       	brcc	.+18     	; 0x1dac <__addsf3x+0x9c>
    1d9a:	87 95       	ror	r24
    1d9c:	77 95       	ror	r23
    1d9e:	67 95       	ror	r22
    1da0:	b7 95       	ror	r27
    1da2:	f7 95       	ror	r31
    1da4:	9e 3f       	cpi	r25, 0xFE	; 254
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <__addsf3x+0x9a>
    1da8:	b0 cf       	rjmp	.-160    	; 0x1d0a <__addsf3+0x28>
    1daa:	93 95       	inc	r25
    1dac:	88 0f       	add	r24, r24
    1dae:	08 f0       	brcs	.+2      	; 0x1db2 <__addsf3x+0xa2>
    1db0:	99 27       	eor	r25, r25
    1db2:	ee 0f       	add	r30, r30
    1db4:	97 95       	ror	r25
    1db6:	87 95       	ror	r24
    1db8:	08 95       	ret

00001dba <__divsf3>:
    1dba:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__divsf3x>
    1dbe:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__fp_round>
    1dc2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__fp_pscB>
    1dc6:	58 f0       	brcs	.+22     	; 0x1dde <__divsf3+0x24>
    1dc8:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fp_pscA>
    1dcc:	40 f0       	brcs	.+16     	; 0x1dde <__divsf3+0x24>
    1dce:	29 f4       	brne	.+10     	; 0x1dda <__divsf3+0x20>
    1dd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd2:	29 f0       	breq	.+10     	; 0x1dde <__divsf3+0x24>
    1dd4:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__fp_inf>
    1dd8:	51 11       	cpse	r21, r1
    1dda:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_szero>
    1dde:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_nan>

00001de2 <__divsf3x>:
    1de2:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__fp_split3>
    1de6:	68 f3       	brcs	.-38     	; 0x1dc2 <__divsf3+0x8>

00001de8 <__divsf3_pse>:
    1de8:	99 23       	and	r25, r25
    1dea:	b1 f3       	breq	.-20     	; 0x1dd8 <__divsf3+0x1e>
    1dec:	55 23       	and	r21, r21
    1dee:	91 f3       	breq	.-28     	; 0x1dd4 <__divsf3+0x1a>
    1df0:	95 1b       	sub	r25, r21
    1df2:	55 0b       	sbc	r21, r21
    1df4:	bb 27       	eor	r27, r27
    1df6:	aa 27       	eor	r26, r26
    1df8:	62 17       	cp	r22, r18
    1dfa:	73 07       	cpc	r23, r19
    1dfc:	84 07       	cpc	r24, r20
    1dfe:	38 f0       	brcs	.+14     	; 0x1e0e <__divsf3_pse+0x26>
    1e00:	9f 5f       	subi	r25, 0xFF	; 255
    1e02:	5f 4f       	sbci	r21, 0xFF	; 255
    1e04:	22 0f       	add	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	44 1f       	adc	r20, r20
    1e0a:	aa 1f       	adc	r26, r26
    1e0c:	a9 f3       	breq	.-22     	; 0x1df8 <__divsf3_pse+0x10>
    1e0e:	35 d0       	rcall	.+106    	; 0x1e7a <__divsf3_pse+0x92>
    1e10:	0e 2e       	mov	r0, r30
    1e12:	3a f0       	brmi	.+14     	; 0x1e22 <__divsf3_pse+0x3a>
    1e14:	e0 e8       	ldi	r30, 0x80	; 128
    1e16:	32 d0       	rcall	.+100    	; 0x1e7c <__divsf3_pse+0x94>
    1e18:	91 50       	subi	r25, 0x01	; 1
    1e1a:	50 40       	sbci	r21, 0x00	; 0
    1e1c:	e6 95       	lsr	r30
    1e1e:	00 1c       	adc	r0, r0
    1e20:	ca f7       	brpl	.-14     	; 0x1e14 <__divsf3_pse+0x2c>
    1e22:	2b d0       	rcall	.+86     	; 0x1e7a <__divsf3_pse+0x92>
    1e24:	fe 2f       	mov	r31, r30
    1e26:	29 d0       	rcall	.+82     	; 0x1e7a <__divsf3_pse+0x92>
    1e28:	66 0f       	add	r22, r22
    1e2a:	77 1f       	adc	r23, r23
    1e2c:	88 1f       	adc	r24, r24
    1e2e:	bb 1f       	adc	r27, r27
    1e30:	26 17       	cp	r18, r22
    1e32:	37 07       	cpc	r19, r23
    1e34:	48 07       	cpc	r20, r24
    1e36:	ab 07       	cpc	r26, r27
    1e38:	b0 e8       	ldi	r27, 0x80	; 128
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <__divsf3_pse+0x56>
    1e3c:	bb 0b       	sbc	r27, r27
    1e3e:	80 2d       	mov	r24, r0
    1e40:	bf 01       	movw	r22, r30
    1e42:	ff 27       	eor	r31, r31
    1e44:	93 58       	subi	r25, 0x83	; 131
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	3a f0       	brmi	.+14     	; 0x1e58 <__divsf3_pse+0x70>
    1e4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	78 f0       	brcs	.+30     	; 0x1e6e <__divsf3_pse+0x86>
    1e50:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__fp_inf>
    1e54:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_szero>
    1e58:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5a:	e4 f3       	brlt	.-8      	; 0x1e54 <__divsf3_pse+0x6c>
    1e5c:	98 3e       	cpi	r25, 0xE8	; 232
    1e5e:	d4 f3       	brlt	.-12     	; 0x1e54 <__divsf3_pse+0x6c>
    1e60:	86 95       	lsr	r24
    1e62:	77 95       	ror	r23
    1e64:	67 95       	ror	r22
    1e66:	b7 95       	ror	r27
    1e68:	f7 95       	ror	r31
    1e6a:	9f 5f       	subi	r25, 0xFF	; 255
    1e6c:	c9 f7       	brne	.-14     	; 0x1e60 <__divsf3_pse+0x78>
    1e6e:	88 0f       	add	r24, r24
    1e70:	91 1d       	adc	r25, r1
    1e72:	96 95       	lsr	r25
    1e74:	87 95       	ror	r24
    1e76:	97 f9       	bld	r25, 7
    1e78:	08 95       	ret
    1e7a:	e1 e0       	ldi	r30, 0x01	; 1
    1e7c:	66 0f       	add	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	bb 1f       	adc	r27, r27
    1e84:	62 17       	cp	r22, r18
    1e86:	73 07       	cpc	r23, r19
    1e88:	84 07       	cpc	r24, r20
    1e8a:	ba 07       	cpc	r27, r26
    1e8c:	20 f0       	brcs	.+8      	; 0x1e96 <__divsf3_pse+0xae>
    1e8e:	62 1b       	sub	r22, r18
    1e90:	73 0b       	sbc	r23, r19
    1e92:	84 0b       	sbc	r24, r20
    1e94:	ba 0b       	sbc	r27, r26
    1e96:	ee 1f       	adc	r30, r30
    1e98:	88 f7       	brcc	.-30     	; 0x1e7c <__divsf3_pse+0x94>
    1e9a:	e0 95       	com	r30
    1e9c:	08 95       	ret

00001e9e <__fixunssfsi>:
    1e9e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__fp_splitA>
    1ea2:	88 f0       	brcs	.+34     	; 0x1ec6 <__fixunssfsi+0x28>
    1ea4:	9f 57       	subi	r25, 0x7F	; 127
    1ea6:	98 f0       	brcs	.+38     	; 0x1ece <__fixunssfsi+0x30>
    1ea8:	b9 2f       	mov	r27, r25
    1eaa:	99 27       	eor	r25, r25
    1eac:	b7 51       	subi	r27, 0x17	; 23
    1eae:	b0 f0       	brcs	.+44     	; 0x1edc <__fixunssfsi+0x3e>
    1eb0:	e1 f0       	breq	.+56     	; 0x1eea <__fixunssfsi+0x4c>
    1eb2:	66 0f       	add	r22, r22
    1eb4:	77 1f       	adc	r23, r23
    1eb6:	88 1f       	adc	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	1a f0       	brmi	.+6      	; 0x1ec2 <__fixunssfsi+0x24>
    1ebc:	ba 95       	dec	r27
    1ebe:	c9 f7       	brne	.-14     	; 0x1eb2 <__fixunssfsi+0x14>
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <__fixunssfsi+0x4c>
    1ec2:	b1 30       	cpi	r27, 0x01	; 1
    1ec4:	91 f0       	breq	.+36     	; 0x1eea <__fixunssfsi+0x4c>
    1ec6:	0e 94 05 10 	call	0x200a	; 0x200a <__fp_zero>
    1eca:	b1 e0       	ldi	r27, 0x01	; 1
    1ecc:	08 95       	ret
    1ece:	0c 94 05 10 	jmp	0x200a	; 0x200a <__fp_zero>
    1ed2:	67 2f       	mov	r22, r23
    1ed4:	78 2f       	mov	r23, r24
    1ed6:	88 27       	eor	r24, r24
    1ed8:	b8 5f       	subi	r27, 0xF8	; 248
    1eda:	39 f0       	breq	.+14     	; 0x1eea <__fixunssfsi+0x4c>
    1edc:	b9 3f       	cpi	r27, 0xF9	; 249
    1ede:	cc f3       	brlt	.-14     	; 0x1ed2 <__fixunssfsi+0x34>
    1ee0:	86 95       	lsr	r24
    1ee2:	77 95       	ror	r23
    1ee4:	67 95       	ror	r22
    1ee6:	b3 95       	inc	r27
    1ee8:	d9 f7       	brne	.-10     	; 0x1ee0 <__fixunssfsi+0x42>
    1eea:	3e f4       	brtc	.+14     	; 0x1efa <__fixunssfsi+0x5c>
    1eec:	90 95       	com	r25
    1eee:	80 95       	com	r24
    1ef0:	70 95       	com	r23
    1ef2:	61 95       	neg	r22
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	08 95       	ret

00001efc <__floatunsisf>:
    1efc:	e8 94       	clt
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <__floatsisf+0x12>

00001f00 <__floatsisf>:
    1f00:	97 fb       	bst	r25, 7
    1f02:	3e f4       	brtc	.+14     	; 0x1f12 <__floatsisf+0x12>
    1f04:	90 95       	com	r25
    1f06:	80 95       	com	r24
    1f08:	70 95       	com	r23
    1f0a:	61 95       	neg	r22
    1f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f10:	9f 4f       	sbci	r25, 0xFF	; 255
    1f12:	99 23       	and	r25, r25
    1f14:	a9 f0       	breq	.+42     	; 0x1f40 <__floatsisf+0x40>
    1f16:	f9 2f       	mov	r31, r25
    1f18:	96 e9       	ldi	r25, 0x96	; 150
    1f1a:	bb 27       	eor	r27, r27
    1f1c:	93 95       	inc	r25
    1f1e:	f6 95       	lsr	r31
    1f20:	87 95       	ror	r24
    1f22:	77 95       	ror	r23
    1f24:	67 95       	ror	r22
    1f26:	b7 95       	ror	r27
    1f28:	f1 11       	cpse	r31, r1
    1f2a:	f8 cf       	rjmp	.-16     	; 0x1f1c <__floatsisf+0x1c>
    1f2c:	fa f4       	brpl	.+62     	; 0x1f6c <__floatsisf+0x6c>
    1f2e:	bb 0f       	add	r27, r27
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <__floatsisf+0x36>
    1f32:	60 ff       	sbrs	r22, 0
    1f34:	1b c0       	rjmp	.+54     	; 0x1f6c <__floatsisf+0x6c>
    1f36:	6f 5f       	subi	r22, 0xFF	; 255
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	16 c0       	rjmp	.+44     	; 0x1f6c <__floatsisf+0x6c>
    1f40:	88 23       	and	r24, r24
    1f42:	11 f0       	breq	.+4      	; 0x1f48 <__floatsisf+0x48>
    1f44:	96 e9       	ldi	r25, 0x96	; 150
    1f46:	11 c0       	rjmp	.+34     	; 0x1f6a <__floatsisf+0x6a>
    1f48:	77 23       	and	r23, r23
    1f4a:	21 f0       	breq	.+8      	; 0x1f54 <__floatsisf+0x54>
    1f4c:	9e e8       	ldi	r25, 0x8E	; 142
    1f4e:	87 2f       	mov	r24, r23
    1f50:	76 2f       	mov	r23, r22
    1f52:	05 c0       	rjmp	.+10     	; 0x1f5e <__floatsisf+0x5e>
    1f54:	66 23       	and	r22, r22
    1f56:	71 f0       	breq	.+28     	; 0x1f74 <__floatsisf+0x74>
    1f58:	96 e8       	ldi	r25, 0x86	; 134
    1f5a:	86 2f       	mov	r24, r22
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	2a f0       	brmi	.+10     	; 0x1f6c <__floatsisf+0x6c>
    1f62:	9a 95       	dec	r25
    1f64:	66 0f       	add	r22, r22
    1f66:	77 1f       	adc	r23, r23
    1f68:	88 1f       	adc	r24, r24
    1f6a:	da f7       	brpl	.-10     	; 0x1f62 <__floatsisf+0x62>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	96 95       	lsr	r25
    1f70:	87 95       	ror	r24
    1f72:	97 f9       	bld	r25, 7
    1f74:	08 95       	ret

00001f76 <__fp_inf>:
    1f76:	97 f9       	bld	r25, 7
    1f78:	9f 67       	ori	r25, 0x7F	; 127
    1f7a:	80 e8       	ldi	r24, 0x80	; 128
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	08 95       	ret

00001f82 <__fp_nan>:
    1f82:	9f ef       	ldi	r25, 0xFF	; 255
    1f84:	80 ec       	ldi	r24, 0xC0	; 192
    1f86:	08 95       	ret

00001f88 <__fp_pscA>:
    1f88:	00 24       	eor	r0, r0
    1f8a:	0a 94       	dec	r0
    1f8c:	16 16       	cp	r1, r22
    1f8e:	17 06       	cpc	r1, r23
    1f90:	18 06       	cpc	r1, r24
    1f92:	09 06       	cpc	r0, r25
    1f94:	08 95       	ret

00001f96 <__fp_pscB>:
    1f96:	00 24       	eor	r0, r0
    1f98:	0a 94       	dec	r0
    1f9a:	12 16       	cp	r1, r18
    1f9c:	13 06       	cpc	r1, r19
    1f9e:	14 06       	cpc	r1, r20
    1fa0:	05 06       	cpc	r0, r21
    1fa2:	08 95       	ret

00001fa4 <__fp_round>:
    1fa4:	09 2e       	mov	r0, r25
    1fa6:	03 94       	inc	r0
    1fa8:	00 0c       	add	r0, r0
    1faa:	11 f4       	brne	.+4      	; 0x1fb0 <__fp_round+0xc>
    1fac:	88 23       	and	r24, r24
    1fae:	52 f0       	brmi	.+20     	; 0x1fc4 <__fp_round+0x20>
    1fb0:	bb 0f       	add	r27, r27
    1fb2:	40 f4       	brcc	.+16     	; 0x1fc4 <__fp_round+0x20>
    1fb4:	bf 2b       	or	r27, r31
    1fb6:	11 f4       	brne	.+4      	; 0x1fbc <__fp_round+0x18>
    1fb8:	60 ff       	sbrs	r22, 0
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <__fp_round+0x20>
    1fbc:	6f 5f       	subi	r22, 0xFF	; 255
    1fbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc4:	08 95       	ret

00001fc6 <__fp_split3>:
    1fc6:	57 fd       	sbrc	r21, 7
    1fc8:	90 58       	subi	r25, 0x80	; 128
    1fca:	44 0f       	add	r20, r20
    1fcc:	55 1f       	adc	r21, r21
    1fce:	59 f0       	breq	.+22     	; 0x1fe6 <__fp_splitA+0x10>
    1fd0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fd2:	71 f0       	breq	.+28     	; 0x1ff0 <__fp_splitA+0x1a>
    1fd4:	47 95       	ror	r20

00001fd6 <__fp_splitA>:
    1fd6:	88 0f       	add	r24, r24
    1fd8:	97 fb       	bst	r25, 7
    1fda:	99 1f       	adc	r25, r25
    1fdc:	61 f0       	breq	.+24     	; 0x1ff6 <__fp_splitA+0x20>
    1fde:	9f 3f       	cpi	r25, 0xFF	; 255
    1fe0:	79 f0       	breq	.+30     	; 0x2000 <__fp_splitA+0x2a>
    1fe2:	87 95       	ror	r24
    1fe4:	08 95       	ret
    1fe6:	12 16       	cp	r1, r18
    1fe8:	13 06       	cpc	r1, r19
    1fea:	14 06       	cpc	r1, r20
    1fec:	55 1f       	adc	r21, r21
    1fee:	f2 cf       	rjmp	.-28     	; 0x1fd4 <__fp_split3+0xe>
    1ff0:	46 95       	lsr	r20
    1ff2:	f1 df       	rcall	.-30     	; 0x1fd6 <__fp_splitA>
    1ff4:	08 c0       	rjmp	.+16     	; 0x2006 <__fp_splitA+0x30>
    1ff6:	16 16       	cp	r1, r22
    1ff8:	17 06       	cpc	r1, r23
    1ffa:	18 06       	cpc	r1, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	f1 cf       	rjmp	.-30     	; 0x1fe2 <__fp_splitA+0xc>
    2000:	86 95       	lsr	r24
    2002:	71 05       	cpc	r23, r1
    2004:	61 05       	cpc	r22, r1
    2006:	08 94       	sec
    2008:	08 95       	ret

0000200a <__fp_zero>:
    200a:	e8 94       	clt

0000200c <__fp_szero>:
    200c:	bb 27       	eor	r27, r27
    200e:	66 27       	eor	r22, r22
    2010:	77 27       	eor	r23, r23
    2012:	cb 01       	movw	r24, r22
    2014:	97 f9       	bld	r25, 7
    2016:	08 95       	ret

00002018 <__mulsf3>:
    2018:	0e 94 1f 10 	call	0x203e	; 0x203e <__mulsf3x>
    201c:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__fp_round>
    2020:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <__fp_pscA>
    2024:	38 f0       	brcs	.+14     	; 0x2034 <__mulsf3+0x1c>
    2026:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__fp_pscB>
    202a:	20 f0       	brcs	.+8      	; 0x2034 <__mulsf3+0x1c>
    202c:	95 23       	and	r25, r21
    202e:	11 f0       	breq	.+4      	; 0x2034 <__mulsf3+0x1c>
    2030:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__fp_inf>
    2034:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__fp_nan>
    2038:	11 24       	eor	r1, r1
    203a:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_szero>

0000203e <__mulsf3x>:
    203e:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__fp_split3>
    2042:	70 f3       	brcs	.-36     	; 0x2020 <__mulsf3+0x8>

00002044 <__mulsf3_pse>:
    2044:	95 9f       	mul	r25, r21
    2046:	c1 f3       	breq	.-16     	; 0x2038 <__mulsf3+0x20>
    2048:	95 0f       	add	r25, r21
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	55 1f       	adc	r21, r21
    204e:	62 9f       	mul	r22, r18
    2050:	f0 01       	movw	r30, r0
    2052:	72 9f       	mul	r23, r18
    2054:	bb 27       	eor	r27, r27
    2056:	f0 0d       	add	r31, r0
    2058:	b1 1d       	adc	r27, r1
    205a:	63 9f       	mul	r22, r19
    205c:	aa 27       	eor	r26, r26
    205e:	f0 0d       	add	r31, r0
    2060:	b1 1d       	adc	r27, r1
    2062:	aa 1f       	adc	r26, r26
    2064:	64 9f       	mul	r22, r20
    2066:	66 27       	eor	r22, r22
    2068:	b0 0d       	add	r27, r0
    206a:	a1 1d       	adc	r26, r1
    206c:	66 1f       	adc	r22, r22
    206e:	82 9f       	mul	r24, r18
    2070:	22 27       	eor	r18, r18
    2072:	b0 0d       	add	r27, r0
    2074:	a1 1d       	adc	r26, r1
    2076:	62 1f       	adc	r22, r18
    2078:	73 9f       	mul	r23, r19
    207a:	b0 0d       	add	r27, r0
    207c:	a1 1d       	adc	r26, r1
    207e:	62 1f       	adc	r22, r18
    2080:	83 9f       	mul	r24, r19
    2082:	a0 0d       	add	r26, r0
    2084:	61 1d       	adc	r22, r1
    2086:	22 1f       	adc	r18, r18
    2088:	74 9f       	mul	r23, r20
    208a:	33 27       	eor	r19, r19
    208c:	a0 0d       	add	r26, r0
    208e:	61 1d       	adc	r22, r1
    2090:	23 1f       	adc	r18, r19
    2092:	84 9f       	mul	r24, r20
    2094:	60 0d       	add	r22, r0
    2096:	21 1d       	adc	r18, r1
    2098:	82 2f       	mov	r24, r18
    209a:	76 2f       	mov	r23, r22
    209c:	6a 2f       	mov	r22, r26
    209e:	11 24       	eor	r1, r1
    20a0:	9f 57       	subi	r25, 0x7F	; 127
    20a2:	50 40       	sbci	r21, 0x00	; 0
    20a4:	9a f0       	brmi	.+38     	; 0x20cc <__mulsf3_pse+0x88>
    20a6:	f1 f0       	breq	.+60     	; 0x20e4 <__mulsf3_pse+0xa0>
    20a8:	88 23       	and	r24, r24
    20aa:	4a f0       	brmi	.+18     	; 0x20be <__mulsf3_pse+0x7a>
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	bb 1f       	adc	r27, r27
    20b2:	66 1f       	adc	r22, r22
    20b4:	77 1f       	adc	r23, r23
    20b6:	88 1f       	adc	r24, r24
    20b8:	91 50       	subi	r25, 0x01	; 1
    20ba:	50 40       	sbci	r21, 0x00	; 0
    20bc:	a9 f7       	brne	.-22     	; 0x20a8 <__mulsf3_pse+0x64>
    20be:	9e 3f       	cpi	r25, 0xFE	; 254
    20c0:	51 05       	cpc	r21, r1
    20c2:	80 f0       	brcs	.+32     	; 0x20e4 <__mulsf3_pse+0xa0>
    20c4:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__fp_inf>
    20c8:	0c 94 06 10 	jmp	0x200c	; 0x200c <__fp_szero>
    20cc:	5f 3f       	cpi	r21, 0xFF	; 255
    20ce:	e4 f3       	brlt	.-8      	; 0x20c8 <__mulsf3_pse+0x84>
    20d0:	98 3e       	cpi	r25, 0xE8	; 232
    20d2:	d4 f3       	brlt	.-12     	; 0x20c8 <__mulsf3_pse+0x84>
    20d4:	86 95       	lsr	r24
    20d6:	77 95       	ror	r23
    20d8:	67 95       	ror	r22
    20da:	b7 95       	ror	r27
    20dc:	f7 95       	ror	r31
    20de:	e7 95       	ror	r30
    20e0:	9f 5f       	subi	r25, 0xFF	; 255
    20e2:	c1 f7       	brne	.-16     	; 0x20d4 <__mulsf3_pse+0x90>
    20e4:	fe 2b       	or	r31, r30
    20e6:	88 0f       	add	r24, r24
    20e8:	91 1d       	adc	r25, r1
    20ea:	96 95       	lsr	r25
    20ec:	87 95       	ror	r24
    20ee:	97 f9       	bld	r25, 7
    20f0:	08 95       	ret

000020f2 <__tablejump2__>:
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	05 90       	lpm	r0, Z+
    20f8:	f4 91       	lpm	r31, Z
    20fa:	e0 2d       	mov	r30, r0
    20fc:	09 94       	ijmp

000020fe <dtostrf>:
    20fe:	ef 92       	push	r14
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	e8 01       	movw	r28, r16
    210a:	47 fd       	sbrc	r20, 7
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <dtostrf+0x14>
    210e:	34 e0       	ldi	r19, 0x04	; 4
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <dtostrf+0x16>
    2112:	34 e1       	ldi	r19, 0x14	; 20
    2114:	04 2e       	mov	r0, r20
    2116:	00 0c       	add	r0, r0
    2118:	55 0b       	sbc	r21, r21
    211a:	57 ff       	sbrs	r21, 7
    211c:	03 c0       	rjmp	.+6      	; 0x2124 <dtostrf+0x26>
    211e:	51 95       	neg	r21
    2120:	41 95       	neg	r20
    2122:	51 09       	sbc	r21, r1
    2124:	e3 2e       	mov	r14, r19
    2126:	02 2f       	mov	r16, r18
    2128:	24 2f       	mov	r18, r20
    212a:	ae 01       	movw	r20, r28
    212c:	0e 94 a2 12 	call	0x2544	; 0x2544 <dtoa_prf>
    2130:	ce 01       	movw	r24, r28
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	ef 90       	pop	r14
    213c:	08 95       	ret

0000213e <sprintf>:
    213e:	ae e0       	ldi	r26, 0x0E	; 14
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 ea       	ldi	r30, 0xA5	; 165
    2144:	f0 e1       	ldi	r31, 0x10	; 16
    2146:	0c 94 92 15 	jmp	0x2b24	; 0x2b24 <__prologue_saves__+0x1c>
    214a:	0d 89       	ldd	r16, Y+21	; 0x15
    214c:	1e 89       	ldd	r17, Y+22	; 0x16
    214e:	86 e0       	ldi	r24, 0x06	; 6
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	1a 83       	std	Y+2, r17	; 0x02
    2154:	09 83       	std	Y+1, r16	; 0x01
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	9f e7       	ldi	r25, 0x7F	; 127
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	ae 01       	movw	r20, r28
    2160:	47 5e       	subi	r20, 0xE7	; 231
    2162:	5f 4f       	sbci	r21, 0xFF	; 255
    2164:	6f 89       	ldd	r22, Y+23	; 0x17
    2166:	78 8d       	ldd	r23, Y+24	; 0x18
    2168:	ce 01       	movw	r24, r28
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	0e 94 c1 10 	call	0x2182	; 0x2182 <vfprintf>
    2170:	ef 81       	ldd	r30, Y+7	; 0x07
    2172:	f8 85       	ldd	r31, Y+8	; 0x08
    2174:	e0 0f       	add	r30, r16
    2176:	f1 1f       	adc	r31, r17
    2178:	10 82       	st	Z, r1
    217a:	2e 96       	adiw	r28, 0x0e	; 14
    217c:	e4 e0       	ldi	r30, 0x04	; 4
    217e:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__epilogue_restores__+0x1c>

00002182 <vfprintf>:
    2182:	ab e0       	ldi	r26, 0x0B	; 11
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e7 ec       	ldi	r30, 0xC7	; 199
    2188:	f0 e1       	ldi	r31, 0x10	; 16
    218a:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__>
    218e:	6c 01       	movw	r12, r24
    2190:	7b 01       	movw	r14, r22
    2192:	8a 01       	movw	r16, r20
    2194:	fc 01       	movw	r30, r24
    2196:	17 82       	std	Z+7, r1	; 0x07
    2198:	16 82       	std	Z+6, r1	; 0x06
    219a:	83 81       	ldd	r24, Z+3	; 0x03
    219c:	81 ff       	sbrs	r24, 1
    219e:	cc c1       	rjmp	.+920    	; 0x2538 <vfprintf+0x3b6>
    21a0:	ce 01       	movw	r24, r28
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	3c 01       	movw	r6, r24
    21a6:	f6 01       	movw	r30, r12
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	f7 01       	movw	r30, r14
    21ac:	93 fd       	sbrc	r25, 3
    21ae:	85 91       	lpm	r24, Z+
    21b0:	93 ff       	sbrs	r25, 3
    21b2:	81 91       	ld	r24, Z+
    21b4:	7f 01       	movw	r14, r30
    21b6:	88 23       	and	r24, r24
    21b8:	09 f4       	brne	.+2      	; 0x21bc <vfprintf+0x3a>
    21ba:	ba c1       	rjmp	.+884    	; 0x2530 <vfprintf+0x3ae>
    21bc:	85 32       	cpi	r24, 0x25	; 37
    21be:	39 f4       	brne	.+14     	; 0x21ce <vfprintf+0x4c>
    21c0:	93 fd       	sbrc	r25, 3
    21c2:	85 91       	lpm	r24, Z+
    21c4:	93 ff       	sbrs	r25, 3
    21c6:	81 91       	ld	r24, Z+
    21c8:	7f 01       	movw	r14, r30
    21ca:	85 32       	cpi	r24, 0x25	; 37
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <vfprintf+0x56>
    21ce:	b6 01       	movw	r22, r12
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    21d6:	e7 cf       	rjmp	.-50     	; 0x21a6 <vfprintf+0x24>
    21d8:	91 2c       	mov	r9, r1
    21da:	21 2c       	mov	r2, r1
    21dc:	31 2c       	mov	r3, r1
    21de:	ff e1       	ldi	r31, 0x1F	; 31
    21e0:	f3 15       	cp	r31, r3
    21e2:	d8 f0       	brcs	.+54     	; 0x221a <vfprintf+0x98>
    21e4:	8b 32       	cpi	r24, 0x2B	; 43
    21e6:	79 f0       	breq	.+30     	; 0x2206 <vfprintf+0x84>
    21e8:	38 f4       	brcc	.+14     	; 0x21f8 <vfprintf+0x76>
    21ea:	80 32       	cpi	r24, 0x20	; 32
    21ec:	79 f0       	breq	.+30     	; 0x220c <vfprintf+0x8a>
    21ee:	83 32       	cpi	r24, 0x23	; 35
    21f0:	a1 f4       	brne	.+40     	; 0x221a <vfprintf+0x98>
    21f2:	23 2d       	mov	r18, r3
    21f4:	20 61       	ori	r18, 0x10	; 16
    21f6:	1d c0       	rjmp	.+58     	; 0x2232 <vfprintf+0xb0>
    21f8:	8d 32       	cpi	r24, 0x2D	; 45
    21fa:	61 f0       	breq	.+24     	; 0x2214 <vfprintf+0x92>
    21fc:	80 33       	cpi	r24, 0x30	; 48
    21fe:	69 f4       	brne	.+26     	; 0x221a <vfprintf+0x98>
    2200:	23 2d       	mov	r18, r3
    2202:	21 60       	ori	r18, 0x01	; 1
    2204:	16 c0       	rjmp	.+44     	; 0x2232 <vfprintf+0xb0>
    2206:	83 2d       	mov	r24, r3
    2208:	82 60       	ori	r24, 0x02	; 2
    220a:	38 2e       	mov	r3, r24
    220c:	e3 2d       	mov	r30, r3
    220e:	e4 60       	ori	r30, 0x04	; 4
    2210:	3e 2e       	mov	r3, r30
    2212:	2a c0       	rjmp	.+84     	; 0x2268 <vfprintf+0xe6>
    2214:	f3 2d       	mov	r31, r3
    2216:	f8 60       	ori	r31, 0x08	; 8
    2218:	1d c0       	rjmp	.+58     	; 0x2254 <vfprintf+0xd2>
    221a:	37 fc       	sbrc	r3, 7
    221c:	2d c0       	rjmp	.+90     	; 0x2278 <vfprintf+0xf6>
    221e:	20 ed       	ldi	r18, 0xD0	; 208
    2220:	28 0f       	add	r18, r24
    2222:	2a 30       	cpi	r18, 0x0A	; 10
    2224:	40 f0       	brcs	.+16     	; 0x2236 <vfprintf+0xb4>
    2226:	8e 32       	cpi	r24, 0x2E	; 46
    2228:	b9 f4       	brne	.+46     	; 0x2258 <vfprintf+0xd6>
    222a:	36 fc       	sbrc	r3, 6
    222c:	81 c1       	rjmp	.+770    	; 0x2530 <vfprintf+0x3ae>
    222e:	23 2d       	mov	r18, r3
    2230:	20 64       	ori	r18, 0x40	; 64
    2232:	32 2e       	mov	r3, r18
    2234:	19 c0       	rjmp	.+50     	; 0x2268 <vfprintf+0xe6>
    2236:	36 fe       	sbrs	r3, 6
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <vfprintf+0xc4>
    223a:	8a e0       	ldi	r24, 0x0A	; 10
    223c:	98 9e       	mul	r9, r24
    223e:	20 0d       	add	r18, r0
    2240:	11 24       	eor	r1, r1
    2242:	92 2e       	mov	r9, r18
    2244:	11 c0       	rjmp	.+34     	; 0x2268 <vfprintf+0xe6>
    2246:	ea e0       	ldi	r30, 0x0A	; 10
    2248:	2e 9e       	mul	r2, r30
    224a:	20 0d       	add	r18, r0
    224c:	11 24       	eor	r1, r1
    224e:	22 2e       	mov	r2, r18
    2250:	f3 2d       	mov	r31, r3
    2252:	f0 62       	ori	r31, 0x20	; 32
    2254:	3f 2e       	mov	r3, r31
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <vfprintf+0xe6>
    2258:	8c 36       	cpi	r24, 0x6C	; 108
    225a:	21 f4       	brne	.+8      	; 0x2264 <vfprintf+0xe2>
    225c:	83 2d       	mov	r24, r3
    225e:	80 68       	ori	r24, 0x80	; 128
    2260:	38 2e       	mov	r3, r24
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <vfprintf+0xe6>
    2264:	88 36       	cpi	r24, 0x68	; 104
    2266:	41 f4       	brne	.+16     	; 0x2278 <vfprintf+0xf6>
    2268:	f7 01       	movw	r30, r14
    226a:	93 fd       	sbrc	r25, 3
    226c:	85 91       	lpm	r24, Z+
    226e:	93 ff       	sbrs	r25, 3
    2270:	81 91       	ld	r24, Z+
    2272:	7f 01       	movw	r14, r30
    2274:	81 11       	cpse	r24, r1
    2276:	b3 cf       	rjmp	.-154    	; 0x21de <vfprintf+0x5c>
    2278:	98 2f       	mov	r25, r24
    227a:	9f 7d       	andi	r25, 0xDF	; 223
    227c:	95 54       	subi	r25, 0x45	; 69
    227e:	93 30       	cpi	r25, 0x03	; 3
    2280:	28 f4       	brcc	.+10     	; 0x228c <vfprintf+0x10a>
    2282:	0c 5f       	subi	r16, 0xFC	; 252
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	9f e3       	ldi	r25, 0x3F	; 63
    2288:	99 83       	std	Y+1, r25	; 0x01
    228a:	0d c0       	rjmp	.+26     	; 0x22a6 <vfprintf+0x124>
    228c:	83 36       	cpi	r24, 0x63	; 99
    228e:	31 f0       	breq	.+12     	; 0x229c <vfprintf+0x11a>
    2290:	83 37       	cpi	r24, 0x73	; 115
    2292:	71 f0       	breq	.+28     	; 0x22b0 <vfprintf+0x12e>
    2294:	83 35       	cpi	r24, 0x53	; 83
    2296:	09 f0       	breq	.+2      	; 0x229a <vfprintf+0x118>
    2298:	59 c0       	rjmp	.+178    	; 0x234c <vfprintf+0x1ca>
    229a:	21 c0       	rjmp	.+66     	; 0x22de <vfprintf+0x15c>
    229c:	f8 01       	movw	r30, r16
    229e:	80 81       	ld	r24, Z
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	0e 5f       	subi	r16, 0xFE	; 254
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	88 24       	eor	r8, r8
    22a8:	83 94       	inc	r8
    22aa:	91 2c       	mov	r9, r1
    22ac:	53 01       	movw	r10, r6
    22ae:	13 c0       	rjmp	.+38     	; 0x22d6 <vfprintf+0x154>
    22b0:	28 01       	movw	r4, r16
    22b2:	f2 e0       	ldi	r31, 0x02	; 2
    22b4:	4f 0e       	add	r4, r31
    22b6:	51 1c       	adc	r5, r1
    22b8:	f8 01       	movw	r30, r16
    22ba:	a0 80       	ld	r10, Z
    22bc:	b1 80       	ldd	r11, Z+1	; 0x01
    22be:	36 fe       	sbrs	r3, 6
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <vfprintf+0x146>
    22c2:	69 2d       	mov	r22, r9
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <vfprintf+0x14a>
    22c8:	6f ef       	ldi	r22, 0xFF	; 255
    22ca:	7f ef       	ldi	r23, 0xFF	; 255
    22cc:	c5 01       	movw	r24, r10
    22ce:	0e 94 df 14 	call	0x29be	; 0x29be <strnlen>
    22d2:	4c 01       	movw	r8, r24
    22d4:	82 01       	movw	r16, r4
    22d6:	f3 2d       	mov	r31, r3
    22d8:	ff 77       	andi	r31, 0x7F	; 127
    22da:	3f 2e       	mov	r3, r31
    22dc:	16 c0       	rjmp	.+44     	; 0x230a <vfprintf+0x188>
    22de:	28 01       	movw	r4, r16
    22e0:	22 e0       	ldi	r18, 0x02	; 2
    22e2:	42 0e       	add	r4, r18
    22e4:	51 1c       	adc	r5, r1
    22e6:	f8 01       	movw	r30, r16
    22e8:	a0 80       	ld	r10, Z
    22ea:	b1 80       	ldd	r11, Z+1	; 0x01
    22ec:	36 fe       	sbrs	r3, 6
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <vfprintf+0x174>
    22f0:	69 2d       	mov	r22, r9
    22f2:	70 e0       	ldi	r23, 0x00	; 0
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <vfprintf+0x178>
    22f6:	6f ef       	ldi	r22, 0xFF	; 255
    22f8:	7f ef       	ldi	r23, 0xFF	; 255
    22fa:	c5 01       	movw	r24, r10
    22fc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <strnlen_P>
    2300:	4c 01       	movw	r8, r24
    2302:	f3 2d       	mov	r31, r3
    2304:	f0 68       	ori	r31, 0x80	; 128
    2306:	3f 2e       	mov	r3, r31
    2308:	82 01       	movw	r16, r4
    230a:	33 fc       	sbrc	r3, 3
    230c:	1b c0       	rjmp	.+54     	; 0x2344 <vfprintf+0x1c2>
    230e:	82 2d       	mov	r24, r2
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	88 16       	cp	r8, r24
    2314:	99 06       	cpc	r9, r25
    2316:	b0 f4       	brcc	.+44     	; 0x2344 <vfprintf+0x1c2>
    2318:	b6 01       	movw	r22, r12
    231a:	80 e2       	ldi	r24, 0x20	; 32
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    2322:	2a 94       	dec	r2
    2324:	f4 cf       	rjmp	.-24     	; 0x230e <vfprintf+0x18c>
    2326:	f5 01       	movw	r30, r10
    2328:	37 fc       	sbrc	r3, 7
    232a:	85 91       	lpm	r24, Z+
    232c:	37 fe       	sbrs	r3, 7
    232e:	81 91       	ld	r24, Z+
    2330:	5f 01       	movw	r10, r30
    2332:	b6 01       	movw	r22, r12
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    233a:	21 10       	cpse	r2, r1
    233c:	2a 94       	dec	r2
    233e:	21 e0       	ldi	r18, 0x01	; 1
    2340:	82 1a       	sub	r8, r18
    2342:	91 08       	sbc	r9, r1
    2344:	81 14       	cp	r8, r1
    2346:	91 04       	cpc	r9, r1
    2348:	71 f7       	brne	.-36     	; 0x2326 <vfprintf+0x1a4>
    234a:	e8 c0       	rjmp	.+464    	; 0x251c <vfprintf+0x39a>
    234c:	84 36       	cpi	r24, 0x64	; 100
    234e:	11 f0       	breq	.+4      	; 0x2354 <vfprintf+0x1d2>
    2350:	89 36       	cpi	r24, 0x69	; 105
    2352:	41 f5       	brne	.+80     	; 0x23a4 <vfprintf+0x222>
    2354:	f8 01       	movw	r30, r16
    2356:	37 fe       	sbrs	r3, 7
    2358:	07 c0       	rjmp	.+14     	; 0x2368 <vfprintf+0x1e6>
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	0c 5f       	subi	r16, 0xFC	; 252
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	08 c0       	rjmp	.+16     	; 0x2378 <vfprintf+0x1f6>
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	07 2e       	mov	r0, r23
    236e:	00 0c       	add	r0, r0
    2370:	88 0b       	sbc	r24, r24
    2372:	99 0b       	sbc	r25, r25
    2374:	0e 5f       	subi	r16, 0xFE	; 254
    2376:	1f 4f       	sbci	r17, 0xFF	; 255
    2378:	f3 2d       	mov	r31, r3
    237a:	ff 76       	andi	r31, 0x6F	; 111
    237c:	3f 2e       	mov	r3, r31
    237e:	97 ff       	sbrs	r25, 7
    2380:	09 c0       	rjmp	.+18     	; 0x2394 <vfprintf+0x212>
    2382:	90 95       	com	r25
    2384:	80 95       	com	r24
    2386:	70 95       	com	r23
    2388:	61 95       	neg	r22
    238a:	7f 4f       	sbci	r23, 0xFF	; 255
    238c:	8f 4f       	sbci	r24, 0xFF	; 255
    238e:	9f 4f       	sbci	r25, 0xFF	; 255
    2390:	f0 68       	ori	r31, 0x80	; 128
    2392:	3f 2e       	mov	r3, r31
    2394:	2a e0       	ldi	r18, 0x0A	; 10
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	a3 01       	movw	r20, r6
    239a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__ultoa_invert>
    239e:	88 2e       	mov	r8, r24
    23a0:	86 18       	sub	r8, r6
    23a2:	45 c0       	rjmp	.+138    	; 0x242e <vfprintf+0x2ac>
    23a4:	85 37       	cpi	r24, 0x75	; 117
    23a6:	31 f4       	brne	.+12     	; 0x23b4 <vfprintf+0x232>
    23a8:	23 2d       	mov	r18, r3
    23aa:	2f 7e       	andi	r18, 0xEF	; 239
    23ac:	b2 2e       	mov	r11, r18
    23ae:	2a e0       	ldi	r18, 0x0A	; 10
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	25 c0       	rjmp	.+74     	; 0x23fe <vfprintf+0x27c>
    23b4:	93 2d       	mov	r25, r3
    23b6:	99 7f       	andi	r25, 0xF9	; 249
    23b8:	b9 2e       	mov	r11, r25
    23ba:	8f 36       	cpi	r24, 0x6F	; 111
    23bc:	c1 f0       	breq	.+48     	; 0x23ee <vfprintf+0x26c>
    23be:	18 f4       	brcc	.+6      	; 0x23c6 <vfprintf+0x244>
    23c0:	88 35       	cpi	r24, 0x58	; 88
    23c2:	79 f0       	breq	.+30     	; 0x23e2 <vfprintf+0x260>
    23c4:	b5 c0       	rjmp	.+362    	; 0x2530 <vfprintf+0x3ae>
    23c6:	80 37       	cpi	r24, 0x70	; 112
    23c8:	19 f0       	breq	.+6      	; 0x23d0 <vfprintf+0x24e>
    23ca:	88 37       	cpi	r24, 0x78	; 120
    23cc:	21 f0       	breq	.+8      	; 0x23d6 <vfprintf+0x254>
    23ce:	b0 c0       	rjmp	.+352    	; 0x2530 <vfprintf+0x3ae>
    23d0:	e9 2f       	mov	r30, r25
    23d2:	e0 61       	ori	r30, 0x10	; 16
    23d4:	be 2e       	mov	r11, r30
    23d6:	b4 fe       	sbrs	r11, 4
    23d8:	0d c0       	rjmp	.+26     	; 0x23f4 <vfprintf+0x272>
    23da:	fb 2d       	mov	r31, r11
    23dc:	f4 60       	ori	r31, 0x04	; 4
    23de:	bf 2e       	mov	r11, r31
    23e0:	09 c0       	rjmp	.+18     	; 0x23f4 <vfprintf+0x272>
    23e2:	34 fe       	sbrs	r3, 4
    23e4:	0a c0       	rjmp	.+20     	; 0x23fa <vfprintf+0x278>
    23e6:	29 2f       	mov	r18, r25
    23e8:	26 60       	ori	r18, 0x06	; 6
    23ea:	b2 2e       	mov	r11, r18
    23ec:	06 c0       	rjmp	.+12     	; 0x23fa <vfprintf+0x278>
    23ee:	28 e0       	ldi	r18, 0x08	; 8
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	05 c0       	rjmp	.+10     	; 0x23fe <vfprintf+0x27c>
    23f4:	20 e1       	ldi	r18, 0x10	; 16
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <vfprintf+0x27c>
    23fa:	20 e1       	ldi	r18, 0x10	; 16
    23fc:	32 e0       	ldi	r19, 0x02	; 2
    23fe:	f8 01       	movw	r30, r16
    2400:	b7 fe       	sbrs	r11, 7
    2402:	07 c0       	rjmp	.+14     	; 0x2412 <vfprintf+0x290>
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	0c 5f       	subi	r16, 0xFC	; 252
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	06 c0       	rjmp	.+12     	; 0x241e <vfprintf+0x29c>
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 5f       	subi	r16, 0xFE	; 254
    241c:	1f 4f       	sbci	r17, 0xFF	; 255
    241e:	a3 01       	movw	r20, r6
    2420:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__ultoa_invert>
    2424:	88 2e       	mov	r8, r24
    2426:	86 18       	sub	r8, r6
    2428:	fb 2d       	mov	r31, r11
    242a:	ff 77       	andi	r31, 0x7F	; 127
    242c:	3f 2e       	mov	r3, r31
    242e:	36 fe       	sbrs	r3, 6
    2430:	0d c0       	rjmp	.+26     	; 0x244c <vfprintf+0x2ca>
    2432:	23 2d       	mov	r18, r3
    2434:	2e 7f       	andi	r18, 0xFE	; 254
    2436:	a2 2e       	mov	r10, r18
    2438:	89 14       	cp	r8, r9
    243a:	58 f4       	brcc	.+22     	; 0x2452 <vfprintf+0x2d0>
    243c:	34 fe       	sbrs	r3, 4
    243e:	0b c0       	rjmp	.+22     	; 0x2456 <vfprintf+0x2d4>
    2440:	32 fc       	sbrc	r3, 2
    2442:	09 c0       	rjmp	.+18     	; 0x2456 <vfprintf+0x2d4>
    2444:	83 2d       	mov	r24, r3
    2446:	8e 7e       	andi	r24, 0xEE	; 238
    2448:	a8 2e       	mov	r10, r24
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <vfprintf+0x2d4>
    244c:	b8 2c       	mov	r11, r8
    244e:	a3 2c       	mov	r10, r3
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <vfprintf+0x2d6>
    2452:	b8 2c       	mov	r11, r8
    2454:	01 c0       	rjmp	.+2      	; 0x2458 <vfprintf+0x2d6>
    2456:	b9 2c       	mov	r11, r9
    2458:	a4 fe       	sbrs	r10, 4
    245a:	0f c0       	rjmp	.+30     	; 0x247a <vfprintf+0x2f8>
    245c:	fe 01       	movw	r30, r28
    245e:	e8 0d       	add	r30, r8
    2460:	f1 1d       	adc	r31, r1
    2462:	80 81       	ld	r24, Z
    2464:	80 33       	cpi	r24, 0x30	; 48
    2466:	21 f4       	brne	.+8      	; 0x2470 <vfprintf+0x2ee>
    2468:	9a 2d       	mov	r25, r10
    246a:	99 7e       	andi	r25, 0xE9	; 233
    246c:	a9 2e       	mov	r10, r25
    246e:	09 c0       	rjmp	.+18     	; 0x2482 <vfprintf+0x300>
    2470:	a2 fe       	sbrs	r10, 2
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <vfprintf+0x2fe>
    2474:	b3 94       	inc	r11
    2476:	b3 94       	inc	r11
    2478:	04 c0       	rjmp	.+8      	; 0x2482 <vfprintf+0x300>
    247a:	8a 2d       	mov	r24, r10
    247c:	86 78       	andi	r24, 0x86	; 134
    247e:	09 f0       	breq	.+2      	; 0x2482 <vfprintf+0x300>
    2480:	b3 94       	inc	r11
    2482:	a3 fc       	sbrc	r10, 3
    2484:	11 c0       	rjmp	.+34     	; 0x24a8 <vfprintf+0x326>
    2486:	a0 fe       	sbrs	r10, 0
    2488:	06 c0       	rjmp	.+12     	; 0x2496 <vfprintf+0x314>
    248a:	b2 14       	cp	r11, r2
    248c:	88 f4       	brcc	.+34     	; 0x24b0 <vfprintf+0x32e>
    248e:	28 0c       	add	r2, r8
    2490:	92 2c       	mov	r9, r2
    2492:	9b 18       	sub	r9, r11
    2494:	0e c0       	rjmp	.+28     	; 0x24b2 <vfprintf+0x330>
    2496:	b2 14       	cp	r11, r2
    2498:	60 f4       	brcc	.+24     	; 0x24b2 <vfprintf+0x330>
    249a:	b6 01       	movw	r22, r12
    249c:	80 e2       	ldi	r24, 0x20	; 32
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    24a4:	b3 94       	inc	r11
    24a6:	f7 cf       	rjmp	.-18     	; 0x2496 <vfprintf+0x314>
    24a8:	b2 14       	cp	r11, r2
    24aa:	18 f4       	brcc	.+6      	; 0x24b2 <vfprintf+0x330>
    24ac:	2b 18       	sub	r2, r11
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <vfprintf+0x332>
    24b0:	98 2c       	mov	r9, r8
    24b2:	21 2c       	mov	r2, r1
    24b4:	a4 fe       	sbrs	r10, 4
    24b6:	10 c0       	rjmp	.+32     	; 0x24d8 <vfprintf+0x356>
    24b8:	b6 01       	movw	r22, r12
    24ba:	80 e3       	ldi	r24, 0x30	; 48
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    24c2:	a2 fe       	sbrs	r10, 2
    24c4:	17 c0       	rjmp	.+46     	; 0x24f4 <vfprintf+0x372>
    24c6:	a1 fc       	sbrc	r10, 1
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <vfprintf+0x34e>
    24ca:	88 e7       	ldi	r24, 0x78	; 120
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <vfprintf+0x352>
    24d0:	88 e5       	ldi	r24, 0x58	; 88
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	b6 01       	movw	r22, r12
    24d6:	0c c0       	rjmp	.+24     	; 0x24f0 <vfprintf+0x36e>
    24d8:	8a 2d       	mov	r24, r10
    24da:	86 78       	andi	r24, 0x86	; 134
    24dc:	59 f0       	breq	.+22     	; 0x24f4 <vfprintf+0x372>
    24de:	a1 fe       	sbrs	r10, 1
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <vfprintf+0x364>
    24e2:	8b e2       	ldi	r24, 0x2B	; 43
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <vfprintf+0x366>
    24e6:	80 e2       	ldi	r24, 0x20	; 32
    24e8:	a7 fc       	sbrc	r10, 7
    24ea:	8d e2       	ldi	r24, 0x2D	; 45
    24ec:	b6 01       	movw	r22, r12
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    24f4:	89 14       	cp	r8, r9
    24f6:	38 f4       	brcc	.+14     	; 0x2506 <vfprintf+0x384>
    24f8:	b6 01       	movw	r22, r12
    24fa:	80 e3       	ldi	r24, 0x30	; 48
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    2502:	9a 94       	dec	r9
    2504:	f7 cf       	rjmp	.-18     	; 0x24f4 <vfprintf+0x372>
    2506:	8a 94       	dec	r8
    2508:	f3 01       	movw	r30, r6
    250a:	e8 0d       	add	r30, r8
    250c:	f1 1d       	adc	r31, r1
    250e:	80 81       	ld	r24, Z
    2510:	b6 01       	movw	r22, r12
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    2518:	81 10       	cpse	r8, r1
    251a:	f5 cf       	rjmp	.-22     	; 0x2506 <vfprintf+0x384>
    251c:	22 20       	and	r2, r2
    251e:	09 f4       	brne	.+2      	; 0x2522 <vfprintf+0x3a0>
    2520:	42 ce       	rjmp	.-892    	; 0x21a6 <vfprintf+0x24>
    2522:	b6 01       	movw	r22, r12
    2524:	80 e2       	ldi	r24, 0x20	; 32
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <fputc>
    252c:	2a 94       	dec	r2
    252e:	f6 cf       	rjmp	.-20     	; 0x251c <vfprintf+0x39a>
    2530:	f6 01       	movw	r30, r12
    2532:	86 81       	ldd	r24, Z+6	; 0x06
    2534:	97 81       	ldd	r25, Z+7	; 0x07
    2536:	02 c0       	rjmp	.+4      	; 0x253c <vfprintf+0x3ba>
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	9f ef       	ldi	r25, 0xFF	; 255
    253c:	2b 96       	adiw	r28, 0x0b	; 11
    253e:	e2 e1       	ldi	r30, 0x12	; 18
    2540:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__>

00002544 <dtoa_prf>:
    2544:	a9 e0       	ldi	r26, 0x09	; 9
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e8 ea       	ldi	r30, 0xA8	; 168
    254a:	f2 e1       	ldi	r31, 0x12	; 18
    254c:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__prologue_saves__+0xc>
    2550:	6a 01       	movw	r12, r20
    2552:	12 2f       	mov	r17, r18
    2554:	b0 2e       	mov	r11, r16
    2556:	2b e3       	ldi	r18, 0x3B	; 59
    2558:	20 17       	cp	r18, r16
    255a:	20 f0       	brcs	.+8      	; 0x2564 <dtoa_prf+0x20>
    255c:	ff 24       	eor	r15, r15
    255e:	f3 94       	inc	r15
    2560:	f0 0e       	add	r15, r16
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <dtoa_prf+0x24>
    2564:	2c e3       	ldi	r18, 0x3C	; 60
    2566:	f2 2e       	mov	r15, r18
    2568:	0f 2d       	mov	r16, r15
    256a:	27 e0       	ldi	r18, 0x07	; 7
    256c:	ae 01       	movw	r20, r28
    256e:	4f 5f       	subi	r20, 0xFF	; 255
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__ftoa_engine>
    2576:	bc 01       	movw	r22, r24
    2578:	49 81       	ldd	r20, Y+1	; 0x01
    257a:	84 2f       	mov	r24, r20
    257c:	89 70       	andi	r24, 0x09	; 9
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	31 f0       	breq	.+12     	; 0x258e <dtoa_prf+0x4a>
    2582:	e1 fc       	sbrc	r14, 1
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <dtoa_prf+0x4e>
    2586:	e0 fe       	sbrs	r14, 0
    2588:	06 c0       	rjmp	.+12     	; 0x2596 <dtoa_prf+0x52>
    258a:	90 e2       	ldi	r25, 0x20	; 32
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <dtoa_prf+0x54>
    258e:	9d e2       	ldi	r25, 0x2D	; 45
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <dtoa_prf+0x54>
    2592:	9b e2       	ldi	r25, 0x2B	; 43
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <dtoa_prf+0x54>
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	5e 2d       	mov	r21, r14
    259a:	50 71       	andi	r21, 0x10	; 16
    259c:	43 ff       	sbrs	r20, 3
    259e:	3c c0       	rjmp	.+120    	; 0x2618 <dtoa_prf+0xd4>
    25a0:	91 11       	cpse	r25, r1
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <dtoa_prf+0x64>
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <dtoa_prf+0x66>
    25a8:	84 e0       	ldi	r24, 0x04	; 4
    25aa:	81 17       	cp	r24, r17
    25ac:	18 f4       	brcc	.+6      	; 0x25b4 <dtoa_prf+0x70>
    25ae:	21 2f       	mov	r18, r17
    25b0:	28 1b       	sub	r18, r24
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <dtoa_prf+0x72>
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	51 11       	cpse	r21, r1
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <dtoa_prf+0x8c>
    25ba:	f6 01       	movw	r30, r12
    25bc:	82 2f       	mov	r24, r18
    25be:	30 e2       	ldi	r19, 0x20	; 32
    25c0:	88 23       	and	r24, r24
    25c2:	19 f0       	breq	.+6      	; 0x25ca <dtoa_prf+0x86>
    25c4:	31 93       	st	Z+, r19
    25c6:	81 50       	subi	r24, 0x01	; 1
    25c8:	fb cf       	rjmp	.-10     	; 0x25c0 <dtoa_prf+0x7c>
    25ca:	c2 0e       	add	r12, r18
    25cc:	d1 1c       	adc	r13, r1
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	99 23       	and	r25, r25
    25d2:	29 f0       	breq	.+10     	; 0x25de <dtoa_prf+0x9a>
    25d4:	d6 01       	movw	r26, r12
    25d6:	9c 93       	st	X, r25
    25d8:	f6 01       	movw	r30, r12
    25da:	31 96       	adiw	r30, 0x01	; 1
    25dc:	6f 01       	movw	r12, r30
    25de:	c6 01       	movw	r24, r12
    25e0:	03 96       	adiw	r24, 0x03	; 3
    25e2:	e2 fe       	sbrs	r14, 2
    25e4:	0a c0       	rjmp	.+20     	; 0x25fa <dtoa_prf+0xb6>
    25e6:	3e e4       	ldi	r19, 0x4E	; 78
    25e8:	d6 01       	movw	r26, r12
    25ea:	3c 93       	st	X, r19
    25ec:	41 e4       	ldi	r20, 0x41	; 65
    25ee:	11 96       	adiw	r26, 0x01	; 1
    25f0:	4c 93       	st	X, r20
    25f2:	11 97       	sbiw	r26, 0x01	; 1
    25f4:	12 96       	adiw	r26, 0x02	; 2
    25f6:	3c 93       	st	X, r19
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <dtoa_prf+0xc2>
    25fa:	3e e6       	ldi	r19, 0x6E	; 110
    25fc:	f6 01       	movw	r30, r12
    25fe:	30 83       	st	Z, r19
    2600:	41 e6       	ldi	r20, 0x61	; 97
    2602:	41 83       	std	Z+1, r20	; 0x01
    2604:	32 83       	std	Z+2, r19	; 0x02
    2606:	fc 01       	movw	r30, r24
    2608:	32 2f       	mov	r19, r18
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	33 23       	and	r19, r19
    260e:	09 f4       	brne	.+2      	; 0x2612 <dtoa_prf+0xce>
    2610:	42 c0       	rjmp	.+132    	; 0x2696 <dtoa_prf+0x152>
    2612:	41 93       	st	Z+, r20
    2614:	31 50       	subi	r19, 0x01	; 1
    2616:	fa cf       	rjmp	.-12     	; 0x260c <dtoa_prf+0xc8>
    2618:	42 ff       	sbrs	r20, 2
    261a:	44 c0       	rjmp	.+136    	; 0x26a4 <dtoa_prf+0x160>
    261c:	91 11       	cpse	r25, r1
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <dtoa_prf+0xe0>
    2620:	83 e0       	ldi	r24, 0x03	; 3
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <dtoa_prf+0xe2>
    2624:	84 e0       	ldi	r24, 0x04	; 4
    2626:	81 17       	cp	r24, r17
    2628:	18 f4       	brcc	.+6      	; 0x2630 <dtoa_prf+0xec>
    262a:	21 2f       	mov	r18, r17
    262c:	28 1b       	sub	r18, r24
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <dtoa_prf+0xee>
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	51 11       	cpse	r21, r1
    2634:	0b c0       	rjmp	.+22     	; 0x264c <dtoa_prf+0x108>
    2636:	f6 01       	movw	r30, r12
    2638:	82 2f       	mov	r24, r18
    263a:	30 e2       	ldi	r19, 0x20	; 32
    263c:	88 23       	and	r24, r24
    263e:	19 f0       	breq	.+6      	; 0x2646 <dtoa_prf+0x102>
    2640:	31 93       	st	Z+, r19
    2642:	81 50       	subi	r24, 0x01	; 1
    2644:	fb cf       	rjmp	.-10     	; 0x263c <dtoa_prf+0xf8>
    2646:	c2 0e       	add	r12, r18
    2648:	d1 1c       	adc	r13, r1
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	99 23       	and	r25, r25
    264e:	29 f0       	breq	.+10     	; 0x265a <dtoa_prf+0x116>
    2650:	d6 01       	movw	r26, r12
    2652:	9c 93       	st	X, r25
    2654:	f6 01       	movw	r30, r12
    2656:	31 96       	adiw	r30, 0x01	; 1
    2658:	6f 01       	movw	r12, r30
    265a:	c6 01       	movw	r24, r12
    265c:	03 96       	adiw	r24, 0x03	; 3
    265e:	e2 fe       	sbrs	r14, 2
    2660:	0b c0       	rjmp	.+22     	; 0x2678 <dtoa_prf+0x134>
    2662:	39 e4       	ldi	r19, 0x49	; 73
    2664:	d6 01       	movw	r26, r12
    2666:	3c 93       	st	X, r19
    2668:	3e e4       	ldi	r19, 0x4E	; 78
    266a:	11 96       	adiw	r26, 0x01	; 1
    266c:	3c 93       	st	X, r19
    266e:	11 97       	sbiw	r26, 0x01	; 1
    2670:	36 e4       	ldi	r19, 0x46	; 70
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	3c 93       	st	X, r19
    2676:	07 c0       	rjmp	.+14     	; 0x2686 <dtoa_prf+0x142>
    2678:	39 e6       	ldi	r19, 0x69	; 105
    267a:	f6 01       	movw	r30, r12
    267c:	30 83       	st	Z, r19
    267e:	3e e6       	ldi	r19, 0x6E	; 110
    2680:	31 83       	std	Z+1, r19	; 0x01
    2682:	36 e6       	ldi	r19, 0x66	; 102
    2684:	32 83       	std	Z+2, r19	; 0x02
    2686:	fc 01       	movw	r30, r24
    2688:	32 2f       	mov	r19, r18
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	33 23       	and	r19, r19
    268e:	19 f0       	breq	.+6      	; 0x2696 <dtoa_prf+0x152>
    2690:	41 93       	st	Z+, r20
    2692:	31 50       	subi	r19, 0x01	; 1
    2694:	fb cf       	rjmp	.-10     	; 0x268c <dtoa_prf+0x148>
    2696:	fc 01       	movw	r30, r24
    2698:	e2 0f       	add	r30, r18
    269a:	f1 1d       	adc	r31, r1
    269c:	10 82       	st	Z, r1
    269e:	8e ef       	ldi	r24, 0xFE	; 254
    26a0:	9f ef       	ldi	r25, 0xFF	; 255
    26a2:	a6 c0       	rjmp	.+332    	; 0x27f0 <dtoa_prf+0x2ac>
    26a4:	21 e0       	ldi	r18, 0x01	; 1
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	91 11       	cpse	r25, r1
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <dtoa_prf+0x16c>
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	16 16       	cp	r1, r22
    26b2:	17 06       	cpc	r1, r23
    26b4:	1c f4       	brge	.+6      	; 0x26bc <dtoa_prf+0x178>
    26b6:	fb 01       	movw	r30, r22
    26b8:	31 96       	adiw	r30, 0x01	; 1
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <dtoa_prf+0x17c>
    26bc:	e1 e0       	ldi	r30, 0x01	; 1
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	2e 0f       	add	r18, r30
    26c2:	3f 1f       	adc	r19, r31
    26c4:	bb 20       	and	r11, r11
    26c6:	21 f0       	breq	.+8      	; 0x26d0 <dtoa_prf+0x18c>
    26c8:	eb 2d       	mov	r30, r11
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	31 96       	adiw	r30, 0x01	; 1
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <dtoa_prf+0x190>
    26d0:	e0 e0       	ldi	r30, 0x00	; 0
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	2e 0f       	add	r18, r30
    26d6:	3f 1f       	adc	r19, r31
    26d8:	e1 2f       	mov	r30, r17
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	2e 17       	cp	r18, r30
    26de:	3f 07       	cpc	r19, r31
    26e0:	1c f4       	brge	.+6      	; 0x26e8 <dtoa_prf+0x1a4>
    26e2:	12 1b       	sub	r17, r18
    26e4:	21 2f       	mov	r18, r17
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <dtoa_prf+0x1a6>
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	8e 2d       	mov	r24, r14
    26ec:	88 71       	andi	r24, 0x18	; 24
    26ee:	59 f4       	brne	.+22     	; 0x2706 <dtoa_prf+0x1c2>
    26f0:	f6 01       	movw	r30, r12
    26f2:	82 2f       	mov	r24, r18
    26f4:	30 e2       	ldi	r19, 0x20	; 32
    26f6:	88 23       	and	r24, r24
    26f8:	19 f0       	breq	.+6      	; 0x2700 <dtoa_prf+0x1bc>
    26fa:	31 93       	st	Z+, r19
    26fc:	81 50       	subi	r24, 0x01	; 1
    26fe:	fb cf       	rjmp	.-10     	; 0x26f6 <dtoa_prf+0x1b2>
    2700:	c2 0e       	add	r12, r18
    2702:	d1 1c       	adc	r13, r1
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	99 23       	and	r25, r25
    2708:	29 f0       	breq	.+10     	; 0x2714 <dtoa_prf+0x1d0>
    270a:	d6 01       	movw	r26, r12
    270c:	9c 93       	st	X, r25
    270e:	f6 01       	movw	r30, r12
    2710:	31 96       	adiw	r30, 0x01	; 1
    2712:	6f 01       	movw	r12, r30
    2714:	51 11       	cpse	r21, r1
    2716:	0b c0       	rjmp	.+22     	; 0x272e <dtoa_prf+0x1ea>
    2718:	f6 01       	movw	r30, r12
    271a:	82 2f       	mov	r24, r18
    271c:	90 e3       	ldi	r25, 0x30	; 48
    271e:	88 23       	and	r24, r24
    2720:	19 f0       	breq	.+6      	; 0x2728 <dtoa_prf+0x1e4>
    2722:	91 93       	st	Z+, r25
    2724:	81 50       	subi	r24, 0x01	; 1
    2726:	fb cf       	rjmp	.-10     	; 0x271e <dtoa_prf+0x1da>
    2728:	c2 0e       	add	r12, r18
    272a:	d1 1c       	adc	r13, r1
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	0f 2d       	mov	r16, r15
    2730:	06 0f       	add	r16, r22
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	34 2f       	mov	r19, r20
    2736:	30 71       	andi	r19, 0x10	; 16
    2738:	44 ff       	sbrs	r20, 4
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <dtoa_prf+0x1fe>
    273c:	91 33       	cpi	r25, 0x31	; 49
    273e:	09 f4       	brne	.+2      	; 0x2742 <dtoa_prf+0x1fe>
    2740:	01 50       	subi	r16, 0x01	; 1
    2742:	10 16       	cp	r1, r16
    2744:	24 f4       	brge	.+8      	; 0x274e <dtoa_prf+0x20a>
    2746:	09 30       	cpi	r16, 0x09	; 9
    2748:	18 f0       	brcs	.+6      	; 0x2750 <dtoa_prf+0x20c>
    274a:	08 e0       	ldi	r16, 0x08	; 8
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <dtoa_prf+0x20c>
    274e:	01 e0       	ldi	r16, 0x01	; 1
    2750:	ab 01       	movw	r20, r22
    2752:	77 ff       	sbrs	r23, 7
    2754:	02 c0       	rjmp	.+4      	; 0x275a <dtoa_prf+0x216>
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	fb 01       	movw	r30, r22
    275c:	e4 1b       	sub	r30, r20
    275e:	f5 0b       	sbc	r31, r21
    2760:	a1 e0       	ldi	r26, 0x01	; 1
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ac 0f       	add	r26, r28
    2766:	bd 1f       	adc	r27, r29
    2768:	ea 0f       	add	r30, r26
    276a:	fb 1f       	adc	r31, r27
    276c:	8e e2       	ldi	r24, 0x2E	; 46
    276e:	a8 2e       	mov	r10, r24
    2770:	4b 01       	movw	r8, r22
    2772:	80 1a       	sub	r8, r16
    2774:	91 08       	sbc	r9, r1
    2776:	0b 2d       	mov	r16, r11
    2778:	10 e0       	ldi	r17, 0x00	; 0
    277a:	11 95       	neg	r17
    277c:	01 95       	neg	r16
    277e:	11 09       	sbc	r17, r1
    2780:	4f 3f       	cpi	r20, 0xFF	; 255
    2782:	bf ef       	ldi	r27, 0xFF	; 255
    2784:	5b 07       	cpc	r21, r27
    2786:	21 f4       	brne	.+8      	; 0x2790 <dtoa_prf+0x24c>
    2788:	d6 01       	movw	r26, r12
    278a:	ac 92       	st	X, r10
    278c:	11 96       	adiw	r26, 0x01	; 1
    278e:	6d 01       	movw	r12, r26
    2790:	64 17       	cp	r22, r20
    2792:	75 07       	cpc	r23, r21
    2794:	2c f0       	brlt	.+10     	; 0x27a0 <dtoa_prf+0x25c>
    2796:	84 16       	cp	r8, r20
    2798:	95 06       	cpc	r9, r21
    279a:	14 f4       	brge	.+4      	; 0x27a0 <dtoa_prf+0x25c>
    279c:	81 81       	ldd	r24, Z+1	; 0x01
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <dtoa_prf+0x25e>
    27a0:	80 e3       	ldi	r24, 0x30	; 48
    27a2:	41 50       	subi	r20, 0x01	; 1
    27a4:	51 09       	sbc	r21, r1
    27a6:	31 96       	adiw	r30, 0x01	; 1
    27a8:	d6 01       	movw	r26, r12
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	7d 01       	movw	r14, r26
    27ae:	40 17       	cp	r20, r16
    27b0:	51 07       	cpc	r21, r17
    27b2:	24 f0       	brlt	.+8      	; 0x27bc <dtoa_prf+0x278>
    27b4:	d6 01       	movw	r26, r12
    27b6:	8c 93       	st	X, r24
    27b8:	67 01       	movw	r12, r14
    27ba:	e2 cf       	rjmp	.-60     	; 0x2780 <dtoa_prf+0x23c>
    27bc:	64 17       	cp	r22, r20
    27be:	75 07       	cpc	r23, r21
    27c0:	39 f4       	brne	.+14     	; 0x27d0 <dtoa_prf+0x28c>
    27c2:	96 33       	cpi	r25, 0x36	; 54
    27c4:	20 f4       	brcc	.+8      	; 0x27ce <dtoa_prf+0x28a>
    27c6:	95 33       	cpi	r25, 0x35	; 53
    27c8:	19 f4       	brne	.+6      	; 0x27d0 <dtoa_prf+0x28c>
    27ca:	31 11       	cpse	r19, r1
    27cc:	01 c0       	rjmp	.+2      	; 0x27d0 <dtoa_prf+0x28c>
    27ce:	81 e3       	ldi	r24, 0x31	; 49
    27d0:	f6 01       	movw	r30, r12
    27d2:	80 83       	st	Z, r24
    27d4:	f7 01       	movw	r30, r14
    27d6:	82 2f       	mov	r24, r18
    27d8:	90 e2       	ldi	r25, 0x20	; 32
    27da:	88 23       	and	r24, r24
    27dc:	19 f0       	breq	.+6      	; 0x27e4 <dtoa_prf+0x2a0>
    27de:	91 93       	st	Z+, r25
    27e0:	81 50       	subi	r24, 0x01	; 1
    27e2:	fb cf       	rjmp	.-10     	; 0x27da <dtoa_prf+0x296>
    27e4:	f7 01       	movw	r30, r14
    27e6:	e2 0f       	add	r30, r18
    27e8:	f1 1d       	adc	r31, r1
    27ea:	10 82       	st	Z, r1
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	29 96       	adiw	r28, 0x09	; 9
    27f2:	ec e0       	ldi	r30, 0x0C	; 12
    27f4:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__epilogue_restores__+0xc>

000027f8 <__ftoa_engine>:
    27f8:	28 30       	cpi	r18, 0x08	; 8
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <__ftoa_engine+0x6>
    27fc:	27 e0       	ldi	r18, 0x07	; 7
    27fe:	33 27       	eor	r19, r19
    2800:	da 01       	movw	r26, r20
    2802:	99 0f       	add	r25, r25
    2804:	31 1d       	adc	r19, r1
    2806:	87 fd       	sbrc	r24, 7
    2808:	91 60       	ori	r25, 0x01	; 1
    280a:	00 96       	adiw	r24, 0x00	; 0
    280c:	61 05       	cpc	r22, r1
    280e:	71 05       	cpc	r23, r1
    2810:	39 f4       	brne	.+14     	; 0x2820 <__ftoa_engine+0x28>
    2812:	32 60       	ori	r19, 0x02	; 2
    2814:	2e 5f       	subi	r18, 0xFE	; 254
    2816:	3d 93       	st	X+, r19
    2818:	30 e3       	ldi	r19, 0x30	; 48
    281a:	2a 95       	dec	r18
    281c:	e1 f7       	brne	.-8      	; 0x2816 <__ftoa_engine+0x1e>
    281e:	08 95       	ret
    2820:	9f 3f       	cpi	r25, 0xFF	; 255
    2822:	30 f0       	brcs	.+12     	; 0x2830 <__ftoa_engine+0x38>
    2824:	80 38       	cpi	r24, 0x80	; 128
    2826:	71 05       	cpc	r23, r1
    2828:	61 05       	cpc	r22, r1
    282a:	09 f0       	breq	.+2      	; 0x282e <__ftoa_engine+0x36>
    282c:	3c 5f       	subi	r19, 0xFC	; 252
    282e:	3c 5f       	subi	r19, 0xFC	; 252
    2830:	3d 93       	st	X+, r19
    2832:	91 30       	cpi	r25, 0x01	; 1
    2834:	08 f0       	brcs	.+2      	; 0x2838 <__ftoa_engine+0x40>
    2836:	80 68       	ori	r24, 0x80	; 128
    2838:	91 1d       	adc	r25, r1
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	1f 93       	push	r17
    2840:	0f 93       	push	r16
    2842:	ff 92       	push	r15
    2844:	ef 92       	push	r14
    2846:	19 2f       	mov	r17, r25
    2848:	98 7f       	andi	r25, 0xF8	; 248
    284a:	96 95       	lsr	r25
    284c:	e9 2f       	mov	r30, r25
    284e:	96 95       	lsr	r25
    2850:	96 95       	lsr	r25
    2852:	e9 0f       	add	r30, r25
    2854:	ff 27       	eor	r31, r31
    2856:	e0 53       	subi	r30, 0x30	; 48
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	99 27       	eor	r25, r25
    285c:	33 27       	eor	r19, r19
    285e:	ee 24       	eor	r14, r14
    2860:	ff 24       	eor	r15, r15
    2862:	a7 01       	movw	r20, r14
    2864:	e7 01       	movw	r28, r14
    2866:	05 90       	lpm	r0, Z+
    2868:	08 94       	sec
    286a:	07 94       	ror	r0
    286c:	28 f4       	brcc	.+10     	; 0x2878 <__ftoa_engine+0x80>
    286e:	36 0f       	add	r19, r22
    2870:	e7 1e       	adc	r14, r23
    2872:	f8 1e       	adc	r15, r24
    2874:	49 1f       	adc	r20, r25
    2876:	51 1d       	adc	r21, r1
    2878:	66 0f       	add	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	88 1f       	adc	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	06 94       	lsr	r0
    2882:	a1 f7       	brne	.-24     	; 0x286c <__ftoa_engine+0x74>
    2884:	05 90       	lpm	r0, Z+
    2886:	07 94       	ror	r0
    2888:	28 f4       	brcc	.+10     	; 0x2894 <__ftoa_engine+0x9c>
    288a:	e7 0e       	add	r14, r23
    288c:	f8 1e       	adc	r15, r24
    288e:	49 1f       	adc	r20, r25
    2890:	56 1f       	adc	r21, r22
    2892:	c1 1d       	adc	r28, r1
    2894:	77 0f       	add	r23, r23
    2896:	88 1f       	adc	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	66 1f       	adc	r22, r22
    289c:	06 94       	lsr	r0
    289e:	a1 f7       	brne	.-24     	; 0x2888 <__ftoa_engine+0x90>
    28a0:	05 90       	lpm	r0, Z+
    28a2:	07 94       	ror	r0
    28a4:	28 f4       	brcc	.+10     	; 0x28b0 <__ftoa_engine+0xb8>
    28a6:	f8 0e       	add	r15, r24
    28a8:	49 1f       	adc	r20, r25
    28aa:	56 1f       	adc	r21, r22
    28ac:	c7 1f       	adc	r28, r23
    28ae:	d1 1d       	adc	r29, r1
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	66 1f       	adc	r22, r22
    28b6:	77 1f       	adc	r23, r23
    28b8:	06 94       	lsr	r0
    28ba:	a1 f7       	brne	.-24     	; 0x28a4 <__ftoa_engine+0xac>
    28bc:	05 90       	lpm	r0, Z+
    28be:	07 94       	ror	r0
    28c0:	20 f4       	brcc	.+8      	; 0x28ca <__ftoa_engine+0xd2>
    28c2:	49 0f       	add	r20, r25
    28c4:	56 1f       	adc	r21, r22
    28c6:	c7 1f       	adc	r28, r23
    28c8:	d8 1f       	adc	r29, r24
    28ca:	99 0f       	add	r25, r25
    28cc:	66 1f       	adc	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	06 94       	lsr	r0
    28d4:	a9 f7       	brne	.-22     	; 0x28c0 <__ftoa_engine+0xc8>
    28d6:	84 91       	lpm	r24, Z
    28d8:	10 95       	com	r17
    28da:	17 70       	andi	r17, 0x07	; 7
    28dc:	41 f0       	breq	.+16     	; 0x28ee <__ftoa_engine+0xf6>
    28de:	d6 95       	lsr	r29
    28e0:	c7 95       	ror	r28
    28e2:	57 95       	ror	r21
    28e4:	47 95       	ror	r20
    28e6:	f7 94       	ror	r15
    28e8:	e7 94       	ror	r14
    28ea:	1a 95       	dec	r17
    28ec:	c1 f7       	brne	.-16     	; 0x28de <__ftoa_engine+0xe6>
    28ee:	e6 e7       	ldi	r30, 0x76	; 118
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	68 94       	set
    28f4:	15 90       	lpm	r1, Z+
    28f6:	15 91       	lpm	r17, Z+
    28f8:	35 91       	lpm	r19, Z+
    28fa:	65 91       	lpm	r22, Z+
    28fc:	95 91       	lpm	r25, Z+
    28fe:	05 90       	lpm	r0, Z+
    2900:	7f e2       	ldi	r23, 0x2F	; 47
    2902:	73 95       	inc	r23
    2904:	e1 18       	sub	r14, r1
    2906:	f1 0a       	sbc	r15, r17
    2908:	43 0b       	sbc	r20, r19
    290a:	56 0b       	sbc	r21, r22
    290c:	c9 0b       	sbc	r28, r25
    290e:	d0 09       	sbc	r29, r0
    2910:	c0 f7       	brcc	.-16     	; 0x2902 <__ftoa_engine+0x10a>
    2912:	e1 0c       	add	r14, r1
    2914:	f1 1e       	adc	r15, r17
    2916:	43 1f       	adc	r20, r19
    2918:	56 1f       	adc	r21, r22
    291a:	c9 1f       	adc	r28, r25
    291c:	d0 1d       	adc	r29, r0
    291e:	7e f4       	brtc	.+30     	; 0x293e <__ftoa_engine+0x146>
    2920:	70 33       	cpi	r23, 0x30	; 48
    2922:	11 f4       	brne	.+4      	; 0x2928 <__ftoa_engine+0x130>
    2924:	8a 95       	dec	r24
    2926:	e6 cf       	rjmp	.-52     	; 0x28f4 <__ftoa_engine+0xfc>
    2928:	e8 94       	clt
    292a:	01 50       	subi	r16, 0x01	; 1
    292c:	30 f0       	brcs	.+12     	; 0x293a <__ftoa_engine+0x142>
    292e:	08 0f       	add	r16, r24
    2930:	0a f4       	brpl	.+2      	; 0x2934 <__ftoa_engine+0x13c>
    2932:	00 27       	eor	r16, r16
    2934:	02 17       	cp	r16, r18
    2936:	08 f4       	brcc	.+2      	; 0x293a <__ftoa_engine+0x142>
    2938:	20 2f       	mov	r18, r16
    293a:	23 95       	inc	r18
    293c:	02 2f       	mov	r16, r18
    293e:	7a 33       	cpi	r23, 0x3A	; 58
    2940:	28 f0       	brcs	.+10     	; 0x294c <__ftoa_engine+0x154>
    2942:	79 e3       	ldi	r23, 0x39	; 57
    2944:	7d 93       	st	X+, r23
    2946:	2a 95       	dec	r18
    2948:	e9 f7       	brne	.-6      	; 0x2944 <__ftoa_engine+0x14c>
    294a:	10 c0       	rjmp	.+32     	; 0x296c <__ftoa_engine+0x174>
    294c:	7d 93       	st	X+, r23
    294e:	2a 95       	dec	r18
    2950:	89 f6       	brne	.-94     	; 0x28f4 <__ftoa_engine+0xfc>
    2952:	06 94       	lsr	r0
    2954:	97 95       	ror	r25
    2956:	67 95       	ror	r22
    2958:	37 95       	ror	r19
    295a:	17 95       	ror	r17
    295c:	17 94       	ror	r1
    295e:	e1 18       	sub	r14, r1
    2960:	f1 0a       	sbc	r15, r17
    2962:	43 0b       	sbc	r20, r19
    2964:	56 0b       	sbc	r21, r22
    2966:	c9 0b       	sbc	r28, r25
    2968:	d0 09       	sbc	r29, r0
    296a:	98 f0       	brcs	.+38     	; 0x2992 <__ftoa_engine+0x19a>
    296c:	23 95       	inc	r18
    296e:	7e 91       	ld	r23, -X
    2970:	73 95       	inc	r23
    2972:	7a 33       	cpi	r23, 0x3A	; 58
    2974:	08 f0       	brcs	.+2      	; 0x2978 <__ftoa_engine+0x180>
    2976:	70 e3       	ldi	r23, 0x30	; 48
    2978:	7c 93       	st	X, r23
    297a:	20 13       	cpse	r18, r16
    297c:	b8 f7       	brcc	.-18     	; 0x296c <__ftoa_engine+0x174>
    297e:	7e 91       	ld	r23, -X
    2980:	70 61       	ori	r23, 0x10	; 16
    2982:	7d 93       	st	X+, r23
    2984:	30 f0       	brcs	.+12     	; 0x2992 <__ftoa_engine+0x19a>
    2986:	83 95       	inc	r24
    2988:	71 e3       	ldi	r23, 0x31	; 49
    298a:	7d 93       	st	X+, r23
    298c:	70 e3       	ldi	r23, 0x30	; 48
    298e:	2a 95       	dec	r18
    2990:	e1 f7       	brne	.-8      	; 0x298a <__ftoa_engine+0x192>
    2992:	11 24       	eor	r1, r1
    2994:	ef 90       	pop	r14
    2996:	ff 90       	pop	r15
    2998:	0f 91       	pop	r16
    299a:	1f 91       	pop	r17
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	99 27       	eor	r25, r25
    29a2:	87 fd       	sbrc	r24, 7
    29a4:	90 95       	com	r25
    29a6:	08 95       	ret

000029a8 <strnlen_P>:
    29a8:	fc 01       	movw	r30, r24
    29aa:	05 90       	lpm	r0, Z+
    29ac:	61 50       	subi	r22, 0x01	; 1
    29ae:	70 40       	sbci	r23, 0x00	; 0
    29b0:	01 10       	cpse	r0, r1
    29b2:	d8 f7       	brcc	.-10     	; 0x29aa <strnlen_P+0x2>
    29b4:	80 95       	com	r24
    29b6:	90 95       	com	r25
    29b8:	8e 0f       	add	r24, r30
    29ba:	9f 1f       	adc	r25, r31
    29bc:	08 95       	ret

000029be <strnlen>:
    29be:	fc 01       	movw	r30, r24
    29c0:	61 50       	subi	r22, 0x01	; 1
    29c2:	70 40       	sbci	r23, 0x00	; 0
    29c4:	01 90       	ld	r0, Z+
    29c6:	01 10       	cpse	r0, r1
    29c8:	d8 f7       	brcc	.-10     	; 0x29c0 <strnlen+0x2>
    29ca:	80 95       	com	r24
    29cc:	90 95       	com	r25
    29ce:	8e 0f       	add	r24, r30
    29d0:	9f 1f       	adc	r25, r31
    29d2:	08 95       	ret

000029d4 <fputc>:
    29d4:	0f 93       	push	r16
    29d6:	1f 93       	push	r17
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	fb 01       	movw	r30, r22
    29de:	23 81       	ldd	r18, Z+3	; 0x03
    29e0:	21 fd       	sbrc	r18, 1
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <fputc+0x16>
    29e4:	8f ef       	ldi	r24, 0xFF	; 255
    29e6:	9f ef       	ldi	r25, 0xFF	; 255
    29e8:	2c c0       	rjmp	.+88     	; 0x2a42 <fputc+0x6e>
    29ea:	22 ff       	sbrs	r18, 2
    29ec:	16 c0       	rjmp	.+44     	; 0x2a1a <fputc+0x46>
    29ee:	46 81       	ldd	r20, Z+6	; 0x06
    29f0:	57 81       	ldd	r21, Z+7	; 0x07
    29f2:	24 81       	ldd	r18, Z+4	; 0x04
    29f4:	35 81       	ldd	r19, Z+5	; 0x05
    29f6:	42 17       	cp	r20, r18
    29f8:	53 07       	cpc	r21, r19
    29fa:	44 f4       	brge	.+16     	; 0x2a0c <fputc+0x38>
    29fc:	a0 81       	ld	r26, Z
    29fe:	b1 81       	ldd	r27, Z+1	; 0x01
    2a00:	9d 01       	movw	r18, r26
    2a02:	2f 5f       	subi	r18, 0xFF	; 255
    2a04:	3f 4f       	sbci	r19, 0xFF	; 255
    2a06:	31 83       	std	Z+1, r19	; 0x01
    2a08:	20 83       	st	Z, r18
    2a0a:	8c 93       	st	X, r24
    2a0c:	26 81       	ldd	r18, Z+6	; 0x06
    2a0e:	37 81       	ldd	r19, Z+7	; 0x07
    2a10:	2f 5f       	subi	r18, 0xFF	; 255
    2a12:	3f 4f       	sbci	r19, 0xFF	; 255
    2a14:	37 83       	std	Z+7, r19	; 0x07
    2a16:	26 83       	std	Z+6, r18	; 0x06
    2a18:	14 c0       	rjmp	.+40     	; 0x2a42 <fputc+0x6e>
    2a1a:	8b 01       	movw	r16, r22
    2a1c:	ec 01       	movw	r28, r24
    2a1e:	fb 01       	movw	r30, r22
    2a20:	00 84       	ldd	r0, Z+8	; 0x08
    2a22:	f1 85       	ldd	r31, Z+9	; 0x09
    2a24:	e0 2d       	mov	r30, r0
    2a26:	09 95       	icall
    2a28:	89 2b       	or	r24, r25
    2a2a:	e1 f6       	brne	.-72     	; 0x29e4 <fputc+0x10>
    2a2c:	d8 01       	movw	r26, r16
    2a2e:	16 96       	adiw	r26, 0x06	; 6
    2a30:	8d 91       	ld	r24, X+
    2a32:	9c 91       	ld	r25, X
    2a34:	17 97       	sbiw	r26, 0x07	; 7
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	17 96       	adiw	r26, 0x07	; 7
    2a3a:	9c 93       	st	X, r25
    2a3c:	8e 93       	st	-X, r24
    2a3e:	16 97       	sbiw	r26, 0x06	; 6
    2a40:	ce 01       	movw	r24, r28
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	08 95       	ret

00002a4c <__ultoa_invert>:
    2a4c:	fa 01       	movw	r30, r20
    2a4e:	aa 27       	eor	r26, r26
    2a50:	28 30       	cpi	r18, 0x08	; 8
    2a52:	51 f1       	breq	.+84     	; 0x2aa8 <__ultoa_invert+0x5c>
    2a54:	20 31       	cpi	r18, 0x10	; 16
    2a56:	81 f1       	breq	.+96     	; 0x2ab8 <__ultoa_invert+0x6c>
    2a58:	e8 94       	clt
    2a5a:	6f 93       	push	r22
    2a5c:	6e 7f       	andi	r22, 0xFE	; 254
    2a5e:	6e 5f       	subi	r22, 0xFE	; 254
    2a60:	7f 4f       	sbci	r23, 0xFF	; 255
    2a62:	8f 4f       	sbci	r24, 0xFF	; 255
    2a64:	9f 4f       	sbci	r25, 0xFF	; 255
    2a66:	af 4f       	sbci	r26, 0xFF	; 255
    2a68:	b1 e0       	ldi	r27, 0x01	; 1
    2a6a:	3e d0       	rcall	.+124    	; 0x2ae8 <__ultoa_invert+0x9c>
    2a6c:	b4 e0       	ldi	r27, 0x04	; 4
    2a6e:	3c d0       	rcall	.+120    	; 0x2ae8 <__ultoa_invert+0x9c>
    2a70:	67 0f       	add	r22, r23
    2a72:	78 1f       	adc	r23, r24
    2a74:	89 1f       	adc	r24, r25
    2a76:	9a 1f       	adc	r25, r26
    2a78:	a1 1d       	adc	r26, r1
    2a7a:	68 0f       	add	r22, r24
    2a7c:	79 1f       	adc	r23, r25
    2a7e:	8a 1f       	adc	r24, r26
    2a80:	91 1d       	adc	r25, r1
    2a82:	a1 1d       	adc	r26, r1
    2a84:	6a 0f       	add	r22, r26
    2a86:	71 1d       	adc	r23, r1
    2a88:	81 1d       	adc	r24, r1
    2a8a:	91 1d       	adc	r25, r1
    2a8c:	a1 1d       	adc	r26, r1
    2a8e:	20 d0       	rcall	.+64     	; 0x2ad0 <__ultoa_invert+0x84>
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <__ultoa_invert+0x48>
    2a92:	68 94       	set
    2a94:	3f 91       	pop	r19
    2a96:	2a e0       	ldi	r18, 0x0A	; 10
    2a98:	26 9f       	mul	r18, r22
    2a9a:	11 24       	eor	r1, r1
    2a9c:	30 19       	sub	r19, r0
    2a9e:	30 5d       	subi	r19, 0xD0	; 208
    2aa0:	31 93       	st	Z+, r19
    2aa2:	de f6       	brtc	.-74     	; 0x2a5a <__ultoa_invert+0xe>
    2aa4:	cf 01       	movw	r24, r30
    2aa6:	08 95       	ret
    2aa8:	46 2f       	mov	r20, r22
    2aaa:	47 70       	andi	r20, 0x07	; 7
    2aac:	40 5d       	subi	r20, 0xD0	; 208
    2aae:	41 93       	st	Z+, r20
    2ab0:	b3 e0       	ldi	r27, 0x03	; 3
    2ab2:	0f d0       	rcall	.+30     	; 0x2ad2 <__ultoa_invert+0x86>
    2ab4:	c9 f7       	brne	.-14     	; 0x2aa8 <__ultoa_invert+0x5c>
    2ab6:	f6 cf       	rjmp	.-20     	; 0x2aa4 <__ultoa_invert+0x58>
    2ab8:	46 2f       	mov	r20, r22
    2aba:	4f 70       	andi	r20, 0x0F	; 15
    2abc:	40 5d       	subi	r20, 0xD0	; 208
    2abe:	4a 33       	cpi	r20, 0x3A	; 58
    2ac0:	18 f0       	brcs	.+6      	; 0x2ac8 <__ultoa_invert+0x7c>
    2ac2:	49 5d       	subi	r20, 0xD9	; 217
    2ac4:	31 fd       	sbrc	r19, 1
    2ac6:	40 52       	subi	r20, 0x20	; 32
    2ac8:	41 93       	st	Z+, r20
    2aca:	02 d0       	rcall	.+4      	; 0x2ad0 <__ultoa_invert+0x84>
    2acc:	a9 f7       	brne	.-22     	; 0x2ab8 <__ultoa_invert+0x6c>
    2ace:	ea cf       	rjmp	.-44     	; 0x2aa4 <__ultoa_invert+0x58>
    2ad0:	b4 e0       	ldi	r27, 0x04	; 4
    2ad2:	a6 95       	lsr	r26
    2ad4:	97 95       	ror	r25
    2ad6:	87 95       	ror	r24
    2ad8:	77 95       	ror	r23
    2ada:	67 95       	ror	r22
    2adc:	ba 95       	dec	r27
    2ade:	c9 f7       	brne	.-14     	; 0x2ad2 <__ultoa_invert+0x86>
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	61 05       	cpc	r22, r1
    2ae4:	71 05       	cpc	r23, r1
    2ae6:	08 95       	ret
    2ae8:	9b 01       	movw	r18, r22
    2aea:	ac 01       	movw	r20, r24
    2aec:	0a 2e       	mov	r0, r26
    2aee:	06 94       	lsr	r0
    2af0:	57 95       	ror	r21
    2af2:	47 95       	ror	r20
    2af4:	37 95       	ror	r19
    2af6:	27 95       	ror	r18
    2af8:	ba 95       	dec	r27
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <__ultoa_invert+0xa2>
    2afc:	62 0f       	add	r22, r18
    2afe:	73 1f       	adc	r23, r19
    2b00:	84 1f       	adc	r24, r20
    2b02:	95 1f       	adc	r25, r21
    2b04:	a0 1d       	adc	r26, r0
    2b06:	08 95       	ret

00002b08 <__prologue_saves__>:
    2b08:	2f 92       	push	r2
    2b0a:	3f 92       	push	r3
    2b0c:	4f 92       	push	r4
    2b0e:	5f 92       	push	r5
    2b10:	6f 92       	push	r6
    2b12:	7f 92       	push	r7
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	ca 1b       	sub	r28, r26
    2b32:	db 0b       	sbc	r29, r27
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	09 94       	ijmp

00002b40 <__epilogue_restores__>:
    2b40:	2a 88       	ldd	r2, Y+18	; 0x12
    2b42:	39 88       	ldd	r3, Y+17	; 0x11
    2b44:	48 88       	ldd	r4, Y+16	; 0x10
    2b46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b52:	b9 84       	ldd	r11, Y+9	; 0x09
    2b54:	c8 84       	ldd	r12, Y+8	; 0x08
    2b56:	df 80       	ldd	r13, Y+7	; 0x07
    2b58:	ee 80       	ldd	r14, Y+6	; 0x06
    2b5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b60:	aa 81       	ldd	r26, Y+2	; 0x02
    2b62:	b9 81       	ldd	r27, Y+1	; 0x01
    2b64:	ce 0f       	add	r28, r30
    2b66:	d1 1d       	adc	r29, r1
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	ed 01       	movw	r28, r26
    2b74:	08 95       	ret

00002b76 <_exit>:
    2b76:	f8 94       	cli

00002b78 <__stop_program>:
    2b78:	ff cf       	rjmp	.-2      	; 0x2b78 <__stop_program>

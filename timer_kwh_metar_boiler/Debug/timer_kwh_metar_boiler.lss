
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00002e74  00002f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  008001c0  008001c0  00002fc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00003064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031c2  00000000  00000000  00003354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cb  00000000  00000000  00006516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002156  00000000  00000000  000075e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  00009738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c30  00000000  00000000  00009fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002861  00000000  00000000  0000abfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000d45d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_4>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_14>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 25 0f 	jmp	0x1e4a	; 0x1e4a <__vector_18>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__vector_20>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_21>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	9c 06       	cpc	r9, r28
      6a:	f5 06       	cpc	r15, r21
      6c:	22 07       	cpc	r18, r18
      6e:	c9 07       	cpc	r28, r25
      70:	b6 08       	sbc	r11, r6
      72:	d8 09       	sbc	r29, r8
      74:	f9 0a       	sbc	r15, r25

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <menu1_LCD_ispis+0x3c>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <lcd1602_send_byte+0x34>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <i2c_send_packet+0x8>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <__vector_21+0x14>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	11 e0       	ldi	r17, 0x01	; 1
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	e4 e7       	ldi	r30, 0x74	; 116
     184:	fe e2       	ldi	r31, 0x2E	; 46
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a0 3c       	cpi	r26, 0xC0	; 192
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	22 e0       	ldi	r18, 0x02	; 2
     194:	a0 ec       	ldi	r26, 0xC0	; 192
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a8 35       	cpi	r26, 0x58	; 88
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 0f 0b 	call	0x161e	; 0x161e <main>
     1a6:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <ADC_init>:


void ADC_init()
{
	
	PRR = 0;						//power reduction off
     1ae:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
     1b2:	80 ec       	ldi	r24, 0xC0	; 192
     1b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
     1b8:	8e ee       	ldi	r24, 0xEE	; 238
     1ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
     1be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
     1c2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ad_kanal>
     1c6:	08 95       	ret

000001c8 <__vector_21>:


/* TODO: u ISR-u neka bude samo flag, a obrada podataka izdvojeno, jer je ovo glup nacin, da racun radim u prekidnoj rutini */

ISR(ADC_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
	/*
	 * AD konverzija
	 * ISR okine kada je gotova konverzija
	 */
	isr_adc = 1;	//set flag
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>

}
     1da:	8f 91       	pop	r24
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <adc_read>:

void adc_read()
{
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
	
	if (isr_adc)
     1f6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
     1fa:	88 23       	and	r24, r24
     1fc:	09 f4       	brne	.+2      	; 0x200 <adc_read+0x1a>
     1fe:	85 c0       	rjmp	.+266    	; 0x30a <adc_read+0x124>
	{
		isr_adc = 0;	//reset flag
     200:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
	
	
		//upis ad konverzije oba kanala u odgovarajuce promenljive
		if(ad_kanal == 0)
     204:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ad_kanal>
     208:	81 11       	cpse	r24, r1
     20a:	09 c0       	rjmp	.+18     	; 0x21e <adc_read+0x38>
			adc_napon_raw = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
     20c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     210:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     214:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <adc_napon_raw+0x1>
     218:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <adc_napon_raw>
     21c:	0a c0       	rjmp	.+20     	; 0x232 <adc_read+0x4c>
		else if(ad_kanal == 1)
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	41 f4       	brne	.+16     	; 0x232 <adc_read+0x4c>
			adc_struja_raw = (uint16_t)ADC;
     222:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     226:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     22a:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <adc_struja_raw+0x1>
     22e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <adc_struja_raw>
	
		//npr: napon 1023 = 280V
		//     struja 1023 = 25A
		napon = adc_napon_raw/3.65;
     232:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <adc_napon_raw>
     236:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <adc_napon_raw+0x1>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatunsisf>
     242:	2a e9       	ldi	r18, 0x9A	; 154
     244:	39 e9       	ldi	r19, 0x99	; 153
     246:	49 e6       	ldi	r20, 0x69	; 105
     248:	50 e4       	ldi	r21, 0x40	; 64
     24a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divsf3>
     24e:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fixunssfsi>
     252:	6b 01       	movw	r12, r22
     254:	7c 01       	movw	r14, r24
     256:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <napon+0x1>
     25a:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <napon>
		struja = adc_struja_raw/40.92;
     25e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <adc_struja_raw>
     262:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <adc_struja_raw+0x1>
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatunsisf>
     26e:	24 e1       	ldi	r18, 0x14	; 20
     270:	3e ea       	ldi	r19, 0xAE	; 174
     272:	43 e2       	ldi	r20, 0x23	; 35
     274:	52 e4       	ldi	r21, 0x42	; 66
     276:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divsf3>
     27a:	4b 01       	movw	r8, r22
     27c:	5c 01       	movw	r10, r24
     27e:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <struja>
     282:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <struja+0x1>
     286:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <struja+0x2>
     28a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <struja+0x3>
		snaga = (napon * struja)/1000.0;	//kW
     28e:	b6 01       	movw	r22, r12
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatunsisf>
     298:	a5 01       	movw	r20, r10
     29a:	94 01       	movw	r18, r8
     29c:	0e 94 89 11 	call	0x2312	; 0x2312 <__mulsf3>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	4a e7       	ldi	r20, 0x7A	; 122
     2a6:	54 e4       	ldi	r21, 0x44	; 68
     2a8:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divsf3>
     2ac:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <snaga>
     2b0:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <snaga+0x1>
     2b4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <snaga+0x2>
     2b8:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <snaga+0x3>
		//snaga se integrali(sumira) svaki sekund u main-u cime se racuna elektricna energija
		
		/**************************************************************************************************************/
		ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 77       	andi	r24, 0x7F	; 127
     2c4:	80 83       	st	Z, r24
	
	
		ad_kanal++;			//inkrementiraj kanal
     2c6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ad_kanal>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <ad_kanal>
		if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	18 f0       	brcs	.+6      	; 0x2da <adc_read+0xf4>
			ad_kanal = 0;
     2d4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ad_kanal>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <adc_read+0xfe>
	


	
		//multipleksiranje ad ulaza; tj. promena ad kanala
		switch(ad_kanal)
     2da:	88 23       	and	r24, r24
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <adc_read+0xfe>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <adc_read+0x10a>
     2e2:	0e c0       	rjmp	.+28     	; 0x300 <adc_read+0x11a>
		{
			case 0:
			ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     2e4:	ec e7       	ldi	r30, 0x7C	; 124
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8c 7f       	andi	r24, 0xFC	; 252
     2ec:	80 83       	st	Z, r24
			break;
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <adc_read+0x11a>
		
			case 1:
			ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     2f0:	ec e7       	ldi	r30, 0x7C	; 124
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 83       	st	Z, r24
			ADMUX |= (0b1);
     2fa:	80 81       	ld	r24, Z
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	80 83       	st	Z, r24
		}
	
	
		//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala.
	
		ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     300:	ea e7       	ldi	r30, 0x7A	; 122
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	80 6c       	ori	r24, 0xC0	; 192
     308:	80 83       	st	Z, r24
		
	}
}
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	af 90       	pop	r10
     316:	9f 90       	pop	r9
     318:	8f 90       	pop	r8
     31a:	08 95       	ret

0000031c <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     31c:	f9 99       	sbic	0x1f, 1	; 31
     31e:	fe cf       	rjmp	.-4      	; 0x31c <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     320:	92 bd       	out	0x22, r25	; 34
     322:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     324:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     326:	80 b5       	in	r24, 0x20	; 32
}
     328:	08 95       	ret

0000032a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     32a:	f9 99       	sbic	0x1f, 1	; 31
     32c:	fe cf       	rjmp	.-4      	; 0x32a <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     32e:	92 bd       	out	0x22, r25	; 34
     330:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     332:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     334:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     336:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     338:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     33a:	78 94       	sei
     33c:	08 95       	ret

0000033e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     33e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     342:	88 e4       	ldi	r24, 0x48	; 72
     344:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     348:	08 95       	ret

0000034a <i2c_start_wait>:
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec eb       	ldi	r30, 0xBC	; 188
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	24 ea       	ldi	r18, 0xA4	; 164
     354:	a9 eb       	ldi	r26, 0xB9	; 185
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	cb eb       	ldi	r28, 0xBB	; 187
     35a:	d0 e0       	ldi	r29, 0x00	; 0
     35c:	34 e8       	ldi	r19, 0x84	; 132
     35e:	44 e9       	ldi	r20, 0x94	; 148
     360:	20 83       	st	Z, r18
     362:	90 81       	ld	r25, Z
     364:	99 23       	and	r25, r25
     366:	ec f7       	brge	.-6      	; 0x362 <i2c_start_wait+0x18>
     368:	9c 91       	ld	r25, X
     36a:	98 7f       	andi	r25, 0xF8	; 248
     36c:	98 30       	cpi	r25, 0x08	; 8
     36e:	11 f0       	breq	.+4      	; 0x374 <i2c_start_wait+0x2a>
     370:	90 31       	cpi	r25, 0x10	; 16
     372:	b1 f7       	brne	.-20     	; 0x360 <i2c_start_wait+0x16>
     374:	88 83       	st	Y, r24
     376:	30 83       	st	Z, r19
     378:	90 81       	ld	r25, Z
     37a:	99 23       	and	r25, r25
     37c:	ec f7       	brge	.-6      	; 0x378 <i2c_start_wait+0x2e>
     37e:	9c 91       	ld	r25, X
     380:	98 7f       	andi	r25, 0xF8	; 248
     382:	90 32       	cpi	r25, 0x20	; 32
     384:	11 f0       	breq	.+4      	; 0x38a <i2c_start_wait+0x40>
     386:	98 35       	cpi	r25, 0x58	; 88
     388:	29 f4       	brne	.+10     	; 0x394 <i2c_start_wait+0x4a>
     38a:	40 83       	st	Z, r20
     38c:	90 81       	ld	r25, Z
     38e:	94 fd       	sbrc	r25, 4
     390:	fd cf       	rjmp	.-6      	; 0x38c <i2c_start_wait+0x42>
     392:	e6 cf       	rjmp	.-52     	; 0x360 <i2c_start_wait+0x16>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <i2c_stop>:
     39a:	84 e9       	ldi	r24, 0x94	; 148
     39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a0:	ec eb       	ldi	r30, 0xBC	; 188
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	84 fd       	sbrc	r24, 4
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <i2c_stop+0xa>
     3aa:	08 95       	ret

000003ac <i2c_write>:
     3ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3b0:	84 e8       	ldi	r24, 0x84	; 132
     3b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3b6:	ec eb       	ldi	r30, 0xBC	; 188
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	88 23       	and	r24, r24
     3be:	ec f7       	brge	.-6      	; 0x3ba <i2c_write+0xe>
     3c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3c4:	98 7f       	andi	r25, 0xF8	; 248
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	98 32       	cpi	r25, 0x28	; 40
     3ca:	09 f4       	brne	.+2      	; 0x3ce <i2c_write+0x22>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3d0:	84 e8       	ldi	r24, 0x84	; 132
     3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     3d6:	ec eb       	ldi	r30, 0xBC	; 188
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	88 23       	and	r24, r24
     3de:	ec f7       	brge	.-6      	; 0x3da <i2c_readNak+0xa>
	
    return TWDR;
     3e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     3e4:	08 95       	ret

000003e6 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     3e6:	cf 93       	push	r28
     3e8:	c8 2f       	mov	r28, r24
     3ea:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     3ec:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
	i2c_write(value);                      // write 
     3f0:	8c 2f       	mov	r24, r28
     3f2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     3f6:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	fc 01       	movw	r30, r24
     408:	06 2f       	mov	r16, r22
     40a:	17 2f       	mov	r17, r23
     40c:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     40e:	21 11       	cpse	r18, r1
     410:	28 c0       	rjmp	.+80     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		(*sat)++;
     412:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     414:	99 ee       	ldi	r25, 0xE9	; 233
     416:	98 0f       	add	r25, r24
     418:	96 30       	cpi	r25, 0x06	; 6
     41a:	18 f0       	brcs	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 83       	st	Z, r24
     420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     422:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     424:	80 81       	ld	r24, Z
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	89 e1       	ldi	r24, 0x19	; 25
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	1f 93       	push	r17
     434:	0f 93       	push	r16
     436:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     43a:	88 81       	ld	r24, Y
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     444:	80 2f       	mov	r24, r16
     446:	91 2f       	mov	r25, r17
     448:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	88 81       	ld	r24, Y
     450:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	28 c0       	rjmp	.+80     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}
	else if (inc_dec == UMANJI)
     462:	21 30       	cpi	r18, 0x01	; 1
     464:	31 f5       	brne	.+76     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{
		(*sat)--;
     466:	80 81       	ld	r24, Z
     468:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     46a:	8a 3f       	cpi	r24, 0xFA	; 250
     46c:	10 f4       	brcc	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     46e:	80 83       	st	Z, r24
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     472:	87 e1       	ldi	r24, 0x17	; 23
     474:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     476:	80 81       	ld	r24, Z
     478:	1f 92       	push	r1
     47a:	8f 93       	push	r24
     47c:	89 e1       	ldi	r24, 0x19	; 25
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	1f 93       	push	r17
     486:	0f 93       	push	r16
     488:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     48c:	88 81       	ld	r24, Y
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	81 50       	subi	r24, 0x01	; 1
     492:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     496:	80 2f       	mov	r24, r16
     498:	91 2f       	mov	r25, r17
     49a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	88 81       	ld	r24, Y
     4a2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
	}
	
	
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	fc 01       	movw	r30, r24
     4c6:	06 2f       	mov	r16, r22
     4c8:	17 2f       	mov	r17, r23
     4ca:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     4cc:	21 11       	cpse	r18, r1
     4ce:	28 c0       	rjmp	.+80     	; 0x520 <minuti_ispis+0x64>
	{
		(*minut)++;
     4d0:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     4d2:	95 ec       	ldi	r25, 0xC5	; 197
     4d4:	98 0f       	add	r25, r24
     4d6:	95 30       	cpi	r25, 0x05	; 5
     4d8:	18 f0       	brcs	.+6      	; 0x4e0 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	80 83       	st	Z, r24
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     4e0:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     4e2:	80 81       	ld	r24, Z
     4e4:	1f 92       	push	r1
     4e6:	8f 93       	push	r24
     4e8:	89 e1       	ldi	r24, 0x19	; 25
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	1f 93       	push	r17
     4f2:	0f 93       	push	r16
     4f4:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4f8:	88 81       	ld	r24, Y
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	81 50       	subi	r24, 0x01	; 1
     4fe:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     502:	80 2f       	mov	r24, r16
     504:	91 2f       	mov	r25, r17
     506:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	88 81       	ld	r24, Y
     50e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	28 c0       	rjmp	.+80     	; 0x570 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     520:	21 30       	cpi	r18, 0x01	; 1
     522:	31 f5       	brne	.+76     	; 0x570 <minuti_ispis+0xb4>
	{
		(*minut)--;
     524:	80 81       	ld	r24, Z
     526:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     528:	8a 3f       	cpi	r24, 0xFA	; 250
     52a:	10 f4       	brcc	.+4      	; 0x530 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     52c:	80 83       	st	Z, r24
     52e:	02 c0       	rjmp	.+4      	; 0x534 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     530:	8b e3       	ldi	r24, 0x3B	; 59
     532:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     534:	80 81       	ld	r24, Z
     536:	1f 92       	push	r1
     538:	8f 93       	push	r24
     53a:	89 e1       	ldi	r24, 0x19	; 25
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	1f 93       	push	r17
     544:	0f 93       	push	r16
     546:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     54a:	88 81       	ld	r24, Y
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     554:	80 2f       	mov	r24, r16
     556:	91 2f       	mov	r25, r17
     558:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	88 81       	ld	r24, Y
     560:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
	}
	
	
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	08 95       	ret

0000057a <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	fc 01       	movw	r30, r24
     584:	06 2f       	mov	r16, r22
     586:	17 2f       	mov	r17, r23
     588:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     58a:	21 11       	cpse	r18, r1
     58c:	28 c0       	rjmp	.+80     	; 0x5de <sekundi_ispis+0x64>
	{
		(*sekund)++;
     58e:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     590:	95 ec       	ldi	r25, 0xC5	; 197
     592:	98 0f       	add	r25, r24
     594:	95 30       	cpi	r25, 0x05	; 5
     596:	18 f0       	brcs	.+6      	; 0x59e <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 83       	st	Z, r24
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     59e:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     5a0:	80 81       	ld	r24, Z
     5a2:	1f 92       	push	r1
     5a4:	8f 93       	push	r24
     5a6:	89 e1       	ldi	r24, 0x19	; 25
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	1f 93       	push	r17
     5b0:	0f 93       	push	r16
     5b2:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5b6:	88 81       	ld	r24, Y
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	81 50       	subi	r24, 0x01	; 1
     5bc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     5c0:	80 2f       	mov	r24, r16
     5c2:	91 2f       	mov	r25, r17
     5c4:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	88 81       	ld	r24, Y
     5cc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	28 c0       	rjmp	.+80     	; 0x62e <sekundi_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     5de:	21 30       	cpi	r18, 0x01	; 1
     5e0:	31 f5       	brne	.+76     	; 0x62e <sekundi_ispis+0xb4>
	{
		(*sekund)--;
     5e2:	80 81       	ld	r24, Z
     5e4:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     5e6:	8a 3f       	cpi	r24, 0xFA	; 250
     5e8:	10 f4       	brcc	.+4      	; 0x5ee <sekundi_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     5ea:	80 83       	st	Z, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <sekundi_ispis+0x78>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     5f2:	80 81       	ld	r24, Z
     5f4:	1f 92       	push	r1
     5f6:	8f 93       	push	r24
     5f8:	89 e1       	ldi	r24, 0x19	; 25
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	1f 93       	push	r17
     602:	0f 93       	push	r16
     604:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     608:	88 81       	ld	r24, Y
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     612:	80 2f       	mov	r24, r16
     614:	91 2f       	mov	r25, r17
     616:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	88 81       	ld	r24, Y
     61e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
	}
	
	
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	08 95       	ret

00000638 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
     63c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     640:	84 60       	ori	r24, 0x04	; 4
     642:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     646:	6e e4       	ldi	r22, 0x4E	; 78
     648:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     64c:	87 ec       	ldi	r24, 0xC7	; 199
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <putnibble+0x18>
     654:	00 c0       	rjmp	.+0      	; 0x656 <putnibble+0x1e>
     656:	00 00       	nop
     658:	c2 95       	swap	r28
     65a:	c0 7f       	andi	r28, 0xF0	; 240
     65c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     660:	6e e4       	ldi	r22, 0x4E	; 78
     662:	8c 2b       	or	r24, r28
     664:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     668:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     66c:	8b 7f       	andi	r24, 0xFB	; 251
     66e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     672:	6e e4       	ldi	r22, 0x4E	; 78
     674:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     678:	87 ec       	ldi	r24, 0xC7	; 199
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <putnibble+0x44>
     680:	00 c0       	rjmp	.+0      	; 0x682 <putnibble+0x4a>
     682:	00 00       	nop
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <lcd1602_send_byte>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	c8 2f       	mov	r28, r24
     68e:	d8 2f       	mov	r29, r24
     690:	d2 95       	swap	r29
     692:	df 70       	andi	r29, 0x0F	; 15
     694:	61 11       	cpse	r22, r1
     696:	09 c0       	rjmp	.+18     	; 0x6aa <lcd1602_send_byte+0x22>
     698:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     69c:	8e 7f       	andi	r24, 0xFE	; 254
     69e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     6a2:	6e e4       	ldi	r22, 0x4E	; 78
     6a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <lcd1602_send_byte+0x32>
     6aa:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     6ae:	81 60       	ori	r24, 0x01	; 1
     6b0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     6b4:	6e e4       	ldi	r22, 0x4E	; 78
     6b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6ba:	8d 2f       	mov	r24, r29
     6bc:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6c0:	8c 2f       	mov	r24, r28
     6c2:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <lcd1602_send_char>:
     6cc:	cf 93       	push	r28
     6ce:	c8 2f       	mov	r28, r24
     6d0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     6da:	6e e4       	ldi	r22, 0x4E	; 78
     6dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6e0:	8c 2f       	mov	r24, r28
     6e2:	82 95       	swap	r24
     6e4:	8f 70       	andi	r24, 0x0F	; 15
     6e6:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6ea:	8c 2f       	mov	r24, r28
     6ec:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <lcd1602_init>:
     6f4:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <led_pin>
     6f8:	8f e5       	ldi	r24, 0x5F	; 95
     6fa:	9a ee       	ldi	r25, 0xEA	; 234
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <lcd1602_init+0x8>
     700:	00 c0       	rjmp	.+0      	; 0x702 <lcd1602_init+0xe>
     702:	00 00       	nop
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     70a:	8f e7       	ldi	r24, 0x7F	; 127
     70c:	9e e3       	ldi	r25, 0x3E	; 62
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <lcd1602_init+0x1a>
     712:	00 c0       	rjmp	.+0      	; 0x714 <lcd1602_init+0x20>
     714:	00 00       	nop
     716:	83 e0       	ldi	r24, 0x03	; 3
     718:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     71c:	8f e8       	ldi	r24, 0x8F	; 143
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <lcd1602_init+0x2c>
     724:	00 c0       	rjmp	.+0      	; 0x726 <lcd1602_init+0x32>
     726:	00 00       	nop
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     72e:	8f e9       	ldi	r24, 0x9F	; 159
     730:	9f e0       	ldi	r25, 0x0F	; 15
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <lcd1602_init+0x3e>
     736:	00 c0       	rjmp	.+0      	; 0x738 <lcd1602_init+0x44>
     738:	00 00       	nop
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     740:	8f e9       	ldi	r24, 0x9F	; 159
     742:	9f e0       	ldi	r25, 0x0F	; 15
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <lcd1602_init+0x50>
     748:	00 c0       	rjmp	.+0      	; 0x74a <lcd1602_init+0x56>
     74a:	00 00       	nop
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	88 e2       	ldi	r24, 0x28	; 40
     750:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     754:	8f e9       	ldi	r24, 0x9F	; 159
     756:	9f e0       	ldi	r25, 0x0F	; 15
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <lcd1602_init+0x64>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <lcd1602_init+0x6a>
     75e:	00 00       	nop
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	8c e0       	ldi	r24, 0x0C	; 12
     764:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     768:	8f e9       	ldi	r24, 0x9F	; 159
     76a:	9f e0       	ldi	r25, 0x0F	; 15
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <lcd1602_init+0x78>
     770:	00 c0       	rjmp	.+0      	; 0x772 <lcd1602_init+0x7e>
     772:	00 00       	nop
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	86 e0       	ldi	r24, 0x06	; 6
     778:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     77c:	8f e9       	ldi	r24, 0x9F	; 159
     77e:	9f e0       	ldi	r25, 0x0F	; 15
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <lcd1602_init+0x8c>
     784:	00 c0       	rjmp	.+0      	; 0x786 <lcd1602_init+0x92>
     786:	00 00       	nop
     788:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     78c:	88 60       	ori	r24, 0x08	; 8
     78e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     792:	6e e4       	ldi	r22, 0x4E	; 78
     794:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     798:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <led_pin>
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <led_pin>
     7a2:	6e e4       	ldi	r22, 0x4E	; 78
     7a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     7a8:	08 95       	ret

000007aa <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     7aa:	90 e4       	ldi	r25, 0x40	; 64
     7ac:	69 9f       	mul	r22, r25
     7ae:	80 0d       	add	r24, r0
     7b0:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	80 68       	ori	r24, 0x80	; 128
     7b6:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7ba:	08 95       	ret

000007bc <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7c4:	80 81       	ld	r24, Z
     7c6:	88 23       	and	r24, r24
     7c8:	59 f0       	breq	.+22     	; 0x7e0 <lcd1602_send_string+0x24>
     7ca:	8f 01       	movw	r16, r30
     7cc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     7ce:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd1602_send_char>
		i++;
     7d2:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7d4:	f8 01       	movw	r30, r16
     7d6:	ec 0f       	add	r30, r28
     7d8:	f1 1d       	adc	r31, r1
     7da:	80 81       	ld	r24, Z
     7dc:	81 11       	cpse	r24, r1
     7de:	f7 cf       	rjmp	.-18     	; 0x7ce <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret

000007e8 <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     7e8:	88 23       	and	r24, r24
     7ea:	29 f0       	breq	.+10     	; 0x7f6 <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);	//blink on
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	8f e0       	ldi	r24, 0x0F	; 15
     7f0:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7f4:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);	//blink off
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	8c e0       	ldi	r24, 0x0C	; 12
     7fa:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7fe:	08 95       	ret

00000800 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     800:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     802:	dc 01       	movw	r26, r24
     804:	12 96       	adiw	r26, 0x02	; 2
     806:	2c 91       	ld	r18, X
     808:	12 97       	sbiw	r26, 0x02	; 2
     80a:	54 e6       	ldi	r21, 0x64	; 100
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	8c 91       	ld	r24, X
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	52 9f       	mul	r21, r18
     814:	80 0d       	add	r24, r0
     816:	91 1d       	adc	r25, r1
     818:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     81a:	db 01       	movw	r26, r22
     81c:	12 96       	adiw	r26, 0x02	; 2
     81e:	2c 91       	ld	r18, X
     820:	12 97       	sbiw	r26, 0x02	; 2
     822:	11 96       	adiw	r26, 0x01	; 1
     824:	6c 91       	ld	r22, X
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	52 9f       	mul	r21, r18
     82a:	60 0d       	add	r22, r0
     82c:	71 1d       	adc	r23, r1
     82e:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     830:	42 81       	ldd	r20, Z+2	; 0x02
     832:	21 81       	ldd	r18, Z+1	; 0x01
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	54 9f       	mul	r21, r20
     838:	20 0d       	add	r18, r0
     83a:	31 1d       	adc	r19, r1
     83c:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     83e:	86 17       	cp	r24, r22
     840:	97 07       	cpc	r25, r23
     842:	68 f0       	brcs	.+26     	; 0x85e <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     844:	28 17       	cp	r18, r24
     846:	39 07       	cpc	r19, r25
     848:	20 f0       	brcs	.+8      	; 0x852 <period_paljenja+0x52>
     84a:	28 33       	cpi	r18, 0x38	; 56
     84c:	b9 e0       	ldi	r27, 0x09	; 9
     84e:	3b 07       	cpc	r19, r27
     850:	78 f0       	brcs	.+30     	; 0x870 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	26 17       	cp	r18, r22
     856:	37 07       	cpc	r19, r23
     858:	70 f0       	brcs	.+28     	; 0x876 <period_paljenja+0x76>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	40 f0       	brcs	.+16     	; 0x874 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	26 17       	cp	r18, r22
     868:	37 07       	cpc	r19, r23
     86a:	28 f0       	brcs	.+10     	; 0x876 <period_paljenja+0x76>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     874:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     876:	08 95       	ret

00000878 <eeprom_zastita>:

uint8_t eeprom_zastita(Time_date *paljenje, Time_date *gasenje, Time_date *jednk_paljenje, Time_date *jednok_gasenje)
{
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	8c 01       	movw	r16, r24
     882:	eb 01       	movw	r28, r22
     884:	f9 01       	movw	r30, r18
	uint8_t errCode = 0;
	
	/* zastita za glavno paljenje *****************/
	if (paljenje->hr > 23 || paljenje->hr < 0)
     886:	dc 01       	movw	r26, r24
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	8c 91       	ld	r24, X
     88c:	12 97       	sbiw	r26, 0x02	; 2
     88e:	88 31       	cpi	r24, 0x18	; 24
     890:	28 f0       	brcs	.+10     	; 0x89c <eeprom_zastita+0x24>
	{
		errCode = 1;
		paljenje->hr = 23;
     892:	87 e1       	ldi	r24, 0x17	; 23
     894:	12 96       	adiw	r26, 0x02	; 2
     896:	8c 93       	st	X, r24
	uint8_t errCode = 0;
	
	/* zastita za glavno paljenje *****************/
	if (paljenje->hr > 23 || paljenje->hr < 0)
	{
		errCode = 1;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	01 c0       	rjmp	.+2      	; 0x89e <eeprom_zastita+0x26>
	
}

uint8_t eeprom_zastita(Time_date *paljenje, Time_date *gasenje, Time_date *jednk_paljenje, Time_date *jednok_gasenje)
{
	uint8_t errCode = 0;
     89c:	80 e0       	ldi	r24, 0x00	; 0
	if (paljenje->hr > 23 || paljenje->hr < 0)
	{
		errCode = 1;
		paljenje->hr = 23;
	}
	if (paljenje->min > 59 || paljenje->min < 0)
     89e:	d8 01       	movw	r26, r16
     8a0:	11 96       	adiw	r26, 0x01	; 1
     8a2:	9c 91       	ld	r25, X
     8a4:	11 97       	sbiw	r26, 0x01	; 1
     8a6:	9c 33       	cpi	r25, 0x3C	; 60
     8a8:	18 f0       	brcs	.+6      	; 0x8b0 <eeprom_zastita+0x38>
	{
		errCode = 1;
		paljenje->min = 0;
     8aa:	11 96       	adiw	r26, 0x01	; 1
     8ac:	1c 92       	st	X, r1
		errCode = 1;
		paljenje->hr = 23;
	}
	if (paljenje->min > 59 || paljenje->min < 0)
	{
		errCode = 1;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
		paljenje->min = 0;
	}
	
	/* zastita za glavno gasenje *****************/
	if (gasenje->hr > 23 || gasenje->hr < 0)
     8b0:	9a 81       	ldd	r25, Y+2	; 0x02
     8b2:	98 31       	cpi	r25, 0x18	; 24
     8b4:	18 f0       	brcs	.+6      	; 0x8bc <eeprom_zastita+0x44>
	{
		errCode = 1;
		gasenje->hr = 6;
     8b6:	86 e0       	ldi	r24, 0x06	; 6
     8b8:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	/* zastita za glavno gasenje *****************/
	if (gasenje->hr > 23 || gasenje->hr < 0)
	{
		errCode = 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
		gasenje->hr = 6;
	}
	if (gasenje->min > 59 || gasenje->min < 0)
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	9c 33       	cpi	r25, 0x3C	; 60
     8c0:	18 f0       	brcs	.+6      	; 0x8c8 <eeprom_zastita+0x50>
	{
		errCode = 1;
		gasenje->min = 30;
     8c2:	8e e1       	ldi	r24, 0x1E	; 30
     8c4:	89 83       	std	Y+1, r24	; 0x01
		errCode = 1;
		gasenje->hr = 6;
	}
	if (gasenje->min > 59 || gasenje->min < 0)
	{
		errCode = 1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
		gasenje->min = 30;
	}
	
	/* zastita za jednokratno paljenje *****************/
	if (jednk_paljenje->hr > 23 || jednk_paljenje->hr < 0)
     8c8:	da 01       	movw	r26, r20
     8ca:	12 96       	adiw	r26, 0x02	; 2
     8cc:	9c 91       	ld	r25, X
     8ce:	12 97       	sbiw	r26, 0x02	; 2
     8d0:	98 31       	cpi	r25, 0x18	; 24
     8d2:	20 f0       	brcs	.+8      	; 0x8dc <eeprom_zastita+0x64>
	{
		errCode = 1;
		jednk_paljenje->hr = 14;
     8d4:	8e e0       	ldi	r24, 0x0E	; 14
     8d6:	12 96       	adiw	r26, 0x02	; 2
     8d8:	8c 93       	st	X, r24
	}
	
	/* zastita za jednokratno paljenje *****************/
	if (jednk_paljenje->hr > 23 || jednk_paljenje->hr < 0)
	{
		errCode = 1;
     8da:	81 e0       	ldi	r24, 0x01	; 1
		jednk_paljenje->hr = 14;
	}
	if (jednk_paljenje->min > 59 || jednk_paljenje->min < 0)
     8dc:	da 01       	movw	r26, r20
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	9c 91       	ld	r25, X
     8e2:	11 97       	sbiw	r26, 0x01	; 1
     8e4:	9c 33       	cpi	r25, 0x3C	; 60
     8e6:	18 f0       	brcs	.+6      	; 0x8ee <eeprom_zastita+0x76>
	{
		errCode = 1;
		jednk_paljenje->min = 0;
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	1c 92       	st	X, r1
		errCode = 1;
		jednk_paljenje->hr = 14;
	}
	if (jednk_paljenje->min > 59 || jednk_paljenje->min < 0)
	{
		errCode = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
		jednk_paljenje->min = 0;
	}
	
	/* zastita za jednokratno gasenje *****************/
	if (jednok_gasenje->hr > 23 || jednok_gasenje->hr < 0)
     8ee:	92 81       	ldd	r25, Z+2	; 0x02
     8f0:	98 31       	cpi	r25, 0x18	; 24
     8f2:	18 f0       	brcs	.+6      	; 0x8fa <eeprom_zastita+0x82>
	{
		errCode = 1;
		jednok_gasenje->hr = 15;
     8f4:	8f e0       	ldi	r24, 0x0F	; 15
     8f6:	82 83       	std	Z+2, r24	; 0x02
	}
	
	/* zastita za jednokratno gasenje *****************/
	if (jednok_gasenje->hr > 23 || jednok_gasenje->hr < 0)
	{
		errCode = 1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
		jednok_gasenje->hr = 15;
	}
	if (jednok_gasenje->min > 59 || jednok_gasenje->min < 0)
     8fa:	91 81       	ldd	r25, Z+1	; 0x01
     8fc:	9c 33       	cpi	r25, 0x3C	; 60
     8fe:	10 f0       	brcs	.+4      	; 0x904 <__stack+0x5>
	{
		errCode = 1;
		jednok_gasenje->min = 0;
     900:	11 82       	std	Z+1, r1	; 0x01
		errCode = 1;
		jednok_gasenje->hr = 15;
	}
	if (jednok_gasenje->min > 59 || jednok_gasenje->min < 0)
	{
		errCode = 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
		jednok_gasenje->min = 0;
	}
	
	return errCode;		//obavesti ako je doslo do odstupanja od ocekivanih citanja, sto verovatnu ukazuje na gresku pri pisanju u eeprom, ili moguci otkaz eeproma
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <displ1_LCD_ispis>:


void displ1_LCD_ispis()
{
	/*izbegao sam celear-ovanje ekrana koje izaziva treperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
	lcd1602_goto_xy(0,0);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("    ");
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     91e:	8d e0       	ldi	r24, 0x0D	; 13
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("    ");
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(0,1);
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     936:	86 e0       	ldi	r24, 0x06	; 6
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     93e:	e5 e4       	ldi	r30, 0x45	; 69
     940:	f2 e0       	ldi	r31, 0x02	; 2
     942:	81 81       	ldd	r24, Z+1	; 0x01
     944:	1f 92       	push	r1
     946:	8f 93       	push	r24
     948:	82 81       	ldd	r24, Z+2	; 0x02
     94a:	1f 92       	push	r1
     94c:	8f 93       	push	r24
     94e:	e3 e3       	ldi	r30, 0x33	; 51
     950:	f2 e0       	ldi	r31, 0x02	; 2
     952:	81 81       	ldd	r24, Z+1	; 0x01
     954:	1f 92       	push	r1
     956:	8f 93       	push	r24
     958:	82 81       	ldd	r24, Z+2	; 0x02
     95a:	1f 92       	push	r1
     95c:	8f 93       	push	r24
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	8d e0       	ldi	r24, 0x0D	; 13
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
	lcd1602_send_string(bafer);
     972:	8d e0       	ldi	r24, 0x0D	; 13
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("  ");
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
}
     982:	8d b7       	in	r24, 0x3d	; 61
     984:	9e b7       	in	r25, 0x3e	; 62
     986:	0c 96       	adiw	r24, 0x0c	; 12
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	9e bf       	out	0x3e, r25	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	8d bf       	out	0x3d, r24	; 61
     992:	08 95       	ret

00000994 <menu1_LCD_ispis>:

void menu1_LCD_ispis()
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
	int pomocna = kursor_vert;
     998:	c0 91 dc 01 	lds	r28, 0x01DC	; 0x8001dc <kursor_vert>
     99c:	0c 2e       	mov	r0, r28
     99e:	00 0c       	add	r0, r0
     9a0:	dd 0b       	sbc	r29, r29
	
	lcd1602_goto_xy(0, 0);
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     9aa:	86 e2       	ldi	r24, 0x26	; 38
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(" ");	//prazno polje ispod ">"
     9ba:	87 e0       	ldi	r24, 0x07	; 7
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>

	lcd1602_goto_xy(1,0);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(menu1_txt[kursor_vert]);
     9ca:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     9ce:	20 e1       	ldi	r18, 0x10	; 16
     9d0:	82 02       	muls	r24, r18
     9d2:	c0 01       	movw	r24, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	81 58       	subi	r24, 0x81	; 129
     9d8:	9e 4f       	sbci	r25, 0xFE	; 254
     9da:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	if (kursor_vert == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     9de:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     9e2:	81 11       	cpse	r24, r1
     9e4:	15 c0       	rjmp	.+42     	; 0xa10 <menu1_LCD_ispis+0x7c>
	{
		if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     9e6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <jednok_on_off>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	49 f4       	brne	.+18     	; 0xa00 <menu1_LCD_ispis+0x6c>
		{
			lcd1602_goto_xy(12,0);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	8c e0       	ldi	r24, 0x0C	; 12
     9f2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     9f6:	8e e1       	ldi	r24, 0x1E	; 30
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <menu1_LCD_ispis+0x7c>
		}
		else					//ako je off ispisi <OF> pored JEDNOKRATNO
		{
			lcd1602_goto_xy(12,0);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	8c e0       	ldi	r24, 0x0C	; 12
     a04:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     a08:	83 e2       	ldi	r24, 0x23	; 35
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		}
	}
	if (kursor_vert == KURSOR_BROJILO)			//brojilo na prvoj liniji
     a10:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     a14:	83 30       	cpi	r24, 0x03	; 3
     a16:	a9 f4       	brne	.+42     	; 0xa42 <menu1_LCD_ispis+0xae>
	{
		if(brojilo_on_off)		//ubaci promenljivu i upis u eeprom
     a18:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <brojilo_on_off>
     a1c:	88 23       	and	r24, r24
     a1e:	49 f0       	breq	.+18     	; 0xa32 <menu1_LCD_ispis+0x9e>
		{
			lcd1602_goto_xy(12,0);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	8c e0       	ldi	r24, 0x0C	; 12
     a24:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     a28:	8e e1       	ldi	r24, 0x1E	; 30
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <menu1_LCD_ispis+0xae>
		}
		else
		{
			lcd1602_goto_xy(12,0);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	8c e0       	ldi	r24, 0x0C	; 12
     a36:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     a3a:	83 e2       	ldi	r24, 0x23	; 35
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		}
	}
	
	
	lcd1602_goto_xy(1,1);
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	
	pomocna = (pomocna==KURSOR_MENU1_MAX) ? -1 : pomocna;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     a4a:	c3 30       	cpi	r28, 0x03	; 3
     a4c:	d1 05       	cpc	r29, r1
     a4e:	e9 f1       	breq	.+122    	; 0xaca <menu1_LCD_ispis+0x136>
	lcd1602_send_string(menu1_txt[pomocna + 1]);
     a50:	ce 01       	movw	r24, r28
     a52:	82 95       	swap	r24
     a54:	92 95       	swap	r25
     a56:	90 7f       	andi	r25, 0xF0	; 240
     a58:	98 27       	eor	r25, r24
     a5a:	80 7f       	andi	r24, 0xF0	; 240
     a5c:	98 27       	eor	r25, r24
     a5e:	81 57       	subi	r24, 0x71	; 113
     a60:	9e 4f       	sbci	r25, 0xFE	; 254
     a62:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	if ( (pomocna+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     a66:	cf 3f       	cpi	r28, 0xFF	; 255
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	d8 07       	cpc	r29, r24
     a6c:	b1 f4       	brne	.+44     	; 0xa9a <menu1_LCD_ispis+0x106>
	{
		if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     a6e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <jednok_on_off>
     a72:	81 30       	cpi	r24, 0x01	; 1
     a74:	49 f4       	brne	.+18     	; 0xa88 <menu1_LCD_ispis+0xf4>
		{
			lcd1602_goto_xy(12,1);
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	8c e0       	ldi	r24, 0x0C	; 12
     a7a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     a7e:	8e e1       	ldi	r24, 0x1E	; 30
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     a86:	26 c0       	rjmp	.+76     	; 0xad4 <menu1_LCD_ispis+0x140>
		}
		else					//ako je off ispisi <OF> pored JEDNOKRATNO
		{
			lcd1602_goto_xy(12,1);
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	8c e0       	ldi	r24, 0x0C	; 12
     a8c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     a90:	83 e2       	ldi	r24, 0x23	; 35
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     a98:	1d c0       	rjmp	.+58     	; 0xad4 <menu1_LCD_ispis+0x140>
		}
	}
	if ( (pomocna+1) == KURSOR_BROJILO)			//brojilo na drugoj liniji, sa wrap-around-om
     a9a:	22 97       	sbiw	r28, 0x02	; 2
     a9c:	d9 f4       	brne	.+54     	; 0xad4 <menu1_LCD_ispis+0x140>
	{
		if (brojilo_on_off)					
     a9e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <brojilo_on_off>
     aa2:	88 23       	and	r24, r24
     aa4:	49 f0       	breq	.+18     	; 0xab8 <menu1_LCD_ispis+0x124>
		{
			lcd1602_goto_xy(12,1);
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	8c e0       	ldi	r24, 0x0C	; 12
     aaa:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     ab6:	0e c0       	rjmp	.+28     	; 0xad4 <menu1_LCD_ispis+0x140>
		}
		else					//ako je off ispisi <OF> pored brojilo
		{
			lcd1602_goto_xy(12,1);
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	8c e0       	ldi	r24, 0x0C	; 12
     abc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     ac0:	83 e2       	ldi	r24, 0x23	; 35
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
		}
	}
	
}
     ac8:	05 c0       	rjmp	.+10     	; 0xad4 <menu1_LCD_ispis+0x140>
	
	
	lcd1602_goto_xy(1,1);
	
	pomocna = (pomocna==KURSOR_MENU1_MAX) ? -1 : pomocna;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
	lcd1602_send_string(menu1_txt[pomocna + 1]);
     aca:	8f e7       	ldi	r24, 0x7F	; 127
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     ad2:	cd cf       	rjmp	.-102    	; 0xa6e <menu1_LCD_ispis+0xda>
			lcd1602_goto_xy(12,1);
			lcd1602_send_string("<OF>");
		}
	}
	
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <podSat_LCD_ispis>:

void podSat_LCD_ispis()
{
	lcd1602_goto_xy(0,0);
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("PODESAVANJE SATA");
     ae2:	88 e2       	ldi	r24, 0x28	; 40
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(0,1);
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("    ");
     af2:	84 e0       	ldi	r24, 0x04	; 4
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     afa:	8d e0       	ldi	r24, 0x0D	; 13
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("    ");
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	91 e0       	ldi	r25, 0x01	; 1
     b06:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
     b10:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
     b1a:	08 95       	ret

00000b1c <podOnOff_LCD_ispis>:
}

void podOnOff_LCD_ispis()
{
	
	sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     b1c:	ea e2       	ldi	r30, 0x2A	; 42
     b1e:	f2 e0       	ldi	r31, 0x02	; 2
     b20:	81 81       	ldd	r24, Z+1	; 0x01
     b22:	1f 92       	push	r1
     b24:	8f 93       	push	r24
     b26:	82 81       	ldd	r24, Z+2	; 0x02
     b28:	1f 92       	push	r1
     b2a:	8f 93       	push	r24
     b2c:	ec e3       	ldi	r30, 0x3C	; 60
     b2e:	f2 e0       	ldi	r31, 0x02	; 2
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	1f 92       	push	r1
     b34:	8f 93       	push	r24
     b36:	82 81       	ldd	r24, Z+2	; 0x02
     b38:	1f 92       	push	r1
     b3a:	8f 93       	push	r24
     b3c:	89 e0       	ldi	r24, 0x09	; 9
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	8d e0       	ldi	r24, 0x0D	; 13
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	9f 93       	push	r25
     b4a:	8f 93       	push	r24
     b4c:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
	
	lcd1602_goto_xy(0,0);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  UPALI--UGASI  ");
     b58:	89 e3       	ldi	r24, 0x39	; 57
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     b68:	86 e0       	ldi	r24, 0x06	; 6
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     b70:	8d e0       	ldi	r24, 0x0D	; 13
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("  ");
     b78:	86 e0       	ldi	r24, 0x06	; 6
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
     b86:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
}
     b90:	8d b7       	in	r24, 0x3d	; 61
     b92:	9e b7       	in	r25, 0x3e	; 62
     b94:	0c 96       	adiw	r24, 0x0c	; 12
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	9e bf       	out	0x3e, r25	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	8d bf       	out	0x3d, r24	; 61
     ba0:	08 95       	ret

00000ba2 <jednokrat_LCD_ispis>:

void jednokrat_LCD_ispis()
{
	
	sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     ba2:	ea e2       	ldi	r30, 0x2A	; 42
     ba4:	f2 e0       	ldi	r31, 0x02	; 2
     ba6:	81 81       	ldd	r24, Z+1	; 0x01
     ba8:	1f 92       	push	r1
     baa:	8f 93       	push	r24
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	1f 92       	push	r1
     bb0:	8f 93       	push	r24
     bb2:	ec e3       	ldi	r30, 0x3C	; 60
     bb4:	f2 e0       	ldi	r31, 0x02	; 2
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	1f 92       	push	r1
     bba:	8f 93       	push	r24
     bbc:	82 81       	ldd	r24, Z+2	; 0x02
     bbe:	1f 92       	push	r1
     bc0:	8f 93       	push	r24
     bc2:	89 e0       	ldi	r24, 0x09	; 9
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	8d e0       	ldi	r24, 0x0D	; 13
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
	
	lcd1602_goto_xy(0,0);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  JEDNOKRATNO:  ");
     bde:	8a e4       	ldi	r24, 0x4A	; 74
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     bee:	86 e0       	ldi	r24, 0x06	; 6
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string(bafer);
     bf6:	8d e0       	ldi	r24, 0x0D	; 13
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("  ");
     bfe:	86 e0       	ldi	r24, 0x06	; 6
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
     c0c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
}
     c16:	8d b7       	in	r24, 0x3d	; 61
     c18:	9e b7       	in	r25, 0x3e	; 62
     c1a:	0c 96       	adiw	r24, 0x0c	; 12
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	9e bf       	out	0x3e, r25	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	8d bf       	out	0x3d, r24	; 61
     c26:	08 95       	ret

00000c28 <brojilo_LCD_ispis>:

void brojilo_LCD_ispis()
{
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
	//lcd1602_clear(); izbrgavam, zbog treperenja, na praznim mestima stampam razmake
	
	sprintf(bafer, "%5dV", napon);
     c2c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
     c30:	8f 93       	push	r24
     c32:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
     c36:	8f 93       	push	r24
     c38:	8b e5       	ldi	r24, 0x5B	; 91
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	8d e0       	ldi	r24, 0x0D	; 13
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	9f 93       	push	r25
     c46:	8f 93       	push	r24
     c48:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
	lcd1602_goto_xy(0,0);
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     c54:	8d e0       	ldi	r24, 0x0D	; 13
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_send_string("   ");
     c5c:	85 e0       	ldi	r24, 0x05	; 5
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	dtostrf(snaga, 4, 2, bafer);
     c64:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
     c68:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
     c6c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
     c70:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
     c74:	0d e0       	ldi	r16, 0x0D	; 13
     c76:	12 e0       	ldi	r17, 0x02	; 2
     c78:	22 e0       	ldi	r18, 0x02	; 2
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	44 e0       	ldi	r20, 0x04	; 4
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <dtostrf>
	lcd1602_goto_xy(9,0);
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	89 e0       	ldi	r24, 0x09	; 9
     c88:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     c8c:	c8 01       	movw	r24, r16
     c8e:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("kW ");	  //+ razmak da popuni ekran
     c92:	80 e6       	ldi	r24, 0x60	; 96
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	dtostrf(struja, 5, 1, bafer);
     c9a:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
     c9e:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
     ca2:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
     ca6:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	45 e0       	ldi	r20, 0x05	; 5
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <dtostrf>
	lcd1602_goto_xy(0,1);
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     cbe:	c8 01       	movw	r24, r16
     cc0:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("A");
     cc4:	87 e3       	ldi	r24, 0x37	; 55
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	lcd1602_send_string("   ");
     ccc:	85 e0       	ldi	r24, 0x05	; 5
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	
	dtostrf(energija, 5, 2, bafer);
     cd4:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
     cd8:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
     cdc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
     ce0:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
     ce4:	22 e0       	ldi	r18, 0x02	; 2
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	45 e0       	ldi	r20, 0x05	; 5
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <dtostrf>
	lcd1602_goto_xy(8,1);
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     cf8:	c8 01       	movw	r24, r16
     cfa:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
	lcd1602_send_string("kWh");
     cfe:	84 e6       	ldi	r24, 0x64	; 100
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	0e 94 de 03 	call	0x7bc	; 0x7bc <lcd1602_send_string>
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <fsm_lcd_menu>:
	
	return errCode;		//obavesti ako je doslo do odstupanja od ocekivanih citanja, sto verovatnu ukazuje na gresku pri pisanju u eeprom, ili moguci otkaz eeproma
}

void fsm_lcd_menu()
{
     d18:	0f 93       	push	r16
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
	
	switch(STATE)
     d1e:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <STATE>
     d22:	8e 2f       	mov	r24, r30
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	87 30       	cpi	r24, 0x07	; 7
     d28:	91 05       	cpc	r25, r1
     d2a:	08 f0       	brcs	.+2      	; 0xd2e <fsm_lcd_menu+0x16>
     d2c:	74 c4       	rjmp	.+2280   	; 0x1616 <fsm_lcd_menu+0x8fe>
     d2e:	fc 01       	movw	r30, r24
     d30:	ec 5c       	subi	r30, 0xCC	; 204
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__tablejump2__>
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     d38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d3c:	88 23       	and	r24, r24
     d3e:	31 f0       	breq	.+12     	; 0xd4c <fsm_lcd_menu+0x34>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     d40:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     d44:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <timer_disp_cycle+0x1>
     d48:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <timer_disp_cycle>
				}
				if (brojilo_on_off == 1)
     d4c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <brojilo_on_off>
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	61 f4       	brne	.+24     	; 0xd6c <fsm_lcd_menu+0x54>
				{
					if (timer_disp_cycle > 7000)	//7 sekundi, samo ako je ukljucen ispis brojila (brojilo_on_off)
     d54:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <timer_disp_cycle>
     d58:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <timer_disp_cycle+0x1>
     d5c:	89 35       	cpi	r24, 0x59	; 89
     d5e:	9b 41       	sbci	r25, 0x1B	; 27
     d60:	28 f0       	brcs	.+10     	; 0xd6c <fsm_lcd_menu+0x54>
					{
						displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						STATE = DISPL2;
     d68:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
					}
				}
					
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     d6c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <flag_pc_int>
     d70:	88 23       	and	r24, r24
     d72:	61 f1       	breq	.+88     	; 0xdcc <fsm_lcd_menu+0xb4>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     d74:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <flag_pc_int>
			
					getTime(&vreme_trenutno.hr, &vreme_trenutno.min, &vreme_trenutno.s, &vreme_trenutno.am_pm, _24_hour_format);
     d78:	00 e0       	ldi	r16, 0x00	; 0
     d7a:	29 e2       	ldi	r18, 0x29	; 41
     d7c:	32 e0       	ldi	r19, 0x02	; 2
     d7e:	41 e2       	ldi	r20, 0x21	; 33
     d80:	52 e0       	ldi	r21, 0x02	; 2
     d82:	62 e2       	ldi	r22, 0x22	; 34
     d84:	72 e0       	ldi	r23, 0x02	; 2
     d86:	83 e2       	ldi	r24, 0x23	; 35
     d88:	92 e0       	ldi	r25, 0x02	; 2
     d8a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_trenutno.hr, vreme_trenutno.min, vreme_trenutno.s);
     d8e:	e1 e2       	ldi	r30, 0x21	; 33
     d90:	f2 e0       	ldi	r31, 0x02	; 2
     d92:	80 81       	ld	r24, Z
     d94:	1f 92       	push	r1
     d96:	8f 93       	push	r24
     d98:	81 81       	ldd	r24, Z+1	; 0x01
     d9a:	1f 92       	push	r1
     d9c:	8f 93       	push	r24
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	1f 92       	push	r1
     da2:	8f 93       	push	r24
     da4:	88 e6       	ldi	r24, 0x68	; 104
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	9f 93       	push	r25
     daa:	8f 93       	push	r24
     dac:	8d e0       	ldi	r24, 0x0D	; 13
     dae:	92 e0       	ldi	r25, 0x02	; 2
     db0:	9f 93       	push	r25
     db2:	8f 93       	push	r24
     db4:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
				
					displ1_LCD_ispis();			//ispis karaktera na LCD
     db8:	0e 94 87 04 	call	0x90e	; 0x90e <displ1_LCD_ispis>
     dbc:	8d b7       	in	r24, 0x3d	; 61
     dbe:	9e b7       	in	r25, 0x3e	; 62
     dc0:	0a 96       	adiw	r24, 0x0a	; 10
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	9e bf       	out	0x3e, r25	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	8d bf       	out	0x3d, r24	; 61
			
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     dd2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     dd6:	88 23       	and	r24, r24
     dd8:	09 f4       	brne	.+2      	; 0xddc <fsm_lcd_menu+0xc4>
     dda:	1d c4       	rjmp	.+2106   	; 0x1616 <fsm_lcd_menu+0x8fe>
				{
					displ_flag_shot = 1;	//opet dozvolim, pri izlazku iz ovog stejta
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
     de8:	16 c4       	rjmp	.+2092   	; 0x1616 <fsm_lcd_menu+0x8fe>
		break;
		
		case DISPL2:
				//ispisuje napon, struju, snagu... Smenjuje se periodicno sa DISPL1, uz pomoc tajmera
				
				if(displ_flag_shot)	//startujem tajmer samo prvi put za ciklicno menjanje DIPL1 i DISPL2
     dea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dee:	88 23       	and	r24, r24
     df0:	31 f0       	breq	.+12     	; 0xdfe <fsm_lcd_menu+0xe6>
				{
					displ_flag_shot = 0; //resetujem flag
     df2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     df6:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <timer_disp_cycle+0x1>
     dfa:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <timer_disp_cycle>
				}
				
				if (timer_disp_cycle > 4000)	//4 sekunde istekle, menjaj meni
     dfe:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <timer_disp_cycle>
     e02:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <timer_disp_cycle+0x1>
     e06:	81 3a       	cpi	r24, 0xA1	; 161
     e08:	9f 40       	sbci	r25, 0x0F	; 15
     e0a:	28 f0       	brcs	.+10     	; 0xe16 <fsm_lcd_menu+0xfe>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL1;
     e12:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <STATE>
				}
				
				if ( flag_prekid_100ms_VAkWh )	//Ispisujem napon, struju snagu, sa periodom 100ms, da nije zamrznut ispis vec da se vide promene
     e16:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <flag_prekid_100ms_VAkWh>
     e1a:	88 23       	and	r24, r24
     e1c:	21 f0       	breq	.+8      	; 0xe26 <fsm_lcd_menu+0x10e>
				{
					
					flag_prekid_100ms_VAkWh = 0; //reset flaga
     e1e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <flag_prekid_100ms_VAkWh>
					
					brojilo_LCD_ispis();			//ispis karaktera na LCD
     e22:	0e 94 14 06 	call	0xc28	; 0xc28 <brojilo_LCD_ispis>
					
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     e26:	61 e0       	ldi	r22, 0x01	; 1
     e28:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e2c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <fsm_lcd_menu+0x11e>
     e34:	f0 c3       	rjmp	.+2016   	; 0x1616 <fsm_lcd_menu+0x8fe>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
     e42:	e9 c3       	rjmp	.+2002   	; 0x1616 <fsm_lcd_menu+0x8fe>
					
		break;
		
		case MENU1:
					
					menu1_LCD_ispis();			//ispis karaktera na LCD
     e44:	0e 94 ca 04 	call	0x994	; 0x994 <menu1_LCD_ispis>
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     e48:	65 e0       	ldi	r22, 0x05	; 5
     e4a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e4e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     e52:	88 23       	and	r24, r24
     e54:	59 f0       	breq	.+22     	; 0xe6c <fsm_lcd_menu+0x154>
					{
						kursor_vert++;
     e56:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     e5a:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor_vert > KURSOR_MENU1_MAX)
     e5c:	84 30       	cpi	r24, 0x04	; 4
     e5e:	1c f4       	brge	.+6      	; 0xe66 <fsm_lcd_menu+0x14e>
					
					menu1_LCD_ispis();			//ispis karaktera na LCD
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor_vert++;
     e60:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <kursor_vert>
     e64:	d8 c3       	rjmp	.+1968   	; 0x1616 <fsm_lcd_menu+0x8fe>
						if(kursor_vert > KURSOR_MENU1_MAX)
						kursor_vert = 0;
     e66:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <kursor_vert>
     e6a:	d5 c3       	rjmp	.+1962   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     e6c:	64 e0       	ldi	r22, 0x04	; 4
     e6e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e72:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     e76:	88 23       	and	r24, r24
     e78:	59 f0       	breq	.+22     	; 0xe90 <fsm_lcd_menu+0x178>
					{
						kursor_vert--;
     e7a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     e7e:	81 50       	subi	r24, 0x01	; 1
						if(kursor_vert < 0)		//min je 0, logicno
     e80:	1a f0       	brmi	.+6      	; 0xe88 <fsm_lcd_menu+0x170>
						if(kursor_vert > KURSOR_MENU1_MAX)
						kursor_vert = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor_vert--;
     e82:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <kursor_vert>
     e86:	c7 c3       	rjmp	.+1934   	; 0x1616 <fsm_lcd_menu+0x8fe>
						if(kursor_vert < 0)		//min je 0, logicno
						kursor_vert = KURSOR_MENU1_MAX;
     e88:	83 e0       	ldi	r24, 0x03	; 3
     e8a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <kursor_vert>
     e8e:	c3 c3       	rjmp	.+1926   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if(kursor_vert == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     e90:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	59 f4       	brne	.+22     	; 0xeae <fsm_lcd_menu+0x196>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e9e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     ea2:	88 23       	and	r24, r24
     ea4:	21 f0       	breq	.+8      	; 0xeae <fsm_lcd_menu+0x196>
						STATE = POD_SAT;	//meni za podesavanje sata
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
     eac:	b4 c3       	rjmp	.+1896   	; 0x1616 <fsm_lcd_menu+0x8fe>
					else if(kursor_vert == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     eae:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	59 f4       	brne	.+22     	; 0xecc <fsm_lcd_menu+0x1b4>
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     ebc:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     ec0:	88 23       	and	r24, r24
     ec2:	21 f0       	breq	.+8      	; 0xecc <fsm_lcd_menu+0x1b4>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     ec4:	84 e0       	ldi	r24, 0x04	; 4
     ec6:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
     eca:	a5 c3       	rjmp	.+1866   	; 0x1616 <fsm_lcd_menu+0x8fe>
					else if(kursor_vert == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     ecc:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     ed0:	81 11       	cpse	r24, r1
     ed2:	25 c0       	rjmp	.+74     	; 0xf1e <fsm_lcd_menu+0x206>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     eda:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     ede:	88 23       	and	r24, r24
     ee0:	21 f0       	breq	.+8      	; 0xeea <fsm_lcd_menu+0x1d2>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
     ee8:	96 c3       	rjmp	.+1836   	; 0x1616 <fsm_lcd_menu+0x8fe>
					else if( kursor_vert == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     eea:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     eee:	81 11       	cpse	r24, r1
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <fsm_lcd_menu+0x206>
     ef2:	62 e0       	ldi	r22, 0x02	; 2
     ef4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     ef8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     efc:	81 11       	cpse	r24, r1
     efe:	07 c0       	rjmp	.+14     	; 0xf0e <fsm_lcd_menu+0x1f6>
     f00:	63 e0       	ldi	r22, 0x03	; 3
     f02:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f06:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     f0a:	88 23       	and	r24, r24
     f0c:	41 f0       	breq	.+16     	; 0xf1e <fsm_lcd_menu+0x206>
						jednok_on_off = !jednok_on_off;	//toggle
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <jednok_on_off>
     f14:	91 11       	cpse	r25, r1
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <jednok_on_off>
     f1c:	7c c3       	rjmp	.+1784   	; 0x1616 <fsm_lcd_menu+0x8fe>
					else if ( kursor_vert == KURSOR_BROJILO && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     f1e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     f22:	83 30       	cpi	r24, 0x03	; 3
     f24:	49 f5       	brne	.+82     	; 0xf78 <fsm_lcd_menu+0x260>
     f26:	61 e0       	ldi	r22, 0x01	; 1
     f28:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f2c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     f30:	88 23       	and	r24, r24
     f32:	21 f0       	breq	.+8      	; 0xf3c <fsm_lcd_menu+0x224>
						STATE = BROJILO; //sub meni za prikaz merenja trenutnog napona, struje, snage...
     f34:	86 e0       	ldi	r24, 0x06	; 6
     f36:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
     f3a:	6d c3       	rjmp	.+1754   	; 0x1616 <fsm_lcd_menu+0x8fe>
					else if( kursor_vert == KURSOR_BROJILO && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) )
     f3c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <kursor_vert>
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	d1 f4       	brne	.+52     	; 0xf78 <fsm_lcd_menu+0x260>
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f4a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     f4e:	81 11       	cpse	r24, r1
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <fsm_lcd_menu+0x248>
     f52:	63 e0       	ldi	r22, 0x03	; 3
     f54:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f58:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     f5c:	88 23       	and	r24, r24
     f5e:	61 f0       	breq	.+24     	; 0xf78 <fsm_lcd_menu+0x260>
					{
						brojilo_on_off = !brojilo_on_off;	//toggle
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <brojilo_on_off>
     f66:	81 11       	cpse	r24, r1
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <brojilo_on_off>
						EEPROM_write(BROJILO_ONOF_ADR, brojilo_on_off);
     f6e:	8c e0       	ldi	r24, 0x0C	; 12
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
     f76:	4f c3       	rjmp	.+1694   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f7e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     f82:	88 23       	and	r24, r24
     f84:	09 f4       	brne	.+2      	; 0xf88 <fsm_lcd_menu+0x270>
     f86:	47 c3       	rjmp	.+1678   	; 0x1616 <fsm_lcd_menu+0x8fe>
					{
						kursor_vert = 0;			//resetujem kursor jer ostane memorisan
     f88:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <kursor_vert>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     f8c:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <STATE>
     f90:	42 c3       	rjmp	.+1668   	; 0x1616 <fsm_lcd_menu+0x8fe>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (displ_flag_shot)
     f92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f96:	88 23       	and	r24, r24
     f98:	69 f1       	breq	.+90     	; 0xff4 <fsm_lcd_menu+0x2dc>
					{
						displ_flag_shot = 0;
     f9a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						snap_shot_vremena = vreme_trenutno;
     f9e:	89 e0       	ldi	r24, 0x09	; 9
     fa0:	e1 e2       	ldi	r30, 0x21	; 33
     fa2:	f2 e0       	ldi	r31, 0x02	; 2
     fa4:	a4 e0       	ldi	r26, 0x04	; 4
     fa6:	b2 e0       	ldi	r27, 0x02	; 2
     fa8:	01 90       	ld	r0, Z+
     faa:	0d 92       	st	X+, r0
     fac:	8a 95       	dec	r24
     fae:	e1 f7       	brne	.-8      	; 0xfa8 <fsm_lcd_menu+0x290>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     fb0:	e4 e0       	ldi	r30, 0x04	; 4
     fb2:	f2 e0       	ldi	r31, 0x02	; 2
     fb4:	80 81       	ld	r24, Z
     fb6:	1f 92       	push	r1
     fb8:	8f 93       	push	r24
     fba:	81 81       	ldd	r24, Z+1	; 0x01
     fbc:	1f 92       	push	r1
     fbe:	8f 93       	push	r24
     fc0:	82 81       	ldd	r24, Z+2	; 0x02
     fc2:	1f 92       	push	r1
     fc4:	8f 93       	push	r24
     fc6:	88 e6       	ldi	r24, 0x68	; 104
     fc8:	91 e0       	ldi	r25, 0x01	; 1
     fca:	9f 93       	push	r25
     fcc:	8f 93       	push	r24
     fce:	8d e0       	ldi	r24, 0x0D	; 13
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	9f 93       	push	r25
     fd4:	8f 93       	push	r24
     fd6:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
			
						kursor_horiz = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     fda:	85 e0       	ldi	r24, 0x05	; 5
     fdc:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						
						podSat_LCD_ispis();			//ispis karaktera na LCD
     fe0:	0e 94 6d 05 	call	0xada	; 0xada <podSat_LCD_ispis>
     fe4:	8d b7       	in	r24, 0x3d	; 61
     fe6:	9e b7       	in	r25, 0x3e	; 62
     fe8:	0a 96       	adiw	r24, 0x0a	; 10
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	9e bf       	out	0x3e, r25	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	8d bf       	out	0x3d, r24	; 61
						
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     ff4:	63 e0       	ldi	r22, 0x03	; 3
     ff6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     ffa:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
     ffe:	88 23       	and	r24, r24
    1000:	89 f0       	breq	.+34     	; 0x1024 <fsm_lcd_menu+0x30c>
					{
						kursor_horiz += 3;
    1002:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1006:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 11)
    1008:	8c 30       	cpi	r24, 0x0C	; 12
    100a:	1c f4       	brge	.+6      	; 0x1012 <fsm_lcd_menu+0x2fa>
						
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    100c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <fsm_lcd_menu+0x300>
						if(kursor_horiz > 11)
							kursor_horiz = 11;
    1012:	8b e0       	ldi	r24, 0x0B	; 11
    1014:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						lcd1602_goto_xy(kursor_horiz,1);
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    101e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    1022:	f9 c2       	rjmp	.+1522   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    102a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    102e:	88 23       	and	r24, r24
    1030:	89 f0       	breq	.+34     	; 0x1054 <fsm_lcd_menu+0x33c>
					{
						kursor_horiz -= 3;
    1032:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1036:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 5)
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	1c f0       	brlt	.+6      	; 0x1042 <fsm_lcd_menu+0x32a>
							kursor_horiz = 11;
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    103c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <fsm_lcd_menu+0x330>
						if(kursor_horiz < 5)
							kursor_horiz = 5;
    1042:	85 e0       	ldi	r24, 0x05	; 5
    1044:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						lcd1602_goto_xy(kursor_horiz,1);
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    104e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    1052:	e1 c2       	rjmp	.+1474   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    1054:	64 e0       	ldi	r22, 0x04	; 4
    1056:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    105a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    105e:	88 23       	and	r24, r24
    1060:	39 f1       	breq	.+78     	; 0x10b0 <fsm_lcd_menu+0x398>
					{
						if (kursor_horiz == 5)												//podesava SATE ++
    1062:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	51 f4       	brne	.+20     	; 0x107e <fsm_lcd_menu+0x366>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor_horiz, UVECAJ);
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	4b ed       	ldi	r20, 0xDB	; 219
    106e:	51 e0       	ldi	r21, 0x01	; 1
    1070:	6d e0       	ldi	r22, 0x0D	; 13
    1072:	72 e0       	ldi	r23, 0x02	; 2
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    107c:	cc c2       	rjmp	.+1432   	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 8)											//podesava MINUTE ++
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	51 f4       	brne	.+20     	; 0x1096 <fsm_lcd_menu+0x37e>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor_horiz, UVECAJ);
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	4b ed       	ldi	r20, 0xDB	; 219
    1086:	51 e0       	ldi	r21, 0x01	; 1
    1088:	6d e0       	ldi	r22, 0x0D	; 13
    108a:	72 e0       	ldi	r23, 0x02	; 2
    108c:	85 e0       	ldi	r24, 0x05	; 5
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1094:	c0 c2       	rjmp	.+1408   	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 11)											//podesava SEKUNDE ++
    1096:	8b 30       	cpi	r24, 0x0B	; 11
    1098:	09 f0       	breq	.+2      	; 0x109c <fsm_lcd_menu+0x384>
    109a:	bd c2       	rjmp	.+1402   	; 0x1616 <fsm_lcd_menu+0x8fe>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor_horiz, UVECAJ);
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	4b ed       	ldi	r20, 0xDB	; 219
    10a0:	51 e0       	ldi	r21, 0x01	; 1
    10a2:	6d e0       	ldi	r22, 0x0D	; 13
    10a4:	72 e0       	ldi	r23, 0x02	; 2
    10a6:	84 e0       	ldi	r24, 0x04	; 4
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	0e 94 bd 02 	call	0x57a	; 0x57a <sekundi_ispis>
    10ae:	b3 c2       	rjmp	.+1382   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    10b0:	65 e0       	ldi	r22, 0x05	; 5
    10b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    10b6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    10ba:	88 23       	and	r24, r24
    10bc:	39 f1       	breq	.+78     	; 0x110c <fsm_lcd_menu+0x3f4>
					{
						if (kursor_horiz == 5)												//podesava SATE --
    10be:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    10c2:	85 30       	cpi	r24, 0x05	; 5
    10c4:	51 f4       	brne	.+20     	; 0x10da <fsm_lcd_menu+0x3c2>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor_horiz, UMANJI);
    10c6:	21 e0       	ldi	r18, 0x01	; 1
    10c8:	4b ed       	ldi	r20, 0xDB	; 219
    10ca:	51 e0       	ldi	r21, 0x01	; 1
    10cc:	6d e0       	ldi	r22, 0x0D	; 13
    10ce:	72 e0       	ldi	r23, 0x02	; 2
    10d0:	86 e0       	ldi	r24, 0x06	; 6
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    10d8:	9e c2       	rjmp	.+1340   	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 8)											//podesava MINUTE --
    10da:	88 30       	cpi	r24, 0x08	; 8
    10dc:	51 f4       	brne	.+20     	; 0x10f2 <fsm_lcd_menu+0x3da>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor_horiz, UMANJI);
    10de:	21 e0       	ldi	r18, 0x01	; 1
    10e0:	4b ed       	ldi	r20, 0xDB	; 219
    10e2:	51 e0       	ldi	r21, 0x01	; 1
    10e4:	6d e0       	ldi	r22, 0x0D	; 13
    10e6:	72 e0       	ldi	r23, 0x02	; 2
    10e8:	85 e0       	ldi	r24, 0x05	; 5
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    10f0:	92 c2       	rjmp	.+1316   	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 11)											//podesava SEKUNDE --
    10f2:	8b 30       	cpi	r24, 0x0B	; 11
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <fsm_lcd_menu+0x3e0>
    10f6:	8f c2       	rjmp	.+1310   	; 0x1616 <fsm_lcd_menu+0x8fe>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor_horiz, UMANJI);
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	4b ed       	ldi	r20, 0xDB	; 219
    10fc:	51 e0       	ldi	r21, 0x01	; 1
    10fe:	6d e0       	ldi	r22, 0x0D	; 13
    1100:	72 e0       	ldi	r23, 0x02	; 2
    1102:	84 e0       	ldi	r24, 0x04	; 4
    1104:	92 e0       	ldi	r25, 0x02	; 2
    1106:	0e 94 bd 02 	call	0x57a	; 0x57a <sekundi_ispis>
    110a:	85 c2       	rjmp	.+1290   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1112:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    1116:	88 23       	and	r24, r24
    1118:	a9 f0       	breq	.+42     	; 0x1144 <fsm_lcd_menu+0x42c>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
    111a:	e4 e0       	ldi	r30, 0x04	; 4
    111c:	f2 e0       	ldi	r31, 0x02	; 2
    111e:	00 e0       	ldi	r16, 0x00	; 0
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	40 81       	ld	r20, Z
    1124:	61 81       	ldd	r22, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <setTime>
						displ_flag_shot = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    1132:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
    1142:	69 c2       	rjmp	.+1234   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    114a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <fsm_lcd_menu+0x43c>
    1152:	61 c2       	rjmp	.+1218   	; 0x1616 <fsm_lcd_menu+0x8fe>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						displ_flag_shot = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    115a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
    116a:	55 c2       	rjmp	.+1194   	; 0x1616 <fsm_lcd_menu+0x8fe>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (displ_flag_shot)
    116c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1170:	88 23       	and	r24, r24
    1172:	c9 f0       	breq	.+50     	; 0x11a6 <fsm_lcd_menu+0x48e>
					{
						displ_flag_shot = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    1174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = vreme_paljenja;	
    1178:	89 e0       	ldi	r24, 0x09	; 9
    117a:	e3 e3       	ldi	r30, 0x33	; 51
    117c:	f2 e0       	ldi	r31, 0x02	; 2
    117e:	ac e3       	ldi	r26, 0x3C	; 60
    1180:	b2 e0       	ldi	r27, 0x02	; 2
    1182:	01 90       	ld	r0, Z+
    1184:	0d 92       	st	X+, r0
    1186:	8a 95       	dec	r24
    1188:	e1 f7       	brne	.-8      	; 0x1182 <fsm_lcd_menu+0x46a>
						snap_vreme_gasenja = vreme_gasenja;
    118a:	89 e0       	ldi	r24, 0x09	; 9
    118c:	e5 e4       	ldi	r30, 0x45	; 69
    118e:	f2 e0       	ldi	r31, 0x02	; 2
    1190:	aa e2       	ldi	r26, 0x2A	; 42
    1192:	b2 e0       	ldi	r27, 0x02	; 2
    1194:	01 90       	ld	r0, Z+
    1196:	0d 92       	st	X+, r0
    1198:	8a 95       	dec	r24
    119a:	e1 f7       	brne	.-8      	; 0x1194 <fsm_lcd_menu+0x47c>
						
						kursor_horiz = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    119c:	83 e0       	ldi	r24, 0x03	; 3
    119e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
    11a2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <podOnOff_LCD_ispis>
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    11a6:	63 e0       	ldi	r22, 0x03	; 3
    11a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    11ac:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    11b0:	88 23       	and	r24, r24
    11b2:	c9 f0       	breq	.+50     	; 0x11e6 <fsm_lcd_menu+0x4ce>
					{
						kursor_horiz += 3;
    11b4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    11b8:	9c ef       	ldi	r25, 0xFC	; 252
    11ba:	98 0f       	add	r25, r24
    11bc:	93 30       	cpi	r25, 0x03	; 3
    11be:	20 f4       	brcc	.+8      	; 0x11c8 <fsm_lcd_menu+0x4b0>
							kursor_horiz = 10;
    11c0:	8a e0       	ldi	r24, 0x0A	; 10
    11c2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <fsm_lcd_menu+0x4c2>
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    11c8:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 10;
						else if (kursor_horiz > 13)
    11ca:	8e 30       	cpi	r24, 0x0E	; 14
    11cc:	1c f4       	brge	.+6      	; 0x11d4 <fsm_lcd_menu+0x4bc>
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    11ce:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <fsm_lcd_menu+0x4c2>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 10;
						else if (kursor_horiz > 13)
							kursor_horiz = 13;
    11d4:	8d e0       	ldi	r24, 0x0D	; 13
    11d6:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
							
						lcd1602_goto_xy(kursor_horiz,1);
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    11e0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    11e4:	18 c2       	rjmp	.+1072   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    11e6:	62 e0       	ldi	r22, 0x02	; 2
    11e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    11ec:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    11f0:	88 23       	and	r24, r24
    11f2:	c9 f0       	breq	.+50     	; 0x1226 <fsm_lcd_menu+0x50e>
					{
						kursor_horiz -= 3;
    11f4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    11f8:	96 ef       	ldi	r25, 0xF6	; 246
    11fa:	98 0f       	add	r25, r24
    11fc:	93 30       	cpi	r25, 0x03	; 3
    11fe:	20 f4       	brcc	.+8      	; 0x1208 <fsm_lcd_menu+0x4f0>
							kursor_horiz = 6;
    1200:	86 e0       	ldi	r24, 0x06	; 6
    1202:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    1206:	09 c0       	rjmp	.+18     	; 0x121a <fsm_lcd_menu+0x502>
							
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    1208:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 6;
						else if(kursor_horiz < 3)
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	1c f0       	brlt	.+6      	; 0x1214 <fsm_lcd_menu+0x4fc>
							
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    120e:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    1212:	03 c0       	rjmp	.+6      	; 0x121a <fsm_lcd_menu+0x502>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 6;
						else if(kursor_horiz < 3)
							kursor_horiz = 3;
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
							
						lcd1602_goto_xy(kursor_horiz,1);
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1220:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    1224:	f8 c1       	rjmp	.+1008   	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    122c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    1230:	88 23       	and	r24, r24
    1232:	99 f1       	breq	.+102    	; 0x129a <fsm_lcd_menu+0x582>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON ++
    1234:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	51 f4       	brne	.+20     	; 0x1250 <fsm_lcd_menu+0x538>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UVECAJ);
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	4b ed       	ldi	r20, 0xDB	; 219
    1240:	51 e0       	ldi	r21, 0x01	; 1
    1242:	6d e0       	ldi	r22, 0x0D	; 13
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	8e e3       	ldi	r24, 0x3E	; 62
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    124e:	e3 c1       	rjmp	.+966    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON ++
    1250:	86 30       	cpi	r24, 0x06	; 6
    1252:	51 f4       	brne	.+20     	; 0x1268 <fsm_lcd_menu+0x550>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UVECAJ);
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	4b ed       	ldi	r20, 0xDB	; 219
    1258:	51 e0       	ldi	r21, 0x01	; 1
    125a:	6d e0       	ldi	r22, 0x0D	; 13
    125c:	72 e0       	ldi	r23, 0x02	; 2
    125e:	8d e3       	ldi	r24, 0x3D	; 61
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1266:	d7 c1       	rjmp	.+942    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 10)											//podesava SATE_OFF ++
    1268:	8a 30       	cpi	r24, 0x0A	; 10
    126a:	51 f4       	brne	.+20     	; 0x1280 <fsm_lcd_menu+0x568>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UVECAJ);
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	4b ed       	ldi	r20, 0xDB	; 219
    1270:	51 e0       	ldi	r21, 0x01	; 1
    1272:	6d e0       	ldi	r22, 0x0D	; 13
    1274:	72 e0       	ldi	r23, 0x02	; 2
    1276:	8c e2       	ldi	r24, 0x2C	; 44
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    127e:	cb c1       	rjmp	.+918    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF ++
    1280:	8d 30       	cpi	r24, 0x0D	; 13
    1282:	09 f0       	breq	.+2      	; 0x1286 <fsm_lcd_menu+0x56e>
    1284:	c8 c1       	rjmp	.+912    	; 0x1616 <fsm_lcd_menu+0x8fe>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UVECAJ);
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	4b ed       	ldi	r20, 0xDB	; 219
    128a:	51 e0       	ldi	r21, 0x01	; 1
    128c:	6d e0       	ldi	r22, 0x0D	; 13
    128e:	72 e0       	ldi	r23, 0x02	; 2
    1290:	8b e2       	ldi	r24, 0x2B	; 43
    1292:	92 e0       	ldi	r25, 0x02	; 2
    1294:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1298:	be c1       	rjmp	.+892    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    129a:	65 e0       	ldi	r22, 0x05	; 5
    129c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    12a0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    12a4:	88 23       	and	r24, r24
    12a6:	99 f1       	breq	.+102    	; 0x130e <fsm_lcd_menu+0x5f6>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON --
    12a8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    12ac:	83 30       	cpi	r24, 0x03	; 3
    12ae:	51 f4       	brne	.+20     	; 0x12c4 <fsm_lcd_menu+0x5ac>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UMANJI);
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	4b ed       	ldi	r20, 0xDB	; 219
    12b4:	51 e0       	ldi	r21, 0x01	; 1
    12b6:	6d e0       	ldi	r22, 0x0D	; 13
    12b8:	72 e0       	ldi	r23, 0x02	; 2
    12ba:	8e e3       	ldi	r24, 0x3E	; 62
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    12c2:	a9 c1       	rjmp	.+850    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON --
    12c4:	86 30       	cpi	r24, 0x06	; 6
    12c6:	51 f4       	brne	.+20     	; 0x12dc <fsm_lcd_menu+0x5c4>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UMANJI);
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	4b ed       	ldi	r20, 0xDB	; 219
    12cc:	51 e0       	ldi	r21, 0x01	; 1
    12ce:	6d e0       	ldi	r22, 0x0D	; 13
    12d0:	72 e0       	ldi	r23, 0x02	; 2
    12d2:	8d e3       	ldi	r24, 0x3D	; 61
    12d4:	92 e0       	ldi	r25, 0x02	; 2
    12d6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    12da:	9d c1       	rjmp	.+826    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 10)											//podesava SATE_OFF --
    12dc:	8a 30       	cpi	r24, 0x0A	; 10
    12de:	51 f4       	brne	.+20     	; 0x12f4 <fsm_lcd_menu+0x5dc>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UMANJI);
    12e0:	21 e0       	ldi	r18, 0x01	; 1
    12e2:	4b ed       	ldi	r20, 0xDB	; 219
    12e4:	51 e0       	ldi	r21, 0x01	; 1
    12e6:	6d e0       	ldi	r22, 0x0D	; 13
    12e8:	72 e0       	ldi	r23, 0x02	; 2
    12ea:	8c e2       	ldi	r24, 0x2C	; 44
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    12f2:	91 c1       	rjmp	.+802    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF --
    12f4:	8d 30       	cpi	r24, 0x0D	; 13
    12f6:	09 f0       	breq	.+2      	; 0x12fa <fsm_lcd_menu+0x5e2>
    12f8:	8e c1       	rjmp	.+796    	; 0x1616 <fsm_lcd_menu+0x8fe>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UMANJI);
    12fa:	21 e0       	ldi	r18, 0x01	; 1
    12fc:	4b ed       	ldi	r20, 0xDB	; 219
    12fe:	51 e0       	ldi	r21, 0x01	; 1
    1300:	6d e0       	ldi	r22, 0x0D	; 13
    1302:	72 e0       	ldi	r23, 0x02	; 2
    1304:	8b e2       	ldi	r24, 0x2B	; 43
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    130c:	84 c1       	rjmp	.+776    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1314:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    1318:	88 23       	and	r24, r24
    131a:	b1 f1       	breq	.+108    	; 0x1388 <fsm_lcd_menu+0x670>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
    131c:	89 e0       	ldi	r24, 0x09	; 9
    131e:	ec e3       	ldi	r30, 0x3C	; 60
    1320:	f2 e0       	ldi	r31, 0x02	; 2
    1322:	a3 e3       	ldi	r26, 0x33	; 51
    1324:	b2 e0       	ldi	r27, 0x02	; 2
    1326:	01 90       	ld	r0, Z+
    1328:	0d 92       	st	X+, r0
    132a:	8a 95       	dec	r24
    132c:	e1 f7       	brne	.-8      	; 0x1326 <fsm_lcd_menu+0x60e>
						vreme_gasenja = snap_vreme_gasenja;
    132e:	89 e0       	ldi	r24, 0x09	; 9
    1330:	ea e2       	ldi	r30, 0x2A	; 42
    1332:	f2 e0       	ldi	r31, 0x02	; 2
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b2 e0       	ldi	r27, 0x02	; 2
    1338:	01 90       	ld	r0, Z+
    133a:	0d 92       	st	X+, r0
    133c:	8a 95       	dec	r24
    133e:	e1 f7       	brne	.-8      	; 0x1338 <fsm_lcd_menu+0x620>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
    1340:	c3 e3       	ldi	r28, 0x33	; 51
    1342:	d2 e0       	ldi	r29, 0x02	; 2
    1344:	6a 81       	ldd	r22, Y+2	; 0x02
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
    134e:	69 81       	ldd	r22, Y+1	; 0x01
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
    1358:	c5 e4       	ldi	r28, 0x45	; 69
    135a:	d2 e0       	ldi	r29, 0x02	; 2
    135c:	6a 81       	ldd	r22, Y+2	; 0x02
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
    1366:	69 81       	ldd	r22, Y+1	; 0x01
    1368:	83 e0       	ldi	r24, 0x03	; 3
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    1376:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
    1386:	47 c1       	rjmp	.+654    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    138e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <fsm_lcd_menu+0x680>
    1396:	3f c1       	rjmp	.+638    	; 0x1616 <fsm_lcd_menu+0x8fe>
					{
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    139e:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    13a8:	82 e0       	ldi	r24, 0x02	; 2
    13aa:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
    13ae:	33 c1       	rjmp	.+614    	; 0x1616 <fsm_lcd_menu+0x8fe>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (displ_flag_shot)
    13b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    13b4:	88 23       	and	r24, r24
    13b6:	c9 f0       	breq	.+50     	; 0x13ea <fsm_lcd_menu+0x6d2>
					{
						displ_flag_shot = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    13b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = jednokratno_paljenje;
    13bc:	89 e0       	ldi	r24, 0x09	; 9
    13be:	eb ef       	ldi	r30, 0xFB	; 251
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	ac e3       	ldi	r26, 0x3C	; 60
    13c4:	b2 e0       	ldi	r27, 0x02	; 2
    13c6:	01 90       	ld	r0, Z+
    13c8:	0d 92       	st	X+, r0
    13ca:	8a 95       	dec	r24
    13cc:	e1 f7       	brne	.-8      	; 0x13c6 <fsm_lcd_menu+0x6ae>
						snap_vreme_gasenja = jednokratno_gasenje;
    13ce:	89 e0       	ldi	r24, 0x09	; 9
    13d0:	e2 ef       	ldi	r30, 0xF2	; 242
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	aa e2       	ldi	r26, 0x2A	; 42
    13d6:	b2 e0       	ldi	r27, 0x02	; 2
    13d8:	01 90       	ld	r0, Z+
    13da:	0d 92       	st	X+, r0
    13dc:	8a 95       	dec	r24
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <fsm_lcd_menu+0x6c0>
						
						kursor_horiz = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
    13e6:	0e 94 d1 05 	call	0xba2	; 0xba2 <jednokrat_LCD_ispis>
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    13ea:	63 e0       	ldi	r22, 0x03	; 3
    13ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    13f0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    13f4:	88 23       	and	r24, r24
    13f6:	c9 f0       	breq	.+50     	; 0x142a <fsm_lcd_menu+0x712>
					{
						kursor_horiz += 3;
    13f8:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    13fc:	9c ef       	ldi	r25, 0xFC	; 252
    13fe:	98 0f       	add	r25, r24
    1400:	93 30       	cpi	r25, 0x03	; 3
    1402:	20 f4       	brcc	.+8      	; 0x140c <fsm_lcd_menu+0x6f4>
						kursor_horiz = 10;
    1404:	8a e0       	ldi	r24, 0x0A	; 10
    1406:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    140a:	09 c0       	rjmp	.+18     	; 0x141e <fsm_lcd_menu+0x706>
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    140c:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 10;
						else if (kursor_horiz > 13)
    140e:	8e 30       	cpi	r24, 0x0E	; 14
    1410:	1c f4       	brge	.+6      	; 0x1418 <fsm_lcd_menu+0x700>
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    1412:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    1416:	03 c0       	rjmp	.+6      	; 0x141e <fsm_lcd_menu+0x706>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 10;
						else if (kursor_horiz > 13)
						kursor_horiz = 13;
    1418:	8d e0       	ldi	r24, 0x0D	; 13
    141a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						
						lcd1602_goto_xy(kursor_horiz,1);
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1424:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    1428:	f6 c0       	rjmp	.+492    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    142a:	62 e0       	ldi	r22, 0x02	; 2
    142c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1430:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    1434:	88 23       	and	r24, r24
    1436:	c9 f0       	breq	.+50     	; 0x146a <fsm_lcd_menu+0x752>
					{
						kursor_horiz -= 3;
    1438:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    143c:	96 ef       	ldi	r25, 0xF6	; 246
    143e:	98 0f       	add	r25, r24
    1440:	93 30       	cpi	r25, 0x03	; 3
    1442:	20 f4       	brcc	.+8      	; 0x144c <fsm_lcd_menu+0x734>
						kursor_horiz = 6;
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    144a:	09 c0       	rjmp	.+18     	; 0x145e <fsm_lcd_menu+0x746>
						
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    144c:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 6;
						else if(kursor_horiz < 3)
    144e:	83 30       	cpi	r24, 0x03	; 3
    1450:	1c f0       	brlt	.+6      	; 0x1458 <fsm_lcd_menu+0x740>
						
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    1452:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
    1456:	03 c0       	rjmp	.+6      	; 0x145e <fsm_lcd_menu+0x746>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 6;
						else if(kursor_horiz < 3)
						kursor_horiz = 3;
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <kursor_horiz>
						
						lcd1602_goto_xy(kursor_horiz,1);
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    1464:	0e 94 d5 03 	call	0x7aa	; 0x7aa <lcd1602_goto_xy>
    1468:	d6 c0       	rjmp	.+428    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1470:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    1474:	88 23       	and	r24, r24
    1476:	99 f1       	breq	.+102    	; 0x14de <fsm_lcd_menu+0x7c6>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON ++
    1478:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    147c:	83 30       	cpi	r24, 0x03	; 3
    147e:	51 f4       	brne	.+20     	; 0x1494 <fsm_lcd_menu+0x77c>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UVECAJ);
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	4b ed       	ldi	r20, 0xDB	; 219
    1484:	51 e0       	ldi	r21, 0x01	; 1
    1486:	6d e0       	ldi	r22, 0x0D	; 13
    1488:	72 e0       	ldi	r23, 0x02	; 2
    148a:	8e e3       	ldi	r24, 0x3E	; 62
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1492:	c1 c0       	rjmp	.+386    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON ++
    1494:	86 30       	cpi	r24, 0x06	; 6
    1496:	51 f4       	brne	.+20     	; 0x14ac <fsm_lcd_menu+0x794>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UVECAJ);
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	4b ed       	ldi	r20, 0xDB	; 219
    149c:	51 e0       	ldi	r21, 0x01	; 1
    149e:	6d e0       	ldi	r22, 0x0D	; 13
    14a0:	72 e0       	ldi	r23, 0x02	; 2
    14a2:	8d e3       	ldi	r24, 0x3D	; 61
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    14aa:	b5 c0       	rjmp	.+362    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 10)											//podesava SATE_OFF ++
    14ac:	8a 30       	cpi	r24, 0x0A	; 10
    14ae:	51 f4       	brne	.+20     	; 0x14c4 <fsm_lcd_menu+0x7ac>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UVECAJ);
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	4b ed       	ldi	r20, 0xDB	; 219
    14b4:	51 e0       	ldi	r21, 0x01	; 1
    14b6:	6d e0       	ldi	r22, 0x0D	; 13
    14b8:	72 e0       	ldi	r23, 0x02	; 2
    14ba:	8c e2       	ldi	r24, 0x2C	; 44
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    14c2:	a9 c0       	rjmp	.+338    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF ++
    14c4:	8d 30       	cpi	r24, 0x0D	; 13
    14c6:	09 f0       	breq	.+2      	; 0x14ca <fsm_lcd_menu+0x7b2>
    14c8:	a6 c0       	rjmp	.+332    	; 0x1616 <fsm_lcd_menu+0x8fe>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UVECAJ);
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	4b ed       	ldi	r20, 0xDB	; 219
    14ce:	51 e0       	ldi	r21, 0x01	; 1
    14d0:	6d e0       	ldi	r22, 0x0D	; 13
    14d2:	72 e0       	ldi	r23, 0x02	; 2
    14d4:	8b e2       	ldi	r24, 0x2B	; 43
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    14dc:	9c c0       	rjmp	.+312    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    14de:	65 e0       	ldi	r22, 0x05	; 5
    14e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    14e4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    14e8:	88 23       	and	r24, r24
    14ea:	99 f1       	breq	.+102    	; 0x1552 <fsm_lcd_menu+0x83a>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON --
    14ec:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <kursor_horiz>
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	51 f4       	brne	.+20     	; 0x1508 <fsm_lcd_menu+0x7f0>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UMANJI);
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	4b ed       	ldi	r20, 0xDB	; 219
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	6d e0       	ldi	r22, 0x0D	; 13
    14fc:	72 e0       	ldi	r23, 0x02	; 2
    14fe:	8e e3       	ldi	r24, 0x3E	; 62
    1500:	92 e0       	ldi	r25, 0x02	; 2
    1502:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1506:	87 c0       	rjmp	.+270    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON --
    1508:	86 30       	cpi	r24, 0x06	; 6
    150a:	51 f4       	brne	.+20     	; 0x1520 <fsm_lcd_menu+0x808>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UMANJI);
    150c:	21 e0       	ldi	r18, 0x01	; 1
    150e:	4b ed       	ldi	r20, 0xDB	; 219
    1510:	51 e0       	ldi	r21, 0x01	; 1
    1512:	6d e0       	ldi	r22, 0x0D	; 13
    1514:	72 e0       	ldi	r23, 0x02	; 2
    1516:	8d e3       	ldi	r24, 0x3D	; 61
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    151e:	7b c0       	rjmp	.+246    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 10)											//podesava SATE_OFF --
    1520:	8a 30       	cpi	r24, 0x0A	; 10
    1522:	51 f4       	brne	.+20     	; 0x1538 <fsm_lcd_menu+0x820>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UMANJI);
    1524:	21 e0       	ldi	r18, 0x01	; 1
    1526:	4b ed       	ldi	r20, 0xDB	; 219
    1528:	51 e0       	ldi	r21, 0x01	; 1
    152a:	6d e0       	ldi	r22, 0x0D	; 13
    152c:	72 e0       	ldi	r23, 0x02	; 2
    152e:	8c e2       	ldi	r24, 0x2C	; 44
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1536:	6f c0       	rjmp	.+222    	; 0x1616 <fsm_lcd_menu+0x8fe>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF --
    1538:	8d 30       	cpi	r24, 0x0D	; 13
    153a:	09 f0       	breq	.+2      	; 0x153e <fsm_lcd_menu+0x826>
    153c:	6c c0       	rjmp	.+216    	; 0x1616 <fsm_lcd_menu+0x8fe>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UMANJI);
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	4b ed       	ldi	r20, 0xDB	; 219
    1542:	51 e0       	ldi	r21, 0x01	; 1
    1544:	6d e0       	ldi	r22, 0x0D	; 13
    1546:	72 e0       	ldi	r23, 0x02	; 2
    1548:	8b e2       	ldi	r24, 0x2B	; 43
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1550:	62 c0       	rjmp	.+196    	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1558:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    155c:	88 23       	and	r24, r24
    155e:	b1 f1       	breq	.+108    	; 0x15cc <fsm_lcd_menu+0x8b4>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    1560:	89 e0       	ldi	r24, 0x09	; 9
    1562:	ec e3       	ldi	r30, 0x3C	; 60
    1564:	f2 e0       	ldi	r31, 0x02	; 2
    1566:	ab ef       	ldi	r26, 0xFB	; 251
    1568:	b1 e0       	ldi	r27, 0x01	; 1
    156a:	01 90       	ld	r0, Z+
    156c:	0d 92       	st	X+, r0
    156e:	8a 95       	dec	r24
    1570:	e1 f7       	brne	.-8      	; 0x156a <fsm_lcd_menu+0x852>
						jednokratno_gasenje = snap_vreme_gasenja;
    1572:	89 e0       	ldi	r24, 0x09	; 9
    1574:	ea e2       	ldi	r30, 0x2A	; 42
    1576:	f2 e0       	ldi	r31, 0x02	; 2
    1578:	a2 ef       	ldi	r26, 0xF2	; 242
    157a:	b1 e0       	ldi	r27, 0x01	; 1
    157c:	01 90       	ld	r0, Z+
    157e:	0d 92       	st	X+, r0
    1580:	8a 95       	dec	r24
    1582:	e1 f7       	brne	.-8      	; 0x157c <fsm_lcd_menu+0x864>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    1584:	cb ef       	ldi	r28, 0xFB	; 251
    1586:	d1 e0       	ldi	r29, 0x01	; 1
    1588:	6a 81       	ldd	r22, Y+2	; 0x02
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    1592:	69 81       	ldd	r22, Y+1	; 0x01
    1594:	85 e0       	ldi	r24, 0x05	; 5
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    159c:	c2 ef       	ldi	r28, 0xF2	; 242
    159e:	d1 e0       	ldi	r29, 0x01	; 1
    15a0:	6a 81       	ldd	r22, Y+2	; 0x02
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    15aa:	69 81       	ldd	r22, Y+1	; 0x01
    15ac:	87 e0       	ldi	r24, 0x07	; 7
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    15ba:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
    15ca:	25 c0       	rjmp	.+74     	; 0x1616 <fsm_lcd_menu+0x8fe>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    15d2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    15d6:	88 23       	and	r24, r24
    15d8:	f1 f0       	breq	.+60     	; 0x1616 <fsm_lcd_menu+0x8fe>
					{
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    15e0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    15ea:	82 e0       	ldi	r24, 0x02	; 2
    15ec:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
    15f0:	12 c0       	rjmp	.+36     	; 0x1616 <fsm_lcd_menu+0x8fe>
		
		case BROJILO:
					
					//Ispisivanje trenutnog napona, struje, snage...
					//kopija DISPL2 ali bez uslova za ciklicno menjanje displeja
					if ( flag_prekid_100ms_VAkWh )	//Ispisujem napon, struju snagu, sa periodom 100ms, da nije zamrznut ispis vec da se vide promene
    15f2:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <flag_prekid_100ms_VAkWh>
    15f6:	88 23       	and	r24, r24
    15f8:	21 f0       	breq	.+8      	; 0x1602 <fsm_lcd_menu+0x8ea>
					{
						flag_prekid_100ms_VAkWh = 0; //reset flaga
    15fa:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <flag_prekid_100ms_VAkWh>
						
						brojilo_LCD_ispis();
    15fe:	0e 94 14 06 	call	0xc28	; 0xc28 <brojilo_LCD_ispis>
					}
					
					
					if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )	//taster enter stisnut
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1608:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <ocitaj_jedan_taster>
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <fsm_lcd_menu+0x8fe>
					{
						//displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
						STATE = MENU1;
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <STATE>
		default: {}
		
	}
	
	
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    161e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup na SDA i SCL, PC4-PC5 
    1622:	0e 94 9f 01 	call	0x33e	; 0x33e <i2c_init>
	lcd1602_init();
    1626:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <lcd1602_init>
	ADC_init();				
    162a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda; 500k
    162e:	60 e2       	ldi	r22, 0x20	; 32
    1630:	71 ea       	ldi	r23, 0xA1	; 161
    1632:	87 e0       	ldi	r24, 0x07	; 7
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <uart_init>
	DS3231_init();			//RTC init
    163a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    163e:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    1642:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    1646:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    1648:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    164a:	78 94       	sei
	//setTime(23, 59, 55, am, _24_hour_format);
	//int i;

	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1654:	c3 e3       	ldi	r28, 0x33	; 51
    1656:	d2 e0       	ldi	r29, 0x02	; 2
    1658:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1662:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    166c:	c5 e4       	ldi	r28, 0x45	; 69
    166e:	d2 e0       	ldi	r29, 0x02	; 2
    1670:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    167a:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    167c:	84 e0       	ldi	r24, 0x04	; 4
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1684:	cb ef       	ldi	r28, 0xFB	; 251
    1686:	d1 e0       	ldi	r29, 0x01	; 1
    1688:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    168a:	85 e0       	ldi	r24, 0x05	; 5
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1692:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    1694:	86 e0       	ldi	r24, 0x06	; 6
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    169c:	c2 ef       	ldi	r28, 0xF2	; 242
    169e:	d1 e0       	ldi	r29, 0x01	; 1
    16a0:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    16a2:	87 e0       	ldi	r24, 0x07	; 7
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    16aa:	89 83       	std	Y+1, r24	; 0x01
	
	energija_32uint =  (uint32_t)EEPROM_read(KWH_BYTE0_ADR);
    16ac:	88 e0       	ldi	r24, 0x08	; 8
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	a0 e0       	ldi	r26, 0x00	; 0
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <energija_32uint>
    16be:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <energija_32uint+0x1>
    16c2:	a0 93 d6 01 	sts	0x01D6, r26	; 0x8001d6 <energija_32uint+0x2>
    16c6:	b0 93 d7 01 	sts	0x01D7, r27	; 0x8001d7 <energija_32uint+0x3>
	energija_32uint |= (uint32_t)EEPROM_read(KWH_BYTE1_ADR) << 8;
    16ca:	89 e0       	ldi	r24, 0x09	; 9
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    16d2:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <energija_32uint>
    16d6:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <energija_32uint+0x1>
    16da:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <energija_32uint+0x2>
    16de:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <energija_32uint+0x3>
    16e2:	58 2b       	or	r21, r24
    16e4:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <energija_32uint>
    16e8:	50 93 d5 01 	sts	0x01D5, r21	; 0x8001d5 <energija_32uint+0x1>
    16ec:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <energija_32uint+0x2>
    16f0:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <energija_32uint+0x3>
	energija_32uint |= (uint32_t)EEPROM_read(KWH_BYTE2_ADR) << 16;
    16f4:	8a e0       	ldi	r24, 0x0A	; 10
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    16fc:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <energija_32uint>
    1700:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <energija_32uint+0x1>
    1704:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <energija_32uint+0x2>
    1708:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <energija_32uint+0x3>
    170c:	68 2b       	or	r22, r24
    170e:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <energija_32uint>
    1712:	50 93 d5 01 	sts	0x01D5, r21	; 0x8001d5 <energija_32uint+0x1>
    1716:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <energija_32uint+0x2>
    171a:	70 93 d7 01 	sts	0x01D7, r23	; 0x8001d7 <energija_32uint+0x3>
	energija_32uint |= (uint32_t)EEPROM_read(KWH_BYTE3_ADR) << 24;
    171e:	8b e0       	ldi	r24, 0x0B	; 11
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1726:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <energija_32uint>
    172a:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <energija_32uint+0x1>
    172e:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <energija_32uint+0x2>
    1732:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <energija_32uint+0x3>
    1736:	8a 01       	movw	r16, r20
    1738:	9b 01       	movw	r18, r22
    173a:	38 2b       	or	r19, r24
    173c:	c9 01       	movw	r24, r18
    173e:	b8 01       	movw	r22, r16
    1740:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <energija_32uint>
    1744:	10 93 d5 01 	sts	0x01D5, r17	; 0x8001d5 <energija_32uint+0x1>
    1748:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <energija_32uint+0x2>
    174c:	30 93 d7 01 	sts	0x01D7, r19	; 0x8001d7 <energija_32uint+0x3>
	energija = ((float)energija_32uint)/100;
    1750:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__floatunsisf>
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	48 ec       	ldi	r20, 0xC8	; 200
    175a:	52 e4       	ldi	r21, 0x42	; 66
    175c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divsf3>
    1760:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <energija>
    1764:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <energija+0x1>
    1768:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <energija+0x2>
    176c:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <energija+0x3>
	
	brojilo_on_off = EEPROM_read(BROJILO_ONOF_ADR);																										
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1778:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <brojilo_on_off>
																												
	/* zastita, usled moguce korupcije eeproma */
	if ( eeprom_zastita(&vreme_paljenja, &vreme_gasenja, &jednokratno_paljenje, &jednokratno_gasenje) )
    177c:	9e 01       	movw	r18, r28
    177e:	4b ef       	ldi	r20, 0xFB	; 251
    1780:	51 e0       	ldi	r21, 0x01	; 1
    1782:	65 e4       	ldi	r22, 0x45	; 69
    1784:	72 e0       	ldi	r23, 0x02	; 2
    1786:	83 e3       	ldi	r24, 0x33	; 51
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 3c 04 	call	0x878	; 0x878 <eeprom_zastita>
	{
		//nekorektna vrednost u eepromu, ili fejl pri citanju
	}
	
	snap_vreme_paljenja = vreme_paljenja;
    178e:	89 e0       	ldi	r24, 0x09	; 9
    1790:	e3 e3       	ldi	r30, 0x33	; 51
    1792:	f2 e0       	ldi	r31, 0x02	; 2
    1794:	ac e3       	ldi	r26, 0x3C	; 60
    1796:	b2 e0       	ldi	r27, 0x02	; 2
    1798:	01 90       	ld	r0, Z+
    179a:	0d 92       	st	X+, r0
    179c:	8a 95       	dec	r24
    179e:	e1 f7       	brne	.-8      	; 0x1798 <main+0x17a>
	snap_vreme_gasenja = vreme_gasenja;
    17a0:	89 e0       	ldi	r24, 0x09	; 9
    17a2:	e5 e4       	ldi	r30, 0x45	; 69
    17a4:	f2 e0       	ldi	r31, 0x02	; 2
    17a6:	aa e2       	ldi	r26, 0x2A	; 42
    17a8:	b2 e0       	ldi	r27, 0x02	; 2
    17aa:	01 90       	ld	r0, Z+
    17ac:	0d 92       	st	X+, r0
    17ae:	8a 95       	dec	r24
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <main+0x18c>
		
		/* ocitava napon i struju */
		adc_read();			
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    17b2:	0f 2e       	mov	r0, r31
    17b4:	f7 e7       	ldi	r31, 0x77	; 119
    17b6:	ef 2e       	mov	r14, r31
    17b8:	f1 e0       	ldi	r31, 0x01	; 1
    17ba:	ff 2e       	mov	r15, r31
    17bc:	f0 2d       	mov	r31, r0
    17be:	cd e0       	ldi	r28, 0x0D	; 13
    17c0:	d2 e0       	ldi	r29, 0x02	; 2
			
			/* integraljenje(sumiranje) snage je enerija. E = P * t     */
			energija += (snaga/3600.0);		//posto merim u kWh, a ovo ide na 1 sekund, a sat ima 3600s delim sa 3600.0
			
			/* upisivanje u eeprom trenutne energije neka ide na svaka 3h. U 00:00 neka dodje do reseta */
			if ( (vreme_trenutno.hr % 3) == 0   &&   vreme_trenutno.min == 0	  &&   vreme_trenutno.s == 0 )	//ako je ugasen u ovo vreme ili omasi sekundu, nece se desiti
    17c2:	0f 2e       	mov	r0, r31
    17c4:	fb ea       	ldi	r31, 0xAB	; 171
    17c6:	df 2e       	mov	r13, r31
    17c8:	f0 2d       	mov	r31, r0
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_trenutno) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    17ca:	cc 24       	eor	r12, r12
    17cc:	c3 94       	inc	r12
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    17ce:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <ocitaj_tastere>
    17d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tasteri>
		
		/* ocitava napon i struju */
		adc_read();			
    17d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <adc_read>
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    17da:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <adc_napon_raw+0x1>
    17de:	8f 93       	push	r24
    17e0:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <adc_napon_raw>
    17e4:	8f 93       	push	r24
    17e6:	ff 92       	push	r15
    17e8:	ef 92       	push	r14
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		uart_send_str(bafer);
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		sprintf(bafer, "%4d  ", adc_struja_raw);
    17f8:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <adc_struja_raw+0x1>
    17fc:	8f 93       	push	r24
    17fe:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <adc_struja_raw>
    1802:	8f 93       	push	r24
    1804:	ff 92       	push	r15
    1806:	ef 92       	push	r14
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		uart_send_str(bafer);
    1810:	ce 01       	movw	r24, r28
    1812:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		
		sprintf(bafer, "%4d  ", napon);
    1816:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
    181a:	8f 93       	push	r24
    181c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
    1820:	8f 93       	push	r24
    1822:	ff 92       	push	r15
    1824:	ef 92       	push	r14
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	0e 94 1c 12 	call	0x2438	; 0x2438 <sprintf>
		uart_send_str(bafer);
    182e:	ce 01       	movw	r24, r28
    1830:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		dtostrf(struja, 4, 1, bafer);
    1834:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
    1838:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
    183c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
    1840:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
    1844:	8e 01       	movw	r16, r28
    1846:	21 e0       	ldi	r18, 0x01	; 1
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	44 e0       	ldi	r20, 0x04	; 4
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <dtostrf>
		uart_send_str(bafer);
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		uart_send_str("  ");
    1858:	86 e0       	ldi	r24, 0x06	; 6
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		dtostrf(snaga, 4, 2, bafer);
    1860:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
    1864:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
    1868:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
    186c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
    1870:	22 e0       	ldi	r18, 0x02	; 2
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	44 e0       	ldi	r20, 0x04	; 4
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <dtostrf>
		uart_send_str(bafer);
    187c:	ce 01       	movw	r24, r28
    187e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		uart_send_str("  ");
    1882:	86 e0       	ldi	r24, 0x06	; 6
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		dtostrf(energija, 5, 2, bafer);
    188a:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    188e:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    1892:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    1896:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    189a:	22 e0       	ldi	r18, 0x02	; 2
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	45 e0       	ldi	r20, 0x05	; 5
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <dtostrf>
		uart_send_str(bafer);
    18a6:	ce 01       	movw	r24, r28
    18a8:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		uart_send_str("\n");
    18ac:	8d e7       	ldi	r24, 0x7D	; 125
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <uart_send_str>
		//uart_send_str(bafer_uart);
		//uart_send_str("\n");
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    18b4:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <flag_pc_int_pomocni>
    18b8:	0d b7       	in	r16, 0x3d	; 61
    18ba:	1e b7       	in	r17, 0x3e	; 62
    18bc:	0e 5e       	subi	r16, 0xEE	; 238
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	1e bf       	out	0x3e, r17	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0d bf       	out	0x3d, r16	; 61
    18ca:	88 23       	and	r24, r24
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <main+0x2b2>
    18ce:	c9 c0       	rjmp	.+402    	; 0x1a62 <main+0x444>
		{
			flag_pc_int_pomocni = 0;
    18d0:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_trenutno.hr, &vreme_trenutno.min, &vreme_trenutno.s, &vreme_trenutno.am_pm, _24_hour_format);
    18d4:	00 e0       	ldi	r16, 0x00	; 0
    18d6:	29 e2       	ldi	r18, 0x29	; 41
    18d8:	32 e0       	ldi	r19, 0x02	; 2
    18da:	41 e2       	ldi	r20, 0x21	; 33
    18dc:	52 e0       	ldi	r21, 0x02	; 2
    18de:	62 e2       	ldi	r22, 0x22	; 34
    18e0:	72 e0       	ldi	r23, 0x02	; 2
    18e2:	83 e2       	ldi	r24, 0x23	; 35
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <getTime>
			
			/* integraljenje(sumiranje) snage je enerija. E = P * t     */
			energija += (snaga/3600.0);		//posto merim u kWh, a ovo ide na 1 sekund, a sat ima 3600s delim sa 3600.0
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	41 e6       	ldi	r20, 0x61	; 97
    18f0:	55 e4       	ldi	r21, 0x45	; 69
    18f2:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
    18f6:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
    18fa:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
    18fe:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
    1902:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <__divsf3>
    1906:	9b 01       	movw	r18, r22
    1908:	ac 01       	movw	r20, r24
    190a:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    190e:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    1912:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    1916:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    191a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__addsf3>
    191e:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <energija>
    1922:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <energija+0x1>
    1926:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <energija+0x2>
    192a:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <energija+0x3>
			
			/* upisivanje u eeprom trenutne energije neka ide na svaka 3h. U 00:00 neka dodje do reseta */
			if ( (vreme_trenutno.hr % 3) == 0   &&   vreme_trenutno.min == 0	  &&   vreme_trenutno.s == 0 )	//ako je ugasen u ovo vreme ili omasi sekundu, nece se desiti
    192e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <vreme_trenutno+0x2>
    1932:	9d 9d       	mul	r25, r13
    1934:	81 2d       	mov	r24, r1
    1936:	11 24       	eor	r1, r1
    1938:	86 95       	lsr	r24
    193a:	28 2f       	mov	r18, r24
    193c:	22 0f       	add	r18, r18
    193e:	82 0f       	add	r24, r18
    1940:	98 13       	cpse	r25, r24
    1942:	5d c0       	rjmp	.+186    	; 0x19fe <main+0x3e0>
    1944:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <vreme_trenutno+0x1>
    1948:	81 11       	cpse	r24, r1
    194a:	59 c0       	rjmp	.+178    	; 0x19fe <main+0x3e0>
    194c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <vreme_trenutno>
    1950:	81 11       	cpse	r24, r1
    1952:	55 c0       	rjmp	.+170    	; 0x19fe <main+0x3e0>
			{
				if(vreme_trenutno.hr == 0)	//ako je 00:00h resetuje. Probelm sa ovim je sto ako je za ovo vreme uC iskljucen, nece doci do reseta
    1954:	91 11       	cpse	r25, r1
    1956:	08 c0       	rjmp	.+16     	; 0x1968 <main+0x34a>
					energija = 0;
    1958:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <energija>
    195c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <energija+0x1>
    1960:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <energija+0x2>
    1964:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <energija+0x3>
				
				energija_32uint = (uint32_t)(energija*100);	//mnozim sa sto jer gledam na 2 decimale
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	48 ec       	ldi	r20, 0xC8	; 200
    196e:	52 e4       	ldi	r21, 0x42	; 66
    1970:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    1974:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    1978:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    197c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    1980:	0e 94 89 11 	call	0x2312	; 0x2312 <__mulsf3>
    1984:	0e 94 cc 10 	call	0x2198	; 0x2198 <__fixunssfsi>
    1988:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <energija_32uint>
    198c:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <energija_32uint+0x1>
    1990:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <energija_32uint+0x2>
    1994:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <energija_32uint+0x3>
				
				EEPROM_write(KWH_BYTE0_ADR, (uint16_t)energija_32uint);
    1998:	88 e0       	ldi	r24, 0x08	; 8
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
				EEPROM_write(KWH_BYTE1_ADR, (uint16_t) (energija_32uint>>8));
    19a0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <energija_32uint>
    19a4:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <energija_32uint+0x1>
    19a8:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <energija_32uint+0x2>
    19ac:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <energija_32uint+0x3>
    19b0:	69 2f       	mov	r22, r25
    19b2:	7a 2f       	mov	r23, r26
    19b4:	8b 2f       	mov	r24, r27
    19b6:	99 27       	eor	r25, r25
    19b8:	89 e0       	ldi	r24, 0x09	; 9
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
				EEPROM_write(KWH_BYTE2_ADR, (uint16_t) (energija_32uint>>16));
    19c0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <energija_32uint>
    19c4:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <energija_32uint+0x1>
    19c8:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <energija_32uint+0x2>
    19cc:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <energija_32uint+0x3>
    19d0:	bd 01       	movw	r22, r26
    19d2:	88 27       	eor	r24, r24
    19d4:	99 27       	eor	r25, r25
    19d6:	8a e0       	ldi	r24, 0x0A	; 10
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
				EEPROM_write(KWH_BYTE3_ADR, (uint16_t) (energija_32uint>>24));
    19de:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <energija_32uint>
    19e2:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <energija_32uint+0x1>
    19e6:	a0 91 d6 01 	lds	r26, 0x01D6	; 0x8001d6 <energija_32uint+0x2>
    19ea:	b0 91 d7 01 	lds	r27, 0x01D7	; 0x8001d7 <energija_32uint+0x3>
    19ee:	6b 2f       	mov	r22, r27
    19f0:	77 27       	eor	r23, r23
    19f2:	88 27       	eor	r24, r24
    19f4:	99 27       	eor	r25, r25
    19f6:	8b e0       	ldi	r24, 0x0B	; 11
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
		
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    19fe:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <jednok_on_off>
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	d1 f4       	brne	.+52     	; 0x1a3a <main+0x41c>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_trenutno) )	//vraca 0 ili 1 (ugasi - upali)
    1a06:	41 e2       	ldi	r20, 0x21	; 33
    1a08:	52 e0       	ldi	r21, 0x02	; 2
    1a0a:	62 ef       	ldi	r22, 0xF2	; 242
    1a0c:	71 e0       	ldi	r23, 0x01	; 1
    1a0e:	8b ef       	ldi	r24, 0xFB	; 251
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	0e 94 00 04 	call	0x800	; 0x800 <period_paljenja>
    1a16:	88 23       	and	r24, r24
    1a18:	29 f0       	breq	.+10     	; 0x1a24 <main+0x406>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1a1a:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <ukljuceno>
					jednok_se_desio = 1;
    1a1e:	c0 92 d8 01 	sts	0x01D8, r12	; 0x8001d8 <jednok_se_desio>
    1a22:	0d c0       	rjmp	.+26     	; 0x1a3e <main+0x420>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    1a24:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <jednok_se_desio>
    1a28:	88 23       	and	r24, r24
    1a2a:	49 f0       	breq	.+18     	; 0x1a3e <main+0x420>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    1a2c:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    1a30:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    1a34:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <jednok_se_desio>
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <main+0x420>
				}
			}
			else
				ukljuceno = 0;
    1a3a:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_trenutno);	//ILI veza glavnog i jednok. perioda
    1a3e:	41 e2       	ldi	r20, 0x21	; 33
    1a40:	52 e0       	ldi	r21, 0x02	; 2
    1a42:	65 e4       	ldi	r22, 0x45	; 69
    1a44:	72 e0       	ldi	r23, 0x02	; 2
    1a46:	83 e3       	ldi	r24, 0x33	; 51
    1a48:	92 e0       	ldi	r25, 0x02	; 2
    1a4a:	0e 94 00 04 	call	0x800	; 0x800 <period_paljenja>
    1a4e:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <ukljuceno>
    1a52:	89 2b       	or	r24, r25
    1a54:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <ukljuceno>
			
			if (ukljuceno)
    1a58:	88 23       	and	r24, r24
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <main+0x442>
				PORTB |= 1<<PINB5;   //high
    1a5c:	2d 9a       	sbi	0x05, 5	; 5
    1a5e:	01 c0       	rjmp	.+2      	; 0x1a62 <main+0x444>
			else
				PORTB &= ~(1<<PINB5);	//low
    1a60:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    1a62:	0e 94 8c 06 	call	0xd18	; 0xd18 <fsm_lcd_menu>
		

    }
    1a66:	b3 ce       	rjmp	.-666    	; 0x17ce <main+0x1b0>

00001a68 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    1a68:	e8 e6       	ldi	r30, 0x68	; 104
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	82 60       	ori	r24, 0x02	; 2
    1a70:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    1a72:	ec e6       	ldi	r30, 0x6C	; 108
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	88 60       	ori	r24, 0x08	; 8
    1a7a:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    1a7c:	3b 98       	cbi	0x07, 3	; 7
    1a7e:	08 95       	ret

00001a80 <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    1a8c:	33 9b       	sbis	0x06, 3	; 6
    1a8e:	05 c0       	rjmp	.+10     	; 0x1a9a <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <flag_pc_int>
		flag_pc_int_pomocni = 1;
    1a96:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <flag_pc_int_pomocni>
	}
		
    1a9a:	8f 91       	pop	r24
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    1aa6:	8a b1       	in	r24, 0x0a	; 10
    1aa8:	8f 70       	andi	r24, 0x0F	; 15
    1aaa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    1aac:	8a b1       	in	r24, 0x0a	; 10
    1aae:	83 7f       	andi	r24, 0xF3	; 243
    1ab0:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( 1<<TASTER_NONSTOP_pinPort );
    1ab2:	20 98       	cbi	0x04, 0	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    1ab4:	8b b1       	in	r24, 0x0b	; 11
    1ab6:	80 6f       	ori	r24, 0xF0	; 240
    1ab8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    1aba:	8b b1       	in	r24, 0x0b	; 11
    1abc:	8c 60       	ori	r24, 0x0C	; 12
    1abe:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NONSTOP_pinPort);
    1ac0:	28 9a       	sbi	0x05, 0	; 5
    1ac2:	08 95       	ret

00001ac4 <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    1ac4:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <flag_prekid_debounce_time_half>
    1ac8:	88 23       	and	r24, r24
    1aca:	69 f0       	breq	.+26     	; 0x1ae6 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    1acc:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = TEMP_REG_READ;
    1ad0:	89 b1       	in	r24, 0x09	; 9
    1ad2:	93 b1       	in	r25, 0x03	; 3
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	26 95       	lsr	r18
    1ad8:	26 95       	lsr	r18
    1ada:	30 e4       	ldi	r19, 0x40	; 64
    1adc:	93 9f       	mul	r25, r19
    1ade:	c0 01       	movw	r24, r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	82 2b       	or	r24, r18
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    1ae6:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = TEMP_REG_READ;

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    1ae8:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <flag_prekid_debounce_time>
    1aec:	99 23       	and	r25, r25
    1aee:	81 f0       	breq	.+32     	; 0x1b10 <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    1af0:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = TEMP_REG_READ;
    1af4:	29 b1       	in	r18, 0x09	; 9
    1af6:	93 b1       	in	r25, 0x03	; 3
		
		if (temp_reg1 == temp_reg2)
    1af8:	42 2f       	mov	r20, r18
    1afa:	46 95       	lsr	r20
    1afc:	46 95       	lsr	r20
    1afe:	50 e4       	ldi	r21, 0x40	; 64
    1b00:	95 9f       	mul	r25, r21
    1b02:	90 01       	movw	r18, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	24 2b       	or	r18, r20
    1b08:	82 13       	cpse	r24, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1b0c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri_reg.2113>
		
	}
	
	return tasteri_reg;
}
    1b10:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri_reg.2113>
    1b14:	08 95       	ret

00001b16 <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	20 95       	com	r18
    1b1c:	30 95       	com	r19
    1b1e:	e6 2f       	mov	r30, r22
    1b20:	a9 01       	movw	r20, r18
    1b22:	06 2e       	mov	r0, r22
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <ocitaj_jedan_taster+0x14>
    1b26:	55 95       	asr	r21
    1b28:	47 95       	ror	r20
    1b2a:	0a 94       	dec	r0
    1b2c:	e2 f7       	brpl	.-8      	; 0x1b26 <ocitaj_jedan_taster+0x10>
    1b2e:	40 ff       	sbrs	r20, 0
    1b30:	17 c0       	rjmp	.+46     	; 0x1b60 <ocitaj_jedan_taster+0x4a>
    1b32:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <flag_stisnut.2122>
    1b36:	91 11       	cpse	r25, r1
    1b38:	13 c0       	rjmp	.+38     	; 0x1b60 <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <flag_stisnut.2122>
		temp_tast = button;		//zapamtim koji je taster stisnut
    1b40:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <temp_tast.2121>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1b44:	80 95       	com	r24
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	50 e0       	ldi	r21, 0x00	; 0
    1b4a:	06 2e       	mov	r0, r22
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <ocitaj_jedan_taster+0x3c>
    1b4e:	44 0f       	add	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <ocitaj_jedan_taster+0x38>
    1b56:	84 23       	and	r24, r20
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <ocitaj_jedan_taster+0x46>
    1b5a:	45 c0       	rjmp	.+138    	; 0x1be6 <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    1b60:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <temp_tast.2121>
    1b64:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1b66:	80 95       	com	r24
    1b68:	41 e0       	ldi	r20, 0x01	; 1
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	09 2e       	mov	r0, r25
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <ocitaj_jedan_taster+0x5e>
    1b70:	44 0f       	add	r20, r20
    1b72:	55 1f       	adc	r21, r21
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <ocitaj_jedan_taster+0x5a>
    1b78:	84 23       	and	r24, r20
    1b7a:	19 f1       	breq	.+70     	; 0x1bc2 <ocitaj_jedan_taster+0xac>
    1b7c:	8c ef       	ldi	r24, 0xFC	; 252
    1b7e:	89 0f       	add	r24, r25
    1b80:	82 30       	cpi	r24, 0x02	; 2
    1b82:	08 f5       	brcc	.+66     	; 0x1bc6 <ocitaj_jedan_taster+0xb0>
    1b84:	69 13       	cpse	r22, r25
    1b86:	21 c0       	rjmp	.+66     	; 0x1bca <ocitaj_jedan_taster+0xb4>
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    1b8e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <delay_enable.2123>
    1b92:	91 30       	cpi	r25, 0x01	; 1
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    1b96:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <delay_enable.2123>
			delay_timer = 0;	//start, timer ISR ga uvecava
    1b9a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <delay_timer+0x1>
    1b9e:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    1ba2:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <delay_timer>
    1ba6:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <delay_timer+0x1>
    1baa:	20 39       	cpi	r18, 0x90	; 144
    1bac:	31 40       	sbci	r19, 0x01	; 1
    1bae:	00 f1       	brcs	.+64     	; 0x1bf0 <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    1bb0:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <flag_prekid_50ms>
    1bb4:	99 23       	and	r25, r25
    1bb6:	e1 f0       	breq	.+56     	; 0x1bf0 <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    1bb8:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	89 27       	eor	r24, r25
    1bc0:	08 95       	ret
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <ocitaj_jedan_taster+0xb6>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <ocitaj_jedan_taster+0xb6>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <ocitaj_jedan_taster+0xbc>
    1bce:	35 95       	asr	r19
    1bd0:	27 95       	ror	r18
    1bd2:	ea 95       	dec	r30
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <ocitaj_jedan_taster+0xb8>
    1bd6:	20 fd       	sbrc	r18, 0
    1bd8:	0b c0       	rjmp	.+22     	; 0x1bf0 <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1bda:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <flag_stisnut.2122>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <delay_enable.2123>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    1be4:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1be6:	64 50       	subi	r22, 0x04	; 4
    1be8:	62 30       	cpi	r22, 0x02	; 2
    1bea:	80 f2       	brcs	.-96     	; 0x1b8c <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	ee cf       	rjmp	.-36     	; 0x1bcc <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    1bf0:	08 95       	ret

00001bf2 <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    1bf2:	98 2f       	mov	r25, r24
    1bf4:	92 95       	swap	r25
    1bf6:	9f 70       	andi	r25, 0x0F	; 15
    1bf8:	99 0f       	add	r25, r25
    1bfa:	29 2f       	mov	r18, r25
    1bfc:	22 0f       	add	r18, r18
    1bfe:	22 0f       	add	r18, r18
    1c00:	92 0f       	add	r25, r18
    1c02:	8f 70       	andi	r24, 0x0F	; 15
    1c04:	89 0f       	add	r24, r25
    1c06:	08 95       	ret

00001c08 <decimal_to_bcd>:
    1c08:	9d ec       	ldi	r25, 0xCD	; 205
    1c0a:	89 9f       	mul	r24, r25
    1c0c:	91 2d       	mov	r25, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	96 95       	lsr	r25
    1c12:	96 95       	lsr	r25
    1c14:	96 95       	lsr	r25
    1c16:	20 e1       	ldi	r18, 0x10	; 16
    1c18:	92 9f       	mul	r25, r18
    1c1a:	a0 01       	movw	r20, r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	99 0f       	add	r25, r25
    1c20:	29 2f       	mov	r18, r25
    1c22:	22 0f       	add	r18, r18
    1c24:	22 0f       	add	r18, r18
    1c26:	92 0f       	add	r25, r18
    1c28:	89 1b       	sub	r24, r25
    1c2a:	8f 70       	andi	r24, 0x0F	; 15
    1c2c:	84 2b       	or	r24, r20
    1c2e:	08 95       	ret

00001c30 <DS3231_Read>:
    1c30:	cf 93       	push	r28
    1c32:	c8 2f       	mov	r28, r24
    1c34:	80 ed       	ldi	r24, 0xD0	; 208
    1c36:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1c3a:	8c 2f       	mov	r24, r28
    1c3c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    1c40:	81 ed       	ldi	r24, 0xD1	; 209
    1c42:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1c46:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <i2c_readNak>
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <DS3231_Write>:
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	d8 2f       	mov	r29, r24
    1c54:	c6 2f       	mov	r28, r22
    1c56:	80 ed       	ldi	r24, 0xD0	; 208
    1c58:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1c5c:	8d 2f       	mov	r24, r29
    1c5e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    1c62:	8c 2f       	mov	r24, r28
    1c64:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    1c68:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <DS3231_init>:
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	8e e0       	ldi	r24, 0x0E	; 14
    1c76:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	8f e0       	ldi	r24, 0x0F	; 15
    1c7e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
    1c82:	68 ee       	ldi	r22, 0xE8	; 232
    1c84:	80 e1       	ldi	r24, 0x10	; 16
    1c86:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
    1c8a:	08 95       	ret

00001c8c <getTime>:
    1c8c:	af 92       	push	r10
    1c8e:	bf 92       	push	r11
    1c90:	cf 92       	push	r12
    1c92:	df 92       	push	r13
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	0f 93       	push	r16
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ec 01       	movw	r28, r24
    1ca0:	7b 01       	movw	r14, r22
    1ca2:	6a 01       	movw	r12, r20
    1ca4:	59 01       	movw	r10, r18
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DS3231_Read>
    1cac:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <bcd_to_decimal>
    1cb0:	f6 01       	movw	r30, r12
    1cb2:	80 83       	st	Z, r24
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DS3231_Read>
    1cba:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <bcd_to_decimal>
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	80 83       	st	Z, r24
    1cc2:	01 30       	cpi	r16, 0x01	; 1
    1cc4:	81 f4       	brne	.+32     	; 0x1ce6 <getTime+0x5a>
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DS3231_Read>
    1ccc:	85 fb       	bst	r24, 5
    1cce:	88 27       	eor	r24, r24
    1cd0:	80 f9       	bld	r24, 0
    1cd2:	f5 01       	movw	r30, r10
    1cd4:	80 83       	st	Z, r24
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DS3231_Read>
    1cdc:	8f 71       	andi	r24, 0x1F	; 31
    1cde:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <bcd_to_decimal>
    1ce2:	88 83       	st	Y, r24
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <getTime+0x68>
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <DS3231_Read>
    1cec:	8f 73       	andi	r24, 0x3F	; 63
    1cee:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <bcd_to_decimal>
    1cf2:	88 83       	st	Y, r24
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	cf 90       	pop	r12
    1d02:	bf 90       	pop	r11
    1d04:	af 90       	pop	r10
    1d06:	08 95       	ret

00001d08 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	d8 2f       	mov	r29, r24
    1d12:	c6 2f       	mov	r28, r22
    1d14:	84 2f       	mov	r24, r20
    1d16:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    1d18:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <decimal_to_bcd>
    1d1c:	68 2f       	mov	r22, r24
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1d24:	8c 2f       	mov	r24, r28
    1d26:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <decimal_to_bcd>
    1d2a:	68 2f       	mov	r22, r24
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
	
	switch(hour_format)
    1d32:	01 30       	cpi	r16, 0x01	; 1
    1d34:	79 f4       	brne	.+30     	; 0x1d54 <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    1d36:	11 30       	cpi	r17, 0x01	; 1
    1d38:	11 f0       	breq	.+4      	; 0x1d3e <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    1d3a:	c0 e4       	ldi	r28, 0x40	; 64
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    1d3e:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1d40:	8d 2f       	mov	r24, r29
    1d42:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <decimal_to_bcd>
    1d46:	8f 71       	andi	r24, 0x1F	; 31
    1d48:	68 2f       	mov	r22, r24
    1d4a:	6c 2b       	or	r22, r28
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
			break;
    1d52:	08 c0       	rjmp	.+16     	; 0x1d64 <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1d54:	8d 2f       	mov	r24, r29
    1d56:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <decimal_to_bcd>
    1d5a:	68 2f       	mov	r22, r24
    1d5c:	6f 73       	andi	r22, 0x3F	; 63
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <DS3231_Write>
			break;
		}
	}
}
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <tajmer0_init>:
volatile uint8_t flag_prekid_100ms_VAkWh = 0;		//koristim za ispis napona i struje, da nisu zamrznuti dok se prikazuju vec da se vide eventualne promene
volatile uint8_t brojac_prekida_tajmera0_za100ms_VAkWh = 0;	//za 100ms flag, tj tajmer

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    1d76:	99 ef       	ldi	r25, 0xF9	; 249
    1d78:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    1d7a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1d7e:	08 95       	ret

00001d80 <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	8f 93       	push	r24
    1d8c:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    1d94:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <brojac_prekida_tajmera0>
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    1d9e:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <brojac_prekida_tajmera0_debounce_half>
    1da2:	8f 5f       	subi	r24, 0xFF	; 255
    1da4:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    1da8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <brojac_prekida_tajmera0_debounce>
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
    1dae:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad; 16bit
    1db2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <delay_timer>
    1db6:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <delay_timer+0x1>
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <delay_timer+0x1>
    1dc0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <delay_timer>
	timer_disp_cycle++;	//u main-u resetujem; 16bit
    1dc4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <timer_disp_cycle>
    1dc8:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <timer_disp_cycle+0x1>
    1dcc:	01 96       	adiw	r24, 0x01	; 1
    1dce:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <timer_disp_cycle+0x1>
    1dd2:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <timer_disp_cycle>
	brojac_prekida_tajmera0_za100ms_VAkWh++;
    1dd6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <brojac_prekida_tajmera0_za100ms_VAkWh>
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <brojac_prekida_tajmera0_za100ms_VAkWh>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1de0:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <brojac_prekida_tajmera0>
    1de4:	84 36       	cpi	r24, 0x64	; 100
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <__vector_14+0x72>
	{
		brojac_prekida_tajmera0 = 0;
    1de8:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    1df2:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <brojac_prekida_tajmera0_debounce_half>
    1df6:	83 30       	cpi	r24, 0x03	; 3
    1df8:	29 f4       	brne	.+10     	; 0x1e04 <__vector_14+0x84>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1dfa:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1e04:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <brojac_prekida_tajmera0_debounce>
    1e08:	86 30       	cpi	r24, 0x06	; 6
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <__vector_14+0x96>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1e0c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <flag_prekid_debounce_time>
	}
	
	if(brojac_prekida_tajmera0_za100ms_VAkWh == 100)
    1e16:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <brojac_prekida_tajmera0_za100ms_VAkWh>
    1e1a:	84 36       	cpi	r24, 0x64	; 100
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <__vector_14+0xa4>
	{
		flag_prekid_100ms_VAkWh = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <flag_prekid_100ms_VAkWh>
	}
	
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	0f 90       	pop	r0
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	0f 90       	pop	r0
    1e2e:	1f 90       	pop	r1
    1e30:	18 95       	reti

00001e32 <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1e32:	1f 92       	push	r1
    1e34:	0f 92       	push	r0
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	0f 92       	push	r0
    1e3a:	11 24       	eor	r1, r1
	poslato=0;
    1e3c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <poslato>
}
    1e40:	0f 90       	pop	r0
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	0f 90       	pop	r0
    1e46:	1f 90       	pop	r1
    1e48:	18 95       	reti

00001e4a <__vector_18>:

ISR(USART_RX_vect)
{
    1e4a:	1f 92       	push	r1
    1e4c:	0f 92       	push	r0
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	0f 92       	push	r0
    1e52:	11 24       	eor	r1, r1
    1e54:	8f 93       	push	r24
    1e56:	ef 93       	push	r30
    1e58:	ff 93       	push	r31
	input_char=UDR0;
    1e5a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e5e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    1e62:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <buff_size>
    1e66:	88 30       	cpi	r24, 0x08	; 8
    1e68:	98 f4       	brcc	.+38     	; 0x1e90 <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1e6a:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <buff_size>
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <input_char>
    1e74:	e0 5b       	subi	r30, 0xB0	; 176
    1e76:	fd 4f       	sbci	r31, 0xFD	; 253
    1e78:	80 83       	st	Z, r24
		buff_size++;
    1e7a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <buff_size>
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <buff_size>
		input_buffer[buff_size]='\0';
    1e84:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <buff_size>
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	e0 5b       	subi	r30, 0xB0	; 176
    1e8c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e8e:	10 82       	st	Z, r1
	}
}
    1e90:	ff 91       	pop	r31
    1e92:	ef 91       	pop	r30
    1e94:	8f 91       	pop	r24
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    1ea0:	22 e0       	ldi	r18, 0x02	; 2
    1ea2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1ea6:	28 ed       	ldi	r18, 0xD8	; 216
    1ea8:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1eac:	26 e0       	ldi	r18, 0x06	; 6
    1eae:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    1eb2:	61 15       	cp	r22, r1
    1eb4:	2c e2       	ldi	r18, 0x2C	; 44
    1eb6:	72 07       	cpc	r23, r18
    1eb8:	21 e0       	ldi	r18, 0x01	; 1
    1eba:	82 07       	cpc	r24, r18
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	09 f4       	brne	.+2      	; 0x1ec2 <uart_init+0x22>
    1ec0:	51 c0       	rjmp	.+162    	; 0x1f64 <uart_init+0xc4>
    1ec2:	c8 f4       	brcc	.+50     	; 0x1ef6 <uart_init+0x56>
    1ec4:	60 34       	cpi	r22, 0x40	; 64
    1ec6:	28 e3       	ldi	r18, 0x38	; 56
    1ec8:	72 07       	cpc	r23, r18
    1eca:	81 05       	cpc	r24, r1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	a9 f1       	breq	.+106    	; 0x1f3a <uart_init+0x9a>
    1ed0:	30 f4       	brcc	.+12     	; 0x1ede <uart_init+0x3e>
    1ed2:	60 38       	cpi	r22, 0x80	; 128
    1ed4:	75 42       	sbci	r23, 0x25	; 37
    1ed6:	81 05       	cpc	r24, r1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	41 f1       	breq	.+80     	; 0x1f2c <uart_init+0x8c>
    1edc:	64 c0       	rjmp	.+200    	; 0x1fa6 <uart_init+0x106>
    1ede:	61 15       	cp	r22, r1
    1ee0:	2b e4       	ldi	r18, 0x4B	; 75
    1ee2:	72 07       	cpc	r23, r18
    1ee4:	81 05       	cpc	r24, r1
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	79 f1       	breq	.+94     	; 0x1f48 <uart_init+0xa8>
    1eea:	61 15       	cp	r22, r1
    1eec:	76 49       	sbci	r23, 0x96	; 150
    1eee:	81 05       	cpc	r24, r1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	89 f1       	breq	.+98     	; 0x1f56 <uart_init+0xb6>
    1ef4:	58 c0       	rjmp	.+176    	; 0x1fa6 <uart_init+0x106>
    1ef6:	60 32       	cpi	r22, 0x20	; 32
    1ef8:	21 ea       	ldi	r18, 0xA1	; 161
    1efa:	72 07       	cpc	r23, r18
    1efc:	27 e0       	ldi	r18, 0x07	; 7
    1efe:	82 07       	cpc	r24, r18
    1f00:	91 05       	cpc	r25, r1
    1f02:	f1 f1       	breq	.+124    	; 0x1f80 <uart_init+0xe0>
    1f04:	30 f4       	brcc	.+12     	; 0x1f12 <uart_init+0x72>
    1f06:	60 39       	cpi	r22, 0x90	; 144
    1f08:	70 4d       	sbci	r23, 0xD0	; 208
    1f0a:	83 40       	sbci	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	89 f1       	breq	.+98     	; 0x1f72 <uart_init+0xd2>
    1f10:	4a c0       	rjmp	.+148    	; 0x1fa6 <uart_init+0x106>
    1f12:	60 34       	cpi	r22, 0x40	; 64
    1f14:	22 e4       	ldi	r18, 0x42	; 66
    1f16:	72 07       	cpc	r23, r18
    1f18:	2f e0       	ldi	r18, 0x0F	; 15
    1f1a:	82 07       	cpc	r24, r18
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	b9 f1       	breq	.+110    	; 0x1f8e <uart_init+0xee>
    1f20:	60 38       	cpi	r22, 0x80	; 128
    1f22:	74 48       	sbci	r23, 0x84	; 132
    1f24:	8e 41       	sbci	r24, 0x1E	; 30
    1f26:	91 05       	cpc	r25, r1
    1f28:	c9 f1       	breq	.+114    	; 0x1f9c <uart_init+0xfc>
    1f2a:	3d c0       	rjmp	.+122    	; 0x1fa6 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1f2c:	8f ec       	ldi	r24, 0xCF	; 207
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f34:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f38:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1f3a:	8a e8       	ldi	r24, 0x8A	; 138
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f42:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f46:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1f48:	87 e6       	ldi	r24, 0x67	; 103
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f50:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f54:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1f56:	83 e3       	ldi	r24, 0x33	; 51
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f5e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f62:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    1f64:	89 e1       	ldi	r24, 0x19	; 25
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f70:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    1f72:	87 e0       	ldi	r24, 0x07	; 7
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f7a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f7e:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f8c:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1f96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1f9a:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1f9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1fa0:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1fa4:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1fa6:	8f ec       	ldi	r24, 0xCF	; 207
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1fae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1fb2:	08 95       	ret

00001fb4 <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
    1fb4:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1fb6:	90 81       	ld	r25, Z
    1fb8:	99 23       	and	r25, r25
    1fba:	71 f0       	breq	.+28     	; 0x1fd8 <uart_send_str+0x24>
    1fbc:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1fbe:	a6 ec       	ldi	r26, 0xC6	; 198
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1fc4:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1fc6:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1fca:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <poslato>
    1fce:	91 11       	cpse	r25, r1
    1fd0:	fc cf       	rjmp	.-8      	; 0x1fca <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1fd2:	91 91       	ld	r25, Z+
    1fd4:	91 11       	cpse	r25, r1
    1fd6:	f6 cf       	rjmp	.-20     	; 0x1fc4 <uart_send_str+0x10>
    1fd8:	08 95       	ret

00001fda <__subsf3>:
    1fda:	50 58       	subi	r21, 0x80	; 128

00001fdc <__addsf3>:
    1fdc:	bb 27       	eor	r27, r27
    1fde:	aa 27       	eor	r26, r26
    1fe0:	0e 94 05 10 	call	0x200a	; 0x200a <__addsf3x>
    1fe4:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>
    1fe8:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_pscA>
    1fec:	38 f0       	brcs	.+14     	; 0x1ffc <__addsf3+0x20>
    1fee:	0e 94 48 11 	call	0x2290	; 0x2290 <__fp_pscB>
    1ff2:	20 f0       	brcs	.+8      	; 0x1ffc <__addsf3+0x20>
    1ff4:	39 f4       	brne	.+14     	; 0x2004 <__addsf3+0x28>
    1ff6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ff8:	19 f4       	brne	.+6      	; 0x2000 <__addsf3+0x24>
    1ffa:	26 f4       	brtc	.+8      	; 0x2004 <__addsf3+0x28>
    1ffc:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>
    2000:	0e f4       	brtc	.+2      	; 0x2004 <__addsf3+0x28>
    2002:	e0 95       	com	r30
    2004:	e7 fb       	bst	r30, 7
    2006:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>

0000200a <__addsf3x>:
    200a:	e9 2f       	mov	r30, r25
    200c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_split3>
    2010:	58 f3       	brcs	.-42     	; 0x1fe8 <__addsf3+0xc>
    2012:	ba 17       	cp	r27, r26
    2014:	62 07       	cpc	r22, r18
    2016:	73 07       	cpc	r23, r19
    2018:	84 07       	cpc	r24, r20
    201a:	95 07       	cpc	r25, r21
    201c:	20 f0       	brcs	.+8      	; 0x2026 <__addsf3x+0x1c>
    201e:	79 f4       	brne	.+30     	; 0x203e <__addsf3x+0x34>
    2020:	a6 f5       	brtc	.+104    	; 0x208a <__addsf3x+0x80>
    2022:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_zero>
    2026:	0e f4       	brtc	.+2      	; 0x202a <__addsf3x+0x20>
    2028:	e0 95       	com	r30
    202a:	0b 2e       	mov	r0, r27
    202c:	ba 2f       	mov	r27, r26
    202e:	a0 2d       	mov	r26, r0
    2030:	0b 01       	movw	r0, r22
    2032:	b9 01       	movw	r22, r18
    2034:	90 01       	movw	r18, r0
    2036:	0c 01       	movw	r0, r24
    2038:	ca 01       	movw	r24, r20
    203a:	a0 01       	movw	r20, r0
    203c:	11 24       	eor	r1, r1
    203e:	ff 27       	eor	r31, r31
    2040:	59 1b       	sub	r21, r25
    2042:	99 f0       	breq	.+38     	; 0x206a <__addsf3x+0x60>
    2044:	59 3f       	cpi	r21, 0xF9	; 249
    2046:	50 f4       	brcc	.+20     	; 0x205c <__addsf3x+0x52>
    2048:	50 3e       	cpi	r21, 0xE0	; 224
    204a:	68 f1       	brcs	.+90     	; 0x20a6 <__addsf3x+0x9c>
    204c:	1a 16       	cp	r1, r26
    204e:	f0 40       	sbci	r31, 0x00	; 0
    2050:	a2 2f       	mov	r26, r18
    2052:	23 2f       	mov	r18, r19
    2054:	34 2f       	mov	r19, r20
    2056:	44 27       	eor	r20, r20
    2058:	58 5f       	subi	r21, 0xF8	; 248
    205a:	f3 cf       	rjmp	.-26     	; 0x2042 <__addsf3x+0x38>
    205c:	46 95       	lsr	r20
    205e:	37 95       	ror	r19
    2060:	27 95       	ror	r18
    2062:	a7 95       	ror	r26
    2064:	f0 40       	sbci	r31, 0x00	; 0
    2066:	53 95       	inc	r21
    2068:	c9 f7       	brne	.-14     	; 0x205c <__addsf3x+0x52>
    206a:	7e f4       	brtc	.+30     	; 0x208a <__addsf3x+0x80>
    206c:	1f 16       	cp	r1, r31
    206e:	ba 0b       	sbc	r27, r26
    2070:	62 0b       	sbc	r22, r18
    2072:	73 0b       	sbc	r23, r19
    2074:	84 0b       	sbc	r24, r20
    2076:	ba f0       	brmi	.+46     	; 0x20a6 <__addsf3x+0x9c>
    2078:	91 50       	subi	r25, 0x01	; 1
    207a:	a1 f0       	breq	.+40     	; 0x20a4 <__addsf3x+0x9a>
    207c:	ff 0f       	add	r31, r31
    207e:	bb 1f       	adc	r27, r27
    2080:	66 1f       	adc	r22, r22
    2082:	77 1f       	adc	r23, r23
    2084:	88 1f       	adc	r24, r24
    2086:	c2 f7       	brpl	.-16     	; 0x2078 <__addsf3x+0x6e>
    2088:	0e c0       	rjmp	.+28     	; 0x20a6 <__addsf3x+0x9c>
    208a:	ba 0f       	add	r27, r26
    208c:	62 1f       	adc	r22, r18
    208e:	73 1f       	adc	r23, r19
    2090:	84 1f       	adc	r24, r20
    2092:	48 f4       	brcc	.+18     	; 0x20a6 <__addsf3x+0x9c>
    2094:	87 95       	ror	r24
    2096:	77 95       	ror	r23
    2098:	67 95       	ror	r22
    209a:	b7 95       	ror	r27
    209c:	f7 95       	ror	r31
    209e:	9e 3f       	cpi	r25, 0xFE	; 254
    20a0:	08 f0       	brcs	.+2      	; 0x20a4 <__addsf3x+0x9a>
    20a2:	b0 cf       	rjmp	.-160    	; 0x2004 <__addsf3+0x28>
    20a4:	93 95       	inc	r25
    20a6:	88 0f       	add	r24, r24
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <__addsf3x+0xa2>
    20aa:	99 27       	eor	r25, r25
    20ac:	ee 0f       	add	r30, r30
    20ae:	97 95       	ror	r25
    20b0:	87 95       	ror	r24
    20b2:	08 95       	ret

000020b4 <__divsf3>:
    20b4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <__divsf3x>
    20b8:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>
    20bc:	0e 94 48 11 	call	0x2290	; 0x2290 <__fp_pscB>
    20c0:	58 f0       	brcs	.+22     	; 0x20d8 <__divsf3+0x24>
    20c2:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_pscA>
    20c6:	40 f0       	brcs	.+16     	; 0x20d8 <__divsf3+0x24>
    20c8:	29 f4       	brne	.+10     	; 0x20d4 <__divsf3+0x20>
    20ca:	5f 3f       	cpi	r21, 0xFF	; 255
    20cc:	29 f0       	breq	.+10     	; 0x20d8 <__divsf3+0x24>
    20ce:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    20d2:	51 11       	cpse	r21, r1
    20d4:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    20d8:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>

000020dc <__divsf3x>:
    20dc:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_split3>
    20e0:	68 f3       	brcs	.-38     	; 0x20bc <__divsf3+0x8>

000020e2 <__divsf3_pse>:
    20e2:	99 23       	and	r25, r25
    20e4:	b1 f3       	breq	.-20     	; 0x20d2 <__divsf3+0x1e>
    20e6:	55 23       	and	r21, r21
    20e8:	91 f3       	breq	.-28     	; 0x20ce <__divsf3+0x1a>
    20ea:	95 1b       	sub	r25, r21
    20ec:	55 0b       	sbc	r21, r21
    20ee:	bb 27       	eor	r27, r27
    20f0:	aa 27       	eor	r26, r26
    20f2:	62 17       	cp	r22, r18
    20f4:	73 07       	cpc	r23, r19
    20f6:	84 07       	cpc	r24, r20
    20f8:	38 f0       	brcs	.+14     	; 0x2108 <__divsf3_pse+0x26>
    20fa:	9f 5f       	subi	r25, 0xFF	; 255
    20fc:	5f 4f       	sbci	r21, 0xFF	; 255
    20fe:	22 0f       	add	r18, r18
    2100:	33 1f       	adc	r19, r19
    2102:	44 1f       	adc	r20, r20
    2104:	aa 1f       	adc	r26, r26
    2106:	a9 f3       	breq	.-22     	; 0x20f2 <__divsf3_pse+0x10>
    2108:	35 d0       	rcall	.+106    	; 0x2174 <__divsf3_pse+0x92>
    210a:	0e 2e       	mov	r0, r30
    210c:	3a f0       	brmi	.+14     	; 0x211c <__divsf3_pse+0x3a>
    210e:	e0 e8       	ldi	r30, 0x80	; 128
    2110:	32 d0       	rcall	.+100    	; 0x2176 <__divsf3_pse+0x94>
    2112:	91 50       	subi	r25, 0x01	; 1
    2114:	50 40       	sbci	r21, 0x00	; 0
    2116:	e6 95       	lsr	r30
    2118:	00 1c       	adc	r0, r0
    211a:	ca f7       	brpl	.-14     	; 0x210e <__divsf3_pse+0x2c>
    211c:	2b d0       	rcall	.+86     	; 0x2174 <__divsf3_pse+0x92>
    211e:	fe 2f       	mov	r31, r30
    2120:	29 d0       	rcall	.+82     	; 0x2174 <__divsf3_pse+0x92>
    2122:	66 0f       	add	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	88 1f       	adc	r24, r24
    2128:	bb 1f       	adc	r27, r27
    212a:	26 17       	cp	r18, r22
    212c:	37 07       	cpc	r19, r23
    212e:	48 07       	cpc	r20, r24
    2130:	ab 07       	cpc	r26, r27
    2132:	b0 e8       	ldi	r27, 0x80	; 128
    2134:	09 f0       	breq	.+2      	; 0x2138 <__divsf3_pse+0x56>
    2136:	bb 0b       	sbc	r27, r27
    2138:	80 2d       	mov	r24, r0
    213a:	bf 01       	movw	r22, r30
    213c:	ff 27       	eor	r31, r31
    213e:	93 58       	subi	r25, 0x83	; 131
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	3a f0       	brmi	.+14     	; 0x2152 <__divsf3_pse+0x70>
    2144:	9e 3f       	cpi	r25, 0xFE	; 254
    2146:	51 05       	cpc	r21, r1
    2148:	78 f0       	brcs	.+30     	; 0x2168 <__divsf3_pse+0x86>
    214a:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    214e:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    2152:	5f 3f       	cpi	r21, 0xFF	; 255
    2154:	e4 f3       	brlt	.-8      	; 0x214e <__divsf3_pse+0x6c>
    2156:	98 3e       	cpi	r25, 0xE8	; 232
    2158:	d4 f3       	brlt	.-12     	; 0x214e <__divsf3_pse+0x6c>
    215a:	86 95       	lsr	r24
    215c:	77 95       	ror	r23
    215e:	67 95       	ror	r22
    2160:	b7 95       	ror	r27
    2162:	f7 95       	ror	r31
    2164:	9f 5f       	subi	r25, 0xFF	; 255
    2166:	c9 f7       	brne	.-14     	; 0x215a <__divsf3_pse+0x78>
    2168:	88 0f       	add	r24, r24
    216a:	91 1d       	adc	r25, r1
    216c:	96 95       	lsr	r25
    216e:	87 95       	ror	r24
    2170:	97 f9       	bld	r25, 7
    2172:	08 95       	ret
    2174:	e1 e0       	ldi	r30, 0x01	; 1
    2176:	66 0f       	add	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	88 1f       	adc	r24, r24
    217c:	bb 1f       	adc	r27, r27
    217e:	62 17       	cp	r22, r18
    2180:	73 07       	cpc	r23, r19
    2182:	84 07       	cpc	r24, r20
    2184:	ba 07       	cpc	r27, r26
    2186:	20 f0       	brcs	.+8      	; 0x2190 <__divsf3_pse+0xae>
    2188:	62 1b       	sub	r22, r18
    218a:	73 0b       	sbc	r23, r19
    218c:	84 0b       	sbc	r24, r20
    218e:	ba 0b       	sbc	r27, r26
    2190:	ee 1f       	adc	r30, r30
    2192:	88 f7       	brcc	.-30     	; 0x2176 <__divsf3_pse+0x94>
    2194:	e0 95       	com	r30
    2196:	08 95       	ret

00002198 <__fixunssfsi>:
    2198:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fp_splitA>
    219c:	88 f0       	brcs	.+34     	; 0x21c0 <__fixunssfsi+0x28>
    219e:	9f 57       	subi	r25, 0x7F	; 127
    21a0:	98 f0       	brcs	.+38     	; 0x21c8 <__fixunssfsi+0x30>
    21a2:	b9 2f       	mov	r27, r25
    21a4:	99 27       	eor	r25, r25
    21a6:	b7 51       	subi	r27, 0x17	; 23
    21a8:	b0 f0       	brcs	.+44     	; 0x21d6 <__fixunssfsi+0x3e>
    21aa:	e1 f0       	breq	.+56     	; 0x21e4 <__fixunssfsi+0x4c>
    21ac:	66 0f       	add	r22, r22
    21ae:	77 1f       	adc	r23, r23
    21b0:	88 1f       	adc	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	1a f0       	brmi	.+6      	; 0x21bc <__fixunssfsi+0x24>
    21b6:	ba 95       	dec	r27
    21b8:	c9 f7       	brne	.-14     	; 0x21ac <__fixunssfsi+0x14>
    21ba:	14 c0       	rjmp	.+40     	; 0x21e4 <__fixunssfsi+0x4c>
    21bc:	b1 30       	cpi	r27, 0x01	; 1
    21be:	91 f0       	breq	.+36     	; 0x21e4 <__fixunssfsi+0x4c>
    21c0:	0e 94 82 11 	call	0x2304	; 0x2304 <__fp_zero>
    21c4:	b1 e0       	ldi	r27, 0x01	; 1
    21c6:	08 95       	ret
    21c8:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_zero>
    21cc:	67 2f       	mov	r22, r23
    21ce:	78 2f       	mov	r23, r24
    21d0:	88 27       	eor	r24, r24
    21d2:	b8 5f       	subi	r27, 0xF8	; 248
    21d4:	39 f0       	breq	.+14     	; 0x21e4 <__fixunssfsi+0x4c>
    21d6:	b9 3f       	cpi	r27, 0xF9	; 249
    21d8:	cc f3       	brlt	.-14     	; 0x21cc <__fixunssfsi+0x34>
    21da:	86 95       	lsr	r24
    21dc:	77 95       	ror	r23
    21de:	67 95       	ror	r22
    21e0:	b3 95       	inc	r27
    21e2:	d9 f7       	brne	.-10     	; 0x21da <__fixunssfsi+0x42>
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__fixunssfsi+0x5c>
    21e6:	90 95       	com	r25
    21e8:	80 95       	com	r24
    21ea:	70 95       	com	r23
    21ec:	61 95       	neg	r22
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	08 95       	ret

000021f6 <__floatunsisf>:
    21f6:	e8 94       	clt
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <__floatsisf+0x12>

000021fa <__floatsisf>:
    21fa:	97 fb       	bst	r25, 7
    21fc:	3e f4       	brtc	.+14     	; 0x220c <__floatsisf+0x12>
    21fe:	90 95       	com	r25
    2200:	80 95       	com	r24
    2202:	70 95       	com	r23
    2204:	61 95       	neg	r22
    2206:	7f 4f       	sbci	r23, 0xFF	; 255
    2208:	8f 4f       	sbci	r24, 0xFF	; 255
    220a:	9f 4f       	sbci	r25, 0xFF	; 255
    220c:	99 23       	and	r25, r25
    220e:	a9 f0       	breq	.+42     	; 0x223a <__floatsisf+0x40>
    2210:	f9 2f       	mov	r31, r25
    2212:	96 e9       	ldi	r25, 0x96	; 150
    2214:	bb 27       	eor	r27, r27
    2216:	93 95       	inc	r25
    2218:	f6 95       	lsr	r31
    221a:	87 95       	ror	r24
    221c:	77 95       	ror	r23
    221e:	67 95       	ror	r22
    2220:	b7 95       	ror	r27
    2222:	f1 11       	cpse	r31, r1
    2224:	f8 cf       	rjmp	.-16     	; 0x2216 <__floatsisf+0x1c>
    2226:	fa f4       	brpl	.+62     	; 0x2266 <__floatsisf+0x6c>
    2228:	bb 0f       	add	r27, r27
    222a:	11 f4       	brne	.+4      	; 0x2230 <__floatsisf+0x36>
    222c:	60 ff       	sbrs	r22, 0
    222e:	1b c0       	rjmp	.+54     	; 0x2266 <__floatsisf+0x6c>
    2230:	6f 5f       	subi	r22, 0xFF	; 255
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	8f 4f       	sbci	r24, 0xFF	; 255
    2236:	9f 4f       	sbci	r25, 0xFF	; 255
    2238:	16 c0       	rjmp	.+44     	; 0x2266 <__floatsisf+0x6c>
    223a:	88 23       	and	r24, r24
    223c:	11 f0       	breq	.+4      	; 0x2242 <__floatsisf+0x48>
    223e:	96 e9       	ldi	r25, 0x96	; 150
    2240:	11 c0       	rjmp	.+34     	; 0x2264 <__floatsisf+0x6a>
    2242:	77 23       	and	r23, r23
    2244:	21 f0       	breq	.+8      	; 0x224e <__floatsisf+0x54>
    2246:	9e e8       	ldi	r25, 0x8E	; 142
    2248:	87 2f       	mov	r24, r23
    224a:	76 2f       	mov	r23, r22
    224c:	05 c0       	rjmp	.+10     	; 0x2258 <__floatsisf+0x5e>
    224e:	66 23       	and	r22, r22
    2250:	71 f0       	breq	.+28     	; 0x226e <__floatsisf+0x74>
    2252:	96 e8       	ldi	r25, 0x86	; 134
    2254:	86 2f       	mov	r24, r22
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	60 e0       	ldi	r22, 0x00	; 0
    225a:	2a f0       	brmi	.+10     	; 0x2266 <__floatsisf+0x6c>
    225c:	9a 95       	dec	r25
    225e:	66 0f       	add	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	da f7       	brpl	.-10     	; 0x225c <__floatsisf+0x62>
    2266:	88 0f       	add	r24, r24
    2268:	96 95       	lsr	r25
    226a:	87 95       	ror	r24
    226c:	97 f9       	bld	r25, 7
    226e:	08 95       	ret

00002270 <__fp_inf>:
    2270:	97 f9       	bld	r25, 7
    2272:	9f 67       	ori	r25, 0x7F	; 127
    2274:	80 e8       	ldi	r24, 0x80	; 128
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	08 95       	ret

0000227c <__fp_nan>:
    227c:	9f ef       	ldi	r25, 0xFF	; 255
    227e:	80 ec       	ldi	r24, 0xC0	; 192
    2280:	08 95       	ret

00002282 <__fp_pscA>:
    2282:	00 24       	eor	r0, r0
    2284:	0a 94       	dec	r0
    2286:	16 16       	cp	r1, r22
    2288:	17 06       	cpc	r1, r23
    228a:	18 06       	cpc	r1, r24
    228c:	09 06       	cpc	r0, r25
    228e:	08 95       	ret

00002290 <__fp_pscB>:
    2290:	00 24       	eor	r0, r0
    2292:	0a 94       	dec	r0
    2294:	12 16       	cp	r1, r18
    2296:	13 06       	cpc	r1, r19
    2298:	14 06       	cpc	r1, r20
    229a:	05 06       	cpc	r0, r21
    229c:	08 95       	ret

0000229e <__fp_round>:
    229e:	09 2e       	mov	r0, r25
    22a0:	03 94       	inc	r0
    22a2:	00 0c       	add	r0, r0
    22a4:	11 f4       	brne	.+4      	; 0x22aa <__fp_round+0xc>
    22a6:	88 23       	and	r24, r24
    22a8:	52 f0       	brmi	.+20     	; 0x22be <__fp_round+0x20>
    22aa:	bb 0f       	add	r27, r27
    22ac:	40 f4       	brcc	.+16     	; 0x22be <__fp_round+0x20>
    22ae:	bf 2b       	or	r27, r31
    22b0:	11 f4       	brne	.+4      	; 0x22b6 <__fp_round+0x18>
    22b2:	60 ff       	sbrs	r22, 0
    22b4:	04 c0       	rjmp	.+8      	; 0x22be <__fp_round+0x20>
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f 4f       	sbci	r24, 0xFF	; 255
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	08 95       	ret

000022c0 <__fp_split3>:
    22c0:	57 fd       	sbrc	r21, 7
    22c2:	90 58       	subi	r25, 0x80	; 128
    22c4:	44 0f       	add	r20, r20
    22c6:	55 1f       	adc	r21, r21
    22c8:	59 f0       	breq	.+22     	; 0x22e0 <__fp_splitA+0x10>
    22ca:	5f 3f       	cpi	r21, 0xFF	; 255
    22cc:	71 f0       	breq	.+28     	; 0x22ea <__fp_splitA+0x1a>
    22ce:	47 95       	ror	r20

000022d0 <__fp_splitA>:
    22d0:	88 0f       	add	r24, r24
    22d2:	97 fb       	bst	r25, 7
    22d4:	99 1f       	adc	r25, r25
    22d6:	61 f0       	breq	.+24     	; 0x22f0 <__fp_splitA+0x20>
    22d8:	9f 3f       	cpi	r25, 0xFF	; 255
    22da:	79 f0       	breq	.+30     	; 0x22fa <__fp_splitA+0x2a>
    22dc:	87 95       	ror	r24
    22de:	08 95       	ret
    22e0:	12 16       	cp	r1, r18
    22e2:	13 06       	cpc	r1, r19
    22e4:	14 06       	cpc	r1, r20
    22e6:	55 1f       	adc	r21, r21
    22e8:	f2 cf       	rjmp	.-28     	; 0x22ce <__fp_split3+0xe>
    22ea:	46 95       	lsr	r20
    22ec:	f1 df       	rcall	.-30     	; 0x22d0 <__fp_splitA>
    22ee:	08 c0       	rjmp	.+16     	; 0x2300 <__fp_splitA+0x30>
    22f0:	16 16       	cp	r1, r22
    22f2:	17 06       	cpc	r1, r23
    22f4:	18 06       	cpc	r1, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	f1 cf       	rjmp	.-30     	; 0x22dc <__fp_splitA+0xc>
    22fa:	86 95       	lsr	r24
    22fc:	71 05       	cpc	r23, r1
    22fe:	61 05       	cpc	r22, r1
    2300:	08 94       	sec
    2302:	08 95       	ret

00002304 <__fp_zero>:
    2304:	e8 94       	clt

00002306 <__fp_szero>:
    2306:	bb 27       	eor	r27, r27
    2308:	66 27       	eor	r22, r22
    230a:	77 27       	eor	r23, r23
    230c:	cb 01       	movw	r24, r22
    230e:	97 f9       	bld	r25, 7
    2310:	08 95       	ret

00002312 <__mulsf3>:
    2312:	0e 94 9c 11 	call	0x2338	; 0x2338 <__mulsf3x>
    2316:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_round>
    231a:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_pscA>
    231e:	38 f0       	brcs	.+14     	; 0x232e <__mulsf3+0x1c>
    2320:	0e 94 48 11 	call	0x2290	; 0x2290 <__fp_pscB>
    2324:	20 f0       	brcs	.+8      	; 0x232e <__mulsf3+0x1c>
    2326:	95 23       	and	r25, r21
    2328:	11 f0       	breq	.+4      	; 0x232e <__mulsf3+0x1c>
    232a:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    232e:	0c 94 3e 11 	jmp	0x227c	; 0x227c <__fp_nan>
    2332:	11 24       	eor	r1, r1
    2334:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>

00002338 <__mulsf3x>:
    2338:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_split3>
    233c:	70 f3       	brcs	.-36     	; 0x231a <__mulsf3+0x8>

0000233e <__mulsf3_pse>:
    233e:	95 9f       	mul	r25, r21
    2340:	c1 f3       	breq	.-16     	; 0x2332 <__mulsf3+0x20>
    2342:	95 0f       	add	r25, r21
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	55 1f       	adc	r21, r21
    2348:	62 9f       	mul	r22, r18
    234a:	f0 01       	movw	r30, r0
    234c:	72 9f       	mul	r23, r18
    234e:	bb 27       	eor	r27, r27
    2350:	f0 0d       	add	r31, r0
    2352:	b1 1d       	adc	r27, r1
    2354:	63 9f       	mul	r22, r19
    2356:	aa 27       	eor	r26, r26
    2358:	f0 0d       	add	r31, r0
    235a:	b1 1d       	adc	r27, r1
    235c:	aa 1f       	adc	r26, r26
    235e:	64 9f       	mul	r22, r20
    2360:	66 27       	eor	r22, r22
    2362:	b0 0d       	add	r27, r0
    2364:	a1 1d       	adc	r26, r1
    2366:	66 1f       	adc	r22, r22
    2368:	82 9f       	mul	r24, r18
    236a:	22 27       	eor	r18, r18
    236c:	b0 0d       	add	r27, r0
    236e:	a1 1d       	adc	r26, r1
    2370:	62 1f       	adc	r22, r18
    2372:	73 9f       	mul	r23, r19
    2374:	b0 0d       	add	r27, r0
    2376:	a1 1d       	adc	r26, r1
    2378:	62 1f       	adc	r22, r18
    237a:	83 9f       	mul	r24, r19
    237c:	a0 0d       	add	r26, r0
    237e:	61 1d       	adc	r22, r1
    2380:	22 1f       	adc	r18, r18
    2382:	74 9f       	mul	r23, r20
    2384:	33 27       	eor	r19, r19
    2386:	a0 0d       	add	r26, r0
    2388:	61 1d       	adc	r22, r1
    238a:	23 1f       	adc	r18, r19
    238c:	84 9f       	mul	r24, r20
    238e:	60 0d       	add	r22, r0
    2390:	21 1d       	adc	r18, r1
    2392:	82 2f       	mov	r24, r18
    2394:	76 2f       	mov	r23, r22
    2396:	6a 2f       	mov	r22, r26
    2398:	11 24       	eor	r1, r1
    239a:	9f 57       	subi	r25, 0x7F	; 127
    239c:	50 40       	sbci	r21, 0x00	; 0
    239e:	9a f0       	brmi	.+38     	; 0x23c6 <__mulsf3_pse+0x88>
    23a0:	f1 f0       	breq	.+60     	; 0x23de <__mulsf3_pse+0xa0>
    23a2:	88 23       	and	r24, r24
    23a4:	4a f0       	brmi	.+18     	; 0x23b8 <__mulsf3_pse+0x7a>
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	bb 1f       	adc	r27, r27
    23ac:	66 1f       	adc	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	91 50       	subi	r25, 0x01	; 1
    23b4:	50 40       	sbci	r21, 0x00	; 0
    23b6:	a9 f7       	brne	.-22     	; 0x23a2 <__mulsf3_pse+0x64>
    23b8:	9e 3f       	cpi	r25, 0xFE	; 254
    23ba:	51 05       	cpc	r21, r1
    23bc:	80 f0       	brcs	.+32     	; 0x23de <__mulsf3_pse+0xa0>
    23be:	0c 94 38 11 	jmp	0x2270	; 0x2270 <__fp_inf>
    23c2:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__fp_szero>
    23c6:	5f 3f       	cpi	r21, 0xFF	; 255
    23c8:	e4 f3       	brlt	.-8      	; 0x23c2 <__mulsf3_pse+0x84>
    23ca:	98 3e       	cpi	r25, 0xE8	; 232
    23cc:	d4 f3       	brlt	.-12     	; 0x23c2 <__mulsf3_pse+0x84>
    23ce:	86 95       	lsr	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	b7 95       	ror	r27
    23d6:	f7 95       	ror	r31
    23d8:	e7 95       	ror	r30
    23da:	9f 5f       	subi	r25, 0xFF	; 255
    23dc:	c1 f7       	brne	.-16     	; 0x23ce <__mulsf3_pse+0x90>
    23de:	fe 2b       	or	r31, r30
    23e0:	88 0f       	add	r24, r24
    23e2:	91 1d       	adc	r25, r1
    23e4:	96 95       	lsr	r25
    23e6:	87 95       	ror	r24
    23e8:	97 f9       	bld	r25, 7
    23ea:	08 95       	ret

000023ec <__tablejump2__>:
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	05 90       	lpm	r0, Z+
    23f2:	f4 91       	lpm	r31, Z
    23f4:	e0 2d       	mov	r30, r0
    23f6:	09 94       	ijmp

000023f8 <dtostrf>:
    23f8:	ef 92       	push	r14
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	e8 01       	movw	r28, r16
    2404:	47 fd       	sbrc	r20, 7
    2406:	02 c0       	rjmp	.+4      	; 0x240c <dtostrf+0x14>
    2408:	34 e0       	ldi	r19, 0x04	; 4
    240a:	01 c0       	rjmp	.+2      	; 0x240e <dtostrf+0x16>
    240c:	34 e1       	ldi	r19, 0x14	; 20
    240e:	04 2e       	mov	r0, r20
    2410:	00 0c       	add	r0, r0
    2412:	55 0b       	sbc	r21, r21
    2414:	57 ff       	sbrs	r21, 7
    2416:	03 c0       	rjmp	.+6      	; 0x241e <dtostrf+0x26>
    2418:	51 95       	neg	r21
    241a:	41 95       	neg	r20
    241c:	51 09       	sbc	r21, r1
    241e:	e3 2e       	mov	r14, r19
    2420:	02 2f       	mov	r16, r18
    2422:	24 2f       	mov	r18, r20
    2424:	ae 01       	movw	r20, r28
    2426:	0e 94 1f 14 	call	0x283e	; 0x283e <dtoa_prf>
    242a:	ce 01       	movw	r24, r28
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ef 90       	pop	r14
    2436:	08 95       	ret

00002438 <sprintf>:
    2438:	ae e0       	ldi	r26, 0x0E	; 14
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e2 e2       	ldi	r30, 0x22	; 34
    243e:	f2 e1       	ldi	r31, 0x12	; 18
    2440:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__prologue_saves__+0x1c>
    2444:	0d 89       	ldd	r16, Y+21	; 0x15
    2446:	1e 89       	ldd	r17, Y+22	; 0x16
    2448:	86 e0       	ldi	r24, 0x06	; 6
    244a:	8c 83       	std	Y+4, r24	; 0x04
    244c:	1a 83       	std	Y+2, r17	; 0x02
    244e:	09 83       	std	Y+1, r16	; 0x01
    2450:	8f ef       	ldi	r24, 0xFF	; 255
    2452:	9f e7       	ldi	r25, 0x7F	; 127
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	ae 01       	movw	r20, r28
    245a:	47 5e       	subi	r20, 0xE7	; 231
    245c:	5f 4f       	sbci	r21, 0xFF	; 255
    245e:	6f 89       	ldd	r22, Y+23	; 0x17
    2460:	78 8d       	ldd	r23, Y+24	; 0x18
    2462:	ce 01       	movw	r24, r28
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	0e 94 3e 12 	call	0x247c	; 0x247c <vfprintf>
    246a:	ef 81       	ldd	r30, Y+7	; 0x07
    246c:	f8 85       	ldd	r31, Y+8	; 0x08
    246e:	e0 0f       	add	r30, r16
    2470:	f1 1f       	adc	r31, r17
    2472:	10 82       	st	Z, r1
    2474:	2e 96       	adiw	r28, 0x0e	; 14
    2476:	e4 e0       	ldi	r30, 0x04	; 4
    2478:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__epilogue_restores__+0x1c>

0000247c <vfprintf>:
    247c:	ab e0       	ldi	r26, 0x0B	; 11
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e4 e4       	ldi	r30, 0x44	; 68
    2482:	f2 e1       	ldi	r31, 0x12	; 18
    2484:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__prologue_saves__>
    2488:	6c 01       	movw	r12, r24
    248a:	7b 01       	movw	r14, r22
    248c:	8a 01       	movw	r16, r20
    248e:	fc 01       	movw	r30, r24
    2490:	17 82       	std	Z+7, r1	; 0x07
    2492:	16 82       	std	Z+6, r1	; 0x06
    2494:	83 81       	ldd	r24, Z+3	; 0x03
    2496:	81 ff       	sbrs	r24, 1
    2498:	cc c1       	rjmp	.+920    	; 0x2832 <vfprintf+0x3b6>
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	3c 01       	movw	r6, r24
    24a0:	f6 01       	movw	r30, r12
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	f7 01       	movw	r30, r14
    24a6:	93 fd       	sbrc	r25, 3
    24a8:	85 91       	lpm	r24, Z+
    24aa:	93 ff       	sbrs	r25, 3
    24ac:	81 91       	ld	r24, Z+
    24ae:	7f 01       	movw	r14, r30
    24b0:	88 23       	and	r24, r24
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <vfprintf+0x3a>
    24b4:	ba c1       	rjmp	.+884    	; 0x282a <vfprintf+0x3ae>
    24b6:	85 32       	cpi	r24, 0x25	; 37
    24b8:	39 f4       	brne	.+14     	; 0x24c8 <vfprintf+0x4c>
    24ba:	93 fd       	sbrc	r25, 3
    24bc:	85 91       	lpm	r24, Z+
    24be:	93 ff       	sbrs	r25, 3
    24c0:	81 91       	ld	r24, Z+
    24c2:	7f 01       	movw	r14, r30
    24c4:	85 32       	cpi	r24, 0x25	; 37
    24c6:	29 f4       	brne	.+10     	; 0x24d2 <vfprintf+0x56>
    24c8:	b6 01       	movw	r22, r12
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    24d0:	e7 cf       	rjmp	.-50     	; 0x24a0 <vfprintf+0x24>
    24d2:	91 2c       	mov	r9, r1
    24d4:	21 2c       	mov	r2, r1
    24d6:	31 2c       	mov	r3, r1
    24d8:	ff e1       	ldi	r31, 0x1F	; 31
    24da:	f3 15       	cp	r31, r3
    24dc:	d8 f0       	brcs	.+54     	; 0x2514 <vfprintf+0x98>
    24de:	8b 32       	cpi	r24, 0x2B	; 43
    24e0:	79 f0       	breq	.+30     	; 0x2500 <vfprintf+0x84>
    24e2:	38 f4       	brcc	.+14     	; 0x24f2 <vfprintf+0x76>
    24e4:	80 32       	cpi	r24, 0x20	; 32
    24e6:	79 f0       	breq	.+30     	; 0x2506 <vfprintf+0x8a>
    24e8:	83 32       	cpi	r24, 0x23	; 35
    24ea:	a1 f4       	brne	.+40     	; 0x2514 <vfprintf+0x98>
    24ec:	23 2d       	mov	r18, r3
    24ee:	20 61       	ori	r18, 0x10	; 16
    24f0:	1d c0       	rjmp	.+58     	; 0x252c <vfprintf+0xb0>
    24f2:	8d 32       	cpi	r24, 0x2D	; 45
    24f4:	61 f0       	breq	.+24     	; 0x250e <vfprintf+0x92>
    24f6:	80 33       	cpi	r24, 0x30	; 48
    24f8:	69 f4       	brne	.+26     	; 0x2514 <vfprintf+0x98>
    24fa:	23 2d       	mov	r18, r3
    24fc:	21 60       	ori	r18, 0x01	; 1
    24fe:	16 c0       	rjmp	.+44     	; 0x252c <vfprintf+0xb0>
    2500:	83 2d       	mov	r24, r3
    2502:	82 60       	ori	r24, 0x02	; 2
    2504:	38 2e       	mov	r3, r24
    2506:	e3 2d       	mov	r30, r3
    2508:	e4 60       	ori	r30, 0x04	; 4
    250a:	3e 2e       	mov	r3, r30
    250c:	2a c0       	rjmp	.+84     	; 0x2562 <vfprintf+0xe6>
    250e:	f3 2d       	mov	r31, r3
    2510:	f8 60       	ori	r31, 0x08	; 8
    2512:	1d c0       	rjmp	.+58     	; 0x254e <vfprintf+0xd2>
    2514:	37 fc       	sbrc	r3, 7
    2516:	2d c0       	rjmp	.+90     	; 0x2572 <vfprintf+0xf6>
    2518:	20 ed       	ldi	r18, 0xD0	; 208
    251a:	28 0f       	add	r18, r24
    251c:	2a 30       	cpi	r18, 0x0A	; 10
    251e:	40 f0       	brcs	.+16     	; 0x2530 <vfprintf+0xb4>
    2520:	8e 32       	cpi	r24, 0x2E	; 46
    2522:	b9 f4       	brne	.+46     	; 0x2552 <vfprintf+0xd6>
    2524:	36 fc       	sbrc	r3, 6
    2526:	81 c1       	rjmp	.+770    	; 0x282a <vfprintf+0x3ae>
    2528:	23 2d       	mov	r18, r3
    252a:	20 64       	ori	r18, 0x40	; 64
    252c:	32 2e       	mov	r3, r18
    252e:	19 c0       	rjmp	.+50     	; 0x2562 <vfprintf+0xe6>
    2530:	36 fe       	sbrs	r3, 6
    2532:	06 c0       	rjmp	.+12     	; 0x2540 <vfprintf+0xc4>
    2534:	8a e0       	ldi	r24, 0x0A	; 10
    2536:	98 9e       	mul	r9, r24
    2538:	20 0d       	add	r18, r0
    253a:	11 24       	eor	r1, r1
    253c:	92 2e       	mov	r9, r18
    253e:	11 c0       	rjmp	.+34     	; 0x2562 <vfprintf+0xe6>
    2540:	ea e0       	ldi	r30, 0x0A	; 10
    2542:	2e 9e       	mul	r2, r30
    2544:	20 0d       	add	r18, r0
    2546:	11 24       	eor	r1, r1
    2548:	22 2e       	mov	r2, r18
    254a:	f3 2d       	mov	r31, r3
    254c:	f0 62       	ori	r31, 0x20	; 32
    254e:	3f 2e       	mov	r3, r31
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <vfprintf+0xe6>
    2552:	8c 36       	cpi	r24, 0x6C	; 108
    2554:	21 f4       	brne	.+8      	; 0x255e <vfprintf+0xe2>
    2556:	83 2d       	mov	r24, r3
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	38 2e       	mov	r3, r24
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <vfprintf+0xe6>
    255e:	88 36       	cpi	r24, 0x68	; 104
    2560:	41 f4       	brne	.+16     	; 0x2572 <vfprintf+0xf6>
    2562:	f7 01       	movw	r30, r14
    2564:	93 fd       	sbrc	r25, 3
    2566:	85 91       	lpm	r24, Z+
    2568:	93 ff       	sbrs	r25, 3
    256a:	81 91       	ld	r24, Z+
    256c:	7f 01       	movw	r14, r30
    256e:	81 11       	cpse	r24, r1
    2570:	b3 cf       	rjmp	.-154    	; 0x24d8 <vfprintf+0x5c>
    2572:	98 2f       	mov	r25, r24
    2574:	9f 7d       	andi	r25, 0xDF	; 223
    2576:	95 54       	subi	r25, 0x45	; 69
    2578:	93 30       	cpi	r25, 0x03	; 3
    257a:	28 f4       	brcc	.+10     	; 0x2586 <vfprintf+0x10a>
    257c:	0c 5f       	subi	r16, 0xFC	; 252
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
    2580:	9f e3       	ldi	r25, 0x3F	; 63
    2582:	99 83       	std	Y+1, r25	; 0x01
    2584:	0d c0       	rjmp	.+26     	; 0x25a0 <vfprintf+0x124>
    2586:	83 36       	cpi	r24, 0x63	; 99
    2588:	31 f0       	breq	.+12     	; 0x2596 <vfprintf+0x11a>
    258a:	83 37       	cpi	r24, 0x73	; 115
    258c:	71 f0       	breq	.+28     	; 0x25aa <vfprintf+0x12e>
    258e:	83 35       	cpi	r24, 0x53	; 83
    2590:	09 f0       	breq	.+2      	; 0x2594 <vfprintf+0x118>
    2592:	59 c0       	rjmp	.+178    	; 0x2646 <vfprintf+0x1ca>
    2594:	21 c0       	rjmp	.+66     	; 0x25d8 <vfprintf+0x15c>
    2596:	f8 01       	movw	r30, r16
    2598:	80 81       	ld	r24, Z
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	0e 5f       	subi	r16, 0xFE	; 254
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	88 24       	eor	r8, r8
    25a2:	83 94       	inc	r8
    25a4:	91 2c       	mov	r9, r1
    25a6:	53 01       	movw	r10, r6
    25a8:	13 c0       	rjmp	.+38     	; 0x25d0 <vfprintf+0x154>
    25aa:	28 01       	movw	r4, r16
    25ac:	f2 e0       	ldi	r31, 0x02	; 2
    25ae:	4f 0e       	add	r4, r31
    25b0:	51 1c       	adc	r5, r1
    25b2:	f8 01       	movw	r30, r16
    25b4:	a0 80       	ld	r10, Z
    25b6:	b1 80       	ldd	r11, Z+1	; 0x01
    25b8:	36 fe       	sbrs	r3, 6
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <vfprintf+0x146>
    25bc:	69 2d       	mov	r22, r9
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <vfprintf+0x14a>
    25c2:	6f ef       	ldi	r22, 0xFF	; 255
    25c4:	7f ef       	ldi	r23, 0xFF	; 255
    25c6:	c5 01       	movw	r24, r10
    25c8:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <strnlen>
    25cc:	4c 01       	movw	r8, r24
    25ce:	82 01       	movw	r16, r4
    25d0:	f3 2d       	mov	r31, r3
    25d2:	ff 77       	andi	r31, 0x7F	; 127
    25d4:	3f 2e       	mov	r3, r31
    25d6:	16 c0       	rjmp	.+44     	; 0x2604 <vfprintf+0x188>
    25d8:	28 01       	movw	r4, r16
    25da:	22 e0       	ldi	r18, 0x02	; 2
    25dc:	42 0e       	add	r4, r18
    25de:	51 1c       	adc	r5, r1
    25e0:	f8 01       	movw	r30, r16
    25e2:	a0 80       	ld	r10, Z
    25e4:	b1 80       	ldd	r11, Z+1	; 0x01
    25e6:	36 fe       	sbrs	r3, 6
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <vfprintf+0x174>
    25ea:	69 2d       	mov	r22, r9
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <vfprintf+0x178>
    25f0:	6f ef       	ldi	r22, 0xFF	; 255
    25f2:	7f ef       	ldi	r23, 0xFF	; 255
    25f4:	c5 01       	movw	r24, r10
    25f6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <strnlen_P>
    25fa:	4c 01       	movw	r8, r24
    25fc:	f3 2d       	mov	r31, r3
    25fe:	f0 68       	ori	r31, 0x80	; 128
    2600:	3f 2e       	mov	r3, r31
    2602:	82 01       	movw	r16, r4
    2604:	33 fc       	sbrc	r3, 3
    2606:	1b c0       	rjmp	.+54     	; 0x263e <vfprintf+0x1c2>
    2608:	82 2d       	mov	r24, r2
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	88 16       	cp	r8, r24
    260e:	99 06       	cpc	r9, r25
    2610:	b0 f4       	brcc	.+44     	; 0x263e <vfprintf+0x1c2>
    2612:	b6 01       	movw	r22, r12
    2614:	80 e2       	ldi	r24, 0x20	; 32
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    261c:	2a 94       	dec	r2
    261e:	f4 cf       	rjmp	.-24     	; 0x2608 <vfprintf+0x18c>
    2620:	f5 01       	movw	r30, r10
    2622:	37 fc       	sbrc	r3, 7
    2624:	85 91       	lpm	r24, Z+
    2626:	37 fe       	sbrs	r3, 7
    2628:	81 91       	ld	r24, Z+
    262a:	5f 01       	movw	r10, r30
    262c:	b6 01       	movw	r22, r12
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    2634:	21 10       	cpse	r2, r1
    2636:	2a 94       	dec	r2
    2638:	21 e0       	ldi	r18, 0x01	; 1
    263a:	82 1a       	sub	r8, r18
    263c:	91 08       	sbc	r9, r1
    263e:	81 14       	cp	r8, r1
    2640:	91 04       	cpc	r9, r1
    2642:	71 f7       	brne	.-36     	; 0x2620 <vfprintf+0x1a4>
    2644:	e8 c0       	rjmp	.+464    	; 0x2816 <vfprintf+0x39a>
    2646:	84 36       	cpi	r24, 0x64	; 100
    2648:	11 f0       	breq	.+4      	; 0x264e <vfprintf+0x1d2>
    264a:	89 36       	cpi	r24, 0x69	; 105
    264c:	41 f5       	brne	.+80     	; 0x269e <vfprintf+0x222>
    264e:	f8 01       	movw	r30, r16
    2650:	37 fe       	sbrs	r3, 7
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <vfprintf+0x1e6>
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	0c 5f       	subi	r16, 0xFC	; 252
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	08 c0       	rjmp	.+16     	; 0x2672 <vfprintf+0x1f6>
    2662:	60 81       	ld	r22, Z
    2664:	71 81       	ldd	r23, Z+1	; 0x01
    2666:	07 2e       	mov	r0, r23
    2668:	00 0c       	add	r0, r0
    266a:	88 0b       	sbc	r24, r24
    266c:	99 0b       	sbc	r25, r25
    266e:	0e 5f       	subi	r16, 0xFE	; 254
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	f3 2d       	mov	r31, r3
    2674:	ff 76       	andi	r31, 0x6F	; 111
    2676:	3f 2e       	mov	r3, r31
    2678:	97 ff       	sbrs	r25, 7
    267a:	09 c0       	rjmp	.+18     	; 0x268e <vfprintf+0x212>
    267c:	90 95       	com	r25
    267e:	80 95       	com	r24
    2680:	70 95       	com	r23
    2682:	61 95       	neg	r22
    2684:	7f 4f       	sbci	r23, 0xFF	; 255
    2686:	8f 4f       	sbci	r24, 0xFF	; 255
    2688:	9f 4f       	sbci	r25, 0xFF	; 255
    268a:	f0 68       	ori	r31, 0x80	; 128
    268c:	3f 2e       	mov	r3, r31
    268e:	2a e0       	ldi	r18, 0x0A	; 10
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	a3 01       	movw	r20, r6
    2694:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__ultoa_invert>
    2698:	88 2e       	mov	r8, r24
    269a:	86 18       	sub	r8, r6
    269c:	45 c0       	rjmp	.+138    	; 0x2728 <vfprintf+0x2ac>
    269e:	85 37       	cpi	r24, 0x75	; 117
    26a0:	31 f4       	brne	.+12     	; 0x26ae <vfprintf+0x232>
    26a2:	23 2d       	mov	r18, r3
    26a4:	2f 7e       	andi	r18, 0xEF	; 239
    26a6:	b2 2e       	mov	r11, r18
    26a8:	2a e0       	ldi	r18, 0x0A	; 10
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	25 c0       	rjmp	.+74     	; 0x26f8 <vfprintf+0x27c>
    26ae:	93 2d       	mov	r25, r3
    26b0:	99 7f       	andi	r25, 0xF9	; 249
    26b2:	b9 2e       	mov	r11, r25
    26b4:	8f 36       	cpi	r24, 0x6F	; 111
    26b6:	c1 f0       	breq	.+48     	; 0x26e8 <vfprintf+0x26c>
    26b8:	18 f4       	brcc	.+6      	; 0x26c0 <vfprintf+0x244>
    26ba:	88 35       	cpi	r24, 0x58	; 88
    26bc:	79 f0       	breq	.+30     	; 0x26dc <vfprintf+0x260>
    26be:	b5 c0       	rjmp	.+362    	; 0x282a <vfprintf+0x3ae>
    26c0:	80 37       	cpi	r24, 0x70	; 112
    26c2:	19 f0       	breq	.+6      	; 0x26ca <vfprintf+0x24e>
    26c4:	88 37       	cpi	r24, 0x78	; 120
    26c6:	21 f0       	breq	.+8      	; 0x26d0 <vfprintf+0x254>
    26c8:	b0 c0       	rjmp	.+352    	; 0x282a <vfprintf+0x3ae>
    26ca:	e9 2f       	mov	r30, r25
    26cc:	e0 61       	ori	r30, 0x10	; 16
    26ce:	be 2e       	mov	r11, r30
    26d0:	b4 fe       	sbrs	r11, 4
    26d2:	0d c0       	rjmp	.+26     	; 0x26ee <vfprintf+0x272>
    26d4:	fb 2d       	mov	r31, r11
    26d6:	f4 60       	ori	r31, 0x04	; 4
    26d8:	bf 2e       	mov	r11, r31
    26da:	09 c0       	rjmp	.+18     	; 0x26ee <vfprintf+0x272>
    26dc:	34 fe       	sbrs	r3, 4
    26de:	0a c0       	rjmp	.+20     	; 0x26f4 <vfprintf+0x278>
    26e0:	29 2f       	mov	r18, r25
    26e2:	26 60       	ori	r18, 0x06	; 6
    26e4:	b2 2e       	mov	r11, r18
    26e6:	06 c0       	rjmp	.+12     	; 0x26f4 <vfprintf+0x278>
    26e8:	28 e0       	ldi	r18, 0x08	; 8
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	05 c0       	rjmp	.+10     	; 0x26f8 <vfprintf+0x27c>
    26ee:	20 e1       	ldi	r18, 0x10	; 16
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <vfprintf+0x27c>
    26f4:	20 e1       	ldi	r18, 0x10	; 16
    26f6:	32 e0       	ldi	r19, 0x02	; 2
    26f8:	f8 01       	movw	r30, r16
    26fa:	b7 fe       	sbrs	r11, 7
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <vfprintf+0x290>
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	0c 5f       	subi	r16, 0xFC	; 252
    2708:	1f 4f       	sbci	r17, 0xFF	; 255
    270a:	06 c0       	rjmp	.+12     	; 0x2718 <vfprintf+0x29c>
    270c:	60 81       	ld	r22, Z
    270e:	71 81       	ldd	r23, Z+1	; 0x01
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 5f       	subi	r16, 0xFE	; 254
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	a3 01       	movw	r20, r6
    271a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <__ultoa_invert>
    271e:	88 2e       	mov	r8, r24
    2720:	86 18       	sub	r8, r6
    2722:	fb 2d       	mov	r31, r11
    2724:	ff 77       	andi	r31, 0x7F	; 127
    2726:	3f 2e       	mov	r3, r31
    2728:	36 fe       	sbrs	r3, 6
    272a:	0d c0       	rjmp	.+26     	; 0x2746 <vfprintf+0x2ca>
    272c:	23 2d       	mov	r18, r3
    272e:	2e 7f       	andi	r18, 0xFE	; 254
    2730:	a2 2e       	mov	r10, r18
    2732:	89 14       	cp	r8, r9
    2734:	58 f4       	brcc	.+22     	; 0x274c <vfprintf+0x2d0>
    2736:	34 fe       	sbrs	r3, 4
    2738:	0b c0       	rjmp	.+22     	; 0x2750 <vfprintf+0x2d4>
    273a:	32 fc       	sbrc	r3, 2
    273c:	09 c0       	rjmp	.+18     	; 0x2750 <vfprintf+0x2d4>
    273e:	83 2d       	mov	r24, r3
    2740:	8e 7e       	andi	r24, 0xEE	; 238
    2742:	a8 2e       	mov	r10, r24
    2744:	05 c0       	rjmp	.+10     	; 0x2750 <vfprintf+0x2d4>
    2746:	b8 2c       	mov	r11, r8
    2748:	a3 2c       	mov	r10, r3
    274a:	03 c0       	rjmp	.+6      	; 0x2752 <vfprintf+0x2d6>
    274c:	b8 2c       	mov	r11, r8
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <vfprintf+0x2d6>
    2750:	b9 2c       	mov	r11, r9
    2752:	a4 fe       	sbrs	r10, 4
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <vfprintf+0x2f8>
    2756:	fe 01       	movw	r30, r28
    2758:	e8 0d       	add	r30, r8
    275a:	f1 1d       	adc	r31, r1
    275c:	80 81       	ld	r24, Z
    275e:	80 33       	cpi	r24, 0x30	; 48
    2760:	21 f4       	brne	.+8      	; 0x276a <vfprintf+0x2ee>
    2762:	9a 2d       	mov	r25, r10
    2764:	99 7e       	andi	r25, 0xE9	; 233
    2766:	a9 2e       	mov	r10, r25
    2768:	09 c0       	rjmp	.+18     	; 0x277c <vfprintf+0x300>
    276a:	a2 fe       	sbrs	r10, 2
    276c:	06 c0       	rjmp	.+12     	; 0x277a <vfprintf+0x2fe>
    276e:	b3 94       	inc	r11
    2770:	b3 94       	inc	r11
    2772:	04 c0       	rjmp	.+8      	; 0x277c <vfprintf+0x300>
    2774:	8a 2d       	mov	r24, r10
    2776:	86 78       	andi	r24, 0x86	; 134
    2778:	09 f0       	breq	.+2      	; 0x277c <vfprintf+0x300>
    277a:	b3 94       	inc	r11
    277c:	a3 fc       	sbrc	r10, 3
    277e:	11 c0       	rjmp	.+34     	; 0x27a2 <vfprintf+0x326>
    2780:	a0 fe       	sbrs	r10, 0
    2782:	06 c0       	rjmp	.+12     	; 0x2790 <vfprintf+0x314>
    2784:	b2 14       	cp	r11, r2
    2786:	88 f4       	brcc	.+34     	; 0x27aa <vfprintf+0x32e>
    2788:	28 0c       	add	r2, r8
    278a:	92 2c       	mov	r9, r2
    278c:	9b 18       	sub	r9, r11
    278e:	0e c0       	rjmp	.+28     	; 0x27ac <vfprintf+0x330>
    2790:	b2 14       	cp	r11, r2
    2792:	60 f4       	brcc	.+24     	; 0x27ac <vfprintf+0x330>
    2794:	b6 01       	movw	r22, r12
    2796:	80 e2       	ldi	r24, 0x20	; 32
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    279e:	b3 94       	inc	r11
    27a0:	f7 cf       	rjmp	.-18     	; 0x2790 <vfprintf+0x314>
    27a2:	b2 14       	cp	r11, r2
    27a4:	18 f4       	brcc	.+6      	; 0x27ac <vfprintf+0x330>
    27a6:	2b 18       	sub	r2, r11
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <vfprintf+0x332>
    27aa:	98 2c       	mov	r9, r8
    27ac:	21 2c       	mov	r2, r1
    27ae:	a4 fe       	sbrs	r10, 4
    27b0:	10 c0       	rjmp	.+32     	; 0x27d2 <vfprintf+0x356>
    27b2:	b6 01       	movw	r22, r12
    27b4:	80 e3       	ldi	r24, 0x30	; 48
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    27bc:	a2 fe       	sbrs	r10, 2
    27be:	17 c0       	rjmp	.+46     	; 0x27ee <vfprintf+0x372>
    27c0:	a1 fc       	sbrc	r10, 1
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x34e>
    27c4:	88 e7       	ldi	r24, 0x78	; 120
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x352>
    27ca:	88 e5       	ldi	r24, 0x58	; 88
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	b6 01       	movw	r22, r12
    27d0:	0c c0       	rjmp	.+24     	; 0x27ea <vfprintf+0x36e>
    27d2:	8a 2d       	mov	r24, r10
    27d4:	86 78       	andi	r24, 0x86	; 134
    27d6:	59 f0       	breq	.+22     	; 0x27ee <vfprintf+0x372>
    27d8:	a1 fe       	sbrs	r10, 1
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <vfprintf+0x364>
    27dc:	8b e2       	ldi	r24, 0x2B	; 43
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <vfprintf+0x366>
    27e0:	80 e2       	ldi	r24, 0x20	; 32
    27e2:	a7 fc       	sbrc	r10, 7
    27e4:	8d e2       	ldi	r24, 0x2D	; 45
    27e6:	b6 01       	movw	r22, r12
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    27ee:	89 14       	cp	r8, r9
    27f0:	38 f4       	brcc	.+14     	; 0x2800 <vfprintf+0x384>
    27f2:	b6 01       	movw	r22, r12
    27f4:	80 e3       	ldi	r24, 0x30	; 48
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    27fc:	9a 94       	dec	r9
    27fe:	f7 cf       	rjmp	.-18     	; 0x27ee <vfprintf+0x372>
    2800:	8a 94       	dec	r8
    2802:	f3 01       	movw	r30, r6
    2804:	e8 0d       	add	r30, r8
    2806:	f1 1d       	adc	r31, r1
    2808:	80 81       	ld	r24, Z
    280a:	b6 01       	movw	r22, r12
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    2812:	81 10       	cpse	r8, r1
    2814:	f5 cf       	rjmp	.-22     	; 0x2800 <vfprintf+0x384>
    2816:	22 20       	and	r2, r2
    2818:	09 f4       	brne	.+2      	; 0x281c <vfprintf+0x3a0>
    281a:	42 ce       	rjmp	.-892    	; 0x24a0 <vfprintf+0x24>
    281c:	b6 01       	movw	r22, r12
    281e:	80 e2       	ldi	r24, 0x20	; 32
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 67 16 	call	0x2cce	; 0x2cce <fputc>
    2826:	2a 94       	dec	r2
    2828:	f6 cf       	rjmp	.-20     	; 0x2816 <vfprintf+0x39a>
    282a:	f6 01       	movw	r30, r12
    282c:	86 81       	ldd	r24, Z+6	; 0x06
    282e:	97 81       	ldd	r25, Z+7	; 0x07
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <vfprintf+0x3ba>
    2832:	8f ef       	ldi	r24, 0xFF	; 255
    2834:	9f ef       	ldi	r25, 0xFF	; 255
    2836:	2b 96       	adiw	r28, 0x0b	; 11
    2838:	e2 e1       	ldi	r30, 0x12	; 18
    283a:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__epilogue_restores__>

0000283e <dtoa_prf>:
    283e:	a9 e0       	ldi	r26, 0x09	; 9
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e5 e2       	ldi	r30, 0x25	; 37
    2844:	f4 e1       	ldi	r31, 0x14	; 20
    2846:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__prologue_saves__+0xc>
    284a:	6a 01       	movw	r12, r20
    284c:	12 2f       	mov	r17, r18
    284e:	b0 2e       	mov	r11, r16
    2850:	2b e3       	ldi	r18, 0x3B	; 59
    2852:	20 17       	cp	r18, r16
    2854:	20 f0       	brcs	.+8      	; 0x285e <dtoa_prf+0x20>
    2856:	ff 24       	eor	r15, r15
    2858:	f3 94       	inc	r15
    285a:	f0 0e       	add	r15, r16
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <dtoa_prf+0x24>
    285e:	2c e3       	ldi	r18, 0x3C	; 60
    2860:	f2 2e       	mov	r15, r18
    2862:	0f 2d       	mov	r16, r15
    2864:	27 e0       	ldi	r18, 0x07	; 7
    2866:	ae 01       	movw	r20, r28
    2868:	4f 5f       	subi	r20, 0xFF	; 255
    286a:	5f 4f       	sbci	r21, 0xFF	; 255
    286c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <__ftoa_engine>
    2870:	bc 01       	movw	r22, r24
    2872:	49 81       	ldd	r20, Y+1	; 0x01
    2874:	84 2f       	mov	r24, r20
    2876:	89 70       	andi	r24, 0x09	; 9
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	31 f0       	breq	.+12     	; 0x2888 <dtoa_prf+0x4a>
    287c:	e1 fc       	sbrc	r14, 1
    287e:	06 c0       	rjmp	.+12     	; 0x288c <dtoa_prf+0x4e>
    2880:	e0 fe       	sbrs	r14, 0
    2882:	06 c0       	rjmp	.+12     	; 0x2890 <dtoa_prf+0x52>
    2884:	90 e2       	ldi	r25, 0x20	; 32
    2886:	05 c0       	rjmp	.+10     	; 0x2892 <dtoa_prf+0x54>
    2888:	9d e2       	ldi	r25, 0x2D	; 45
    288a:	03 c0       	rjmp	.+6      	; 0x2892 <dtoa_prf+0x54>
    288c:	9b e2       	ldi	r25, 0x2B	; 43
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <dtoa_prf+0x54>
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	5e 2d       	mov	r21, r14
    2894:	50 71       	andi	r21, 0x10	; 16
    2896:	43 ff       	sbrs	r20, 3
    2898:	3c c0       	rjmp	.+120    	; 0x2912 <dtoa_prf+0xd4>
    289a:	91 11       	cpse	r25, r1
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <dtoa_prf+0x64>
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <dtoa_prf+0x66>
    28a2:	84 e0       	ldi	r24, 0x04	; 4
    28a4:	81 17       	cp	r24, r17
    28a6:	18 f4       	brcc	.+6      	; 0x28ae <dtoa_prf+0x70>
    28a8:	21 2f       	mov	r18, r17
    28aa:	28 1b       	sub	r18, r24
    28ac:	01 c0       	rjmp	.+2      	; 0x28b0 <dtoa_prf+0x72>
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	51 11       	cpse	r21, r1
    28b2:	0b c0       	rjmp	.+22     	; 0x28ca <dtoa_prf+0x8c>
    28b4:	f6 01       	movw	r30, r12
    28b6:	82 2f       	mov	r24, r18
    28b8:	30 e2       	ldi	r19, 0x20	; 32
    28ba:	88 23       	and	r24, r24
    28bc:	19 f0       	breq	.+6      	; 0x28c4 <dtoa_prf+0x86>
    28be:	31 93       	st	Z+, r19
    28c0:	81 50       	subi	r24, 0x01	; 1
    28c2:	fb cf       	rjmp	.-10     	; 0x28ba <dtoa_prf+0x7c>
    28c4:	c2 0e       	add	r12, r18
    28c6:	d1 1c       	adc	r13, r1
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	99 23       	and	r25, r25
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <dtoa_prf+0x9a>
    28ce:	d6 01       	movw	r26, r12
    28d0:	9c 93       	st	X, r25
    28d2:	f6 01       	movw	r30, r12
    28d4:	31 96       	adiw	r30, 0x01	; 1
    28d6:	6f 01       	movw	r12, r30
    28d8:	c6 01       	movw	r24, r12
    28da:	03 96       	adiw	r24, 0x03	; 3
    28dc:	e2 fe       	sbrs	r14, 2
    28de:	0a c0       	rjmp	.+20     	; 0x28f4 <dtoa_prf+0xb6>
    28e0:	3e e4       	ldi	r19, 0x4E	; 78
    28e2:	d6 01       	movw	r26, r12
    28e4:	3c 93       	st	X, r19
    28e6:	41 e4       	ldi	r20, 0x41	; 65
    28e8:	11 96       	adiw	r26, 0x01	; 1
    28ea:	4c 93       	st	X, r20
    28ec:	11 97       	sbiw	r26, 0x01	; 1
    28ee:	12 96       	adiw	r26, 0x02	; 2
    28f0:	3c 93       	st	X, r19
    28f2:	06 c0       	rjmp	.+12     	; 0x2900 <dtoa_prf+0xc2>
    28f4:	3e e6       	ldi	r19, 0x6E	; 110
    28f6:	f6 01       	movw	r30, r12
    28f8:	30 83       	st	Z, r19
    28fa:	41 e6       	ldi	r20, 0x61	; 97
    28fc:	41 83       	std	Z+1, r20	; 0x01
    28fe:	32 83       	std	Z+2, r19	; 0x02
    2900:	fc 01       	movw	r30, r24
    2902:	32 2f       	mov	r19, r18
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	33 23       	and	r19, r19
    2908:	09 f4       	brne	.+2      	; 0x290c <dtoa_prf+0xce>
    290a:	42 c0       	rjmp	.+132    	; 0x2990 <dtoa_prf+0x152>
    290c:	41 93       	st	Z+, r20
    290e:	31 50       	subi	r19, 0x01	; 1
    2910:	fa cf       	rjmp	.-12     	; 0x2906 <dtoa_prf+0xc8>
    2912:	42 ff       	sbrs	r20, 2
    2914:	44 c0       	rjmp	.+136    	; 0x299e <dtoa_prf+0x160>
    2916:	91 11       	cpse	r25, r1
    2918:	02 c0       	rjmp	.+4      	; 0x291e <dtoa_prf+0xe0>
    291a:	83 e0       	ldi	r24, 0x03	; 3
    291c:	01 c0       	rjmp	.+2      	; 0x2920 <dtoa_prf+0xe2>
    291e:	84 e0       	ldi	r24, 0x04	; 4
    2920:	81 17       	cp	r24, r17
    2922:	18 f4       	brcc	.+6      	; 0x292a <dtoa_prf+0xec>
    2924:	21 2f       	mov	r18, r17
    2926:	28 1b       	sub	r18, r24
    2928:	01 c0       	rjmp	.+2      	; 0x292c <dtoa_prf+0xee>
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	51 11       	cpse	r21, r1
    292e:	0b c0       	rjmp	.+22     	; 0x2946 <dtoa_prf+0x108>
    2930:	f6 01       	movw	r30, r12
    2932:	82 2f       	mov	r24, r18
    2934:	30 e2       	ldi	r19, 0x20	; 32
    2936:	88 23       	and	r24, r24
    2938:	19 f0       	breq	.+6      	; 0x2940 <dtoa_prf+0x102>
    293a:	31 93       	st	Z+, r19
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	fb cf       	rjmp	.-10     	; 0x2936 <dtoa_prf+0xf8>
    2940:	c2 0e       	add	r12, r18
    2942:	d1 1c       	adc	r13, r1
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	99 23       	and	r25, r25
    2948:	29 f0       	breq	.+10     	; 0x2954 <dtoa_prf+0x116>
    294a:	d6 01       	movw	r26, r12
    294c:	9c 93       	st	X, r25
    294e:	f6 01       	movw	r30, r12
    2950:	31 96       	adiw	r30, 0x01	; 1
    2952:	6f 01       	movw	r12, r30
    2954:	c6 01       	movw	r24, r12
    2956:	03 96       	adiw	r24, 0x03	; 3
    2958:	e2 fe       	sbrs	r14, 2
    295a:	0b c0       	rjmp	.+22     	; 0x2972 <dtoa_prf+0x134>
    295c:	39 e4       	ldi	r19, 0x49	; 73
    295e:	d6 01       	movw	r26, r12
    2960:	3c 93       	st	X, r19
    2962:	3e e4       	ldi	r19, 0x4E	; 78
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	3c 93       	st	X, r19
    2968:	11 97       	sbiw	r26, 0x01	; 1
    296a:	36 e4       	ldi	r19, 0x46	; 70
    296c:	12 96       	adiw	r26, 0x02	; 2
    296e:	3c 93       	st	X, r19
    2970:	07 c0       	rjmp	.+14     	; 0x2980 <dtoa_prf+0x142>
    2972:	39 e6       	ldi	r19, 0x69	; 105
    2974:	f6 01       	movw	r30, r12
    2976:	30 83       	st	Z, r19
    2978:	3e e6       	ldi	r19, 0x6E	; 110
    297a:	31 83       	std	Z+1, r19	; 0x01
    297c:	36 e6       	ldi	r19, 0x66	; 102
    297e:	32 83       	std	Z+2, r19	; 0x02
    2980:	fc 01       	movw	r30, r24
    2982:	32 2f       	mov	r19, r18
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	33 23       	and	r19, r19
    2988:	19 f0       	breq	.+6      	; 0x2990 <dtoa_prf+0x152>
    298a:	41 93       	st	Z+, r20
    298c:	31 50       	subi	r19, 0x01	; 1
    298e:	fb cf       	rjmp	.-10     	; 0x2986 <dtoa_prf+0x148>
    2990:	fc 01       	movw	r30, r24
    2992:	e2 0f       	add	r30, r18
    2994:	f1 1d       	adc	r31, r1
    2996:	10 82       	st	Z, r1
    2998:	8e ef       	ldi	r24, 0xFE	; 254
    299a:	9f ef       	ldi	r25, 0xFF	; 255
    299c:	a6 c0       	rjmp	.+332    	; 0x2aea <dtoa_prf+0x2ac>
    299e:	21 e0       	ldi	r18, 0x01	; 1
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	91 11       	cpse	r25, r1
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <dtoa_prf+0x16c>
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	16 16       	cp	r1, r22
    29ac:	17 06       	cpc	r1, r23
    29ae:	1c f4       	brge	.+6      	; 0x29b6 <dtoa_prf+0x178>
    29b0:	fb 01       	movw	r30, r22
    29b2:	31 96       	adiw	r30, 0x01	; 1
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <dtoa_prf+0x17c>
    29b6:	e1 e0       	ldi	r30, 0x01	; 1
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	2e 0f       	add	r18, r30
    29bc:	3f 1f       	adc	r19, r31
    29be:	bb 20       	and	r11, r11
    29c0:	21 f0       	breq	.+8      	; 0x29ca <dtoa_prf+0x18c>
    29c2:	eb 2d       	mov	r30, r11
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	31 96       	adiw	r30, 0x01	; 1
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <dtoa_prf+0x190>
    29ca:	e0 e0       	ldi	r30, 0x00	; 0
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	2e 0f       	add	r18, r30
    29d0:	3f 1f       	adc	r19, r31
    29d2:	e1 2f       	mov	r30, r17
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	2e 17       	cp	r18, r30
    29d8:	3f 07       	cpc	r19, r31
    29da:	1c f4       	brge	.+6      	; 0x29e2 <dtoa_prf+0x1a4>
    29dc:	12 1b       	sub	r17, r18
    29de:	21 2f       	mov	r18, r17
    29e0:	01 c0       	rjmp	.+2      	; 0x29e4 <dtoa_prf+0x1a6>
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	8e 2d       	mov	r24, r14
    29e6:	88 71       	andi	r24, 0x18	; 24
    29e8:	59 f4       	brne	.+22     	; 0x2a00 <dtoa_prf+0x1c2>
    29ea:	f6 01       	movw	r30, r12
    29ec:	82 2f       	mov	r24, r18
    29ee:	30 e2       	ldi	r19, 0x20	; 32
    29f0:	88 23       	and	r24, r24
    29f2:	19 f0       	breq	.+6      	; 0x29fa <dtoa_prf+0x1bc>
    29f4:	31 93       	st	Z+, r19
    29f6:	81 50       	subi	r24, 0x01	; 1
    29f8:	fb cf       	rjmp	.-10     	; 0x29f0 <dtoa_prf+0x1b2>
    29fa:	c2 0e       	add	r12, r18
    29fc:	d1 1c       	adc	r13, r1
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	99 23       	and	r25, r25
    2a02:	29 f0       	breq	.+10     	; 0x2a0e <dtoa_prf+0x1d0>
    2a04:	d6 01       	movw	r26, r12
    2a06:	9c 93       	st	X, r25
    2a08:	f6 01       	movw	r30, r12
    2a0a:	31 96       	adiw	r30, 0x01	; 1
    2a0c:	6f 01       	movw	r12, r30
    2a0e:	51 11       	cpse	r21, r1
    2a10:	0b c0       	rjmp	.+22     	; 0x2a28 <dtoa_prf+0x1ea>
    2a12:	f6 01       	movw	r30, r12
    2a14:	82 2f       	mov	r24, r18
    2a16:	90 e3       	ldi	r25, 0x30	; 48
    2a18:	88 23       	and	r24, r24
    2a1a:	19 f0       	breq	.+6      	; 0x2a22 <dtoa_prf+0x1e4>
    2a1c:	91 93       	st	Z+, r25
    2a1e:	81 50       	subi	r24, 0x01	; 1
    2a20:	fb cf       	rjmp	.-10     	; 0x2a18 <dtoa_prf+0x1da>
    2a22:	c2 0e       	add	r12, r18
    2a24:	d1 1c       	adc	r13, r1
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	0f 2d       	mov	r16, r15
    2a2a:	06 0f       	add	r16, r22
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	34 2f       	mov	r19, r20
    2a30:	30 71       	andi	r19, 0x10	; 16
    2a32:	44 ff       	sbrs	r20, 4
    2a34:	03 c0       	rjmp	.+6      	; 0x2a3c <dtoa_prf+0x1fe>
    2a36:	91 33       	cpi	r25, 0x31	; 49
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <dtoa_prf+0x1fe>
    2a3a:	01 50       	subi	r16, 0x01	; 1
    2a3c:	10 16       	cp	r1, r16
    2a3e:	24 f4       	brge	.+8      	; 0x2a48 <dtoa_prf+0x20a>
    2a40:	09 30       	cpi	r16, 0x09	; 9
    2a42:	18 f0       	brcs	.+6      	; 0x2a4a <dtoa_prf+0x20c>
    2a44:	08 e0       	ldi	r16, 0x08	; 8
    2a46:	01 c0       	rjmp	.+2      	; 0x2a4a <dtoa_prf+0x20c>
    2a48:	01 e0       	ldi	r16, 0x01	; 1
    2a4a:	ab 01       	movw	r20, r22
    2a4c:	77 ff       	sbrs	r23, 7
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <dtoa_prf+0x216>
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	fb 01       	movw	r30, r22
    2a56:	e4 1b       	sub	r30, r20
    2a58:	f5 0b       	sbc	r31, r21
    2a5a:	a1 e0       	ldi	r26, 0x01	; 1
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	ac 0f       	add	r26, r28
    2a60:	bd 1f       	adc	r27, r29
    2a62:	ea 0f       	add	r30, r26
    2a64:	fb 1f       	adc	r31, r27
    2a66:	8e e2       	ldi	r24, 0x2E	; 46
    2a68:	a8 2e       	mov	r10, r24
    2a6a:	4b 01       	movw	r8, r22
    2a6c:	80 1a       	sub	r8, r16
    2a6e:	91 08       	sbc	r9, r1
    2a70:	0b 2d       	mov	r16, r11
    2a72:	10 e0       	ldi	r17, 0x00	; 0
    2a74:	11 95       	neg	r17
    2a76:	01 95       	neg	r16
    2a78:	11 09       	sbc	r17, r1
    2a7a:	4f 3f       	cpi	r20, 0xFF	; 255
    2a7c:	bf ef       	ldi	r27, 0xFF	; 255
    2a7e:	5b 07       	cpc	r21, r27
    2a80:	21 f4       	brne	.+8      	; 0x2a8a <dtoa_prf+0x24c>
    2a82:	d6 01       	movw	r26, r12
    2a84:	ac 92       	st	X, r10
    2a86:	11 96       	adiw	r26, 0x01	; 1
    2a88:	6d 01       	movw	r12, r26
    2a8a:	64 17       	cp	r22, r20
    2a8c:	75 07       	cpc	r23, r21
    2a8e:	2c f0       	brlt	.+10     	; 0x2a9a <dtoa_prf+0x25c>
    2a90:	84 16       	cp	r8, r20
    2a92:	95 06       	cpc	r9, r21
    2a94:	14 f4       	brge	.+4      	; 0x2a9a <dtoa_prf+0x25c>
    2a96:	81 81       	ldd	r24, Z+1	; 0x01
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <dtoa_prf+0x25e>
    2a9a:	80 e3       	ldi	r24, 0x30	; 48
    2a9c:	41 50       	subi	r20, 0x01	; 1
    2a9e:	51 09       	sbc	r21, r1
    2aa0:	31 96       	adiw	r30, 0x01	; 1
    2aa2:	d6 01       	movw	r26, r12
    2aa4:	11 96       	adiw	r26, 0x01	; 1
    2aa6:	7d 01       	movw	r14, r26
    2aa8:	40 17       	cp	r20, r16
    2aaa:	51 07       	cpc	r21, r17
    2aac:	24 f0       	brlt	.+8      	; 0x2ab6 <dtoa_prf+0x278>
    2aae:	d6 01       	movw	r26, r12
    2ab0:	8c 93       	st	X, r24
    2ab2:	67 01       	movw	r12, r14
    2ab4:	e2 cf       	rjmp	.-60     	; 0x2a7a <dtoa_prf+0x23c>
    2ab6:	64 17       	cp	r22, r20
    2ab8:	75 07       	cpc	r23, r21
    2aba:	39 f4       	brne	.+14     	; 0x2aca <dtoa_prf+0x28c>
    2abc:	96 33       	cpi	r25, 0x36	; 54
    2abe:	20 f4       	brcc	.+8      	; 0x2ac8 <dtoa_prf+0x28a>
    2ac0:	95 33       	cpi	r25, 0x35	; 53
    2ac2:	19 f4       	brne	.+6      	; 0x2aca <dtoa_prf+0x28c>
    2ac4:	31 11       	cpse	r19, r1
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <dtoa_prf+0x28c>
    2ac8:	81 e3       	ldi	r24, 0x31	; 49
    2aca:	f6 01       	movw	r30, r12
    2acc:	80 83       	st	Z, r24
    2ace:	f7 01       	movw	r30, r14
    2ad0:	82 2f       	mov	r24, r18
    2ad2:	90 e2       	ldi	r25, 0x20	; 32
    2ad4:	88 23       	and	r24, r24
    2ad6:	19 f0       	breq	.+6      	; 0x2ade <dtoa_prf+0x2a0>
    2ad8:	91 93       	st	Z+, r25
    2ada:	81 50       	subi	r24, 0x01	; 1
    2adc:	fb cf       	rjmp	.-10     	; 0x2ad4 <dtoa_prf+0x296>
    2ade:	f7 01       	movw	r30, r14
    2ae0:	e2 0f       	add	r30, r18
    2ae2:	f1 1d       	adc	r31, r1
    2ae4:	10 82       	st	Z, r1
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	29 96       	adiw	r28, 0x09	; 9
    2aec:	ec e0       	ldi	r30, 0x0C	; 12
    2aee:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__epilogue_restores__+0xc>

00002af2 <__ftoa_engine>:
    2af2:	28 30       	cpi	r18, 0x08	; 8
    2af4:	08 f0       	brcs	.+2      	; 0x2af8 <__ftoa_engine+0x6>
    2af6:	27 e0       	ldi	r18, 0x07	; 7
    2af8:	33 27       	eor	r19, r19
    2afa:	da 01       	movw	r26, r20
    2afc:	99 0f       	add	r25, r25
    2afe:	31 1d       	adc	r19, r1
    2b00:	87 fd       	sbrc	r24, 7
    2b02:	91 60       	ori	r25, 0x01	; 1
    2b04:	00 96       	adiw	r24, 0x00	; 0
    2b06:	61 05       	cpc	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	39 f4       	brne	.+14     	; 0x2b1a <__ftoa_engine+0x28>
    2b0c:	32 60       	ori	r19, 0x02	; 2
    2b0e:	2e 5f       	subi	r18, 0xFE	; 254
    2b10:	3d 93       	st	X+, r19
    2b12:	30 e3       	ldi	r19, 0x30	; 48
    2b14:	2a 95       	dec	r18
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <__ftoa_engine+0x1e>
    2b18:	08 95       	ret
    2b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    2b1c:	30 f0       	brcs	.+12     	; 0x2b2a <__ftoa_engine+0x38>
    2b1e:	80 38       	cpi	r24, 0x80	; 128
    2b20:	71 05       	cpc	r23, r1
    2b22:	61 05       	cpc	r22, r1
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <__ftoa_engine+0x36>
    2b26:	3c 5f       	subi	r19, 0xFC	; 252
    2b28:	3c 5f       	subi	r19, 0xFC	; 252
    2b2a:	3d 93       	st	X+, r19
    2b2c:	91 30       	cpi	r25, 0x01	; 1
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <__ftoa_engine+0x40>
    2b30:	80 68       	ori	r24, 0x80	; 128
    2b32:	91 1d       	adc	r25, r1
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	1f 93       	push	r17
    2b3a:	0f 93       	push	r16
    2b3c:	ff 92       	push	r15
    2b3e:	ef 92       	push	r14
    2b40:	19 2f       	mov	r17, r25
    2b42:	98 7f       	andi	r25, 0xF8	; 248
    2b44:	96 95       	lsr	r25
    2b46:	e9 2f       	mov	r30, r25
    2b48:	96 95       	lsr	r25
    2b4a:	96 95       	lsr	r25
    2b4c:	e9 0f       	add	r30, r25
    2b4e:	ff 27       	eor	r31, r31
    2b50:	e0 53       	subi	r30, 0x30	; 48
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	99 27       	eor	r25, r25
    2b56:	33 27       	eor	r19, r19
    2b58:	ee 24       	eor	r14, r14
    2b5a:	ff 24       	eor	r15, r15
    2b5c:	a7 01       	movw	r20, r14
    2b5e:	e7 01       	movw	r28, r14
    2b60:	05 90       	lpm	r0, Z+
    2b62:	08 94       	sec
    2b64:	07 94       	ror	r0
    2b66:	28 f4       	brcc	.+10     	; 0x2b72 <__ftoa_engine+0x80>
    2b68:	36 0f       	add	r19, r22
    2b6a:	e7 1e       	adc	r14, r23
    2b6c:	f8 1e       	adc	r15, r24
    2b6e:	49 1f       	adc	r20, r25
    2b70:	51 1d       	adc	r21, r1
    2b72:	66 0f       	add	r22, r22
    2b74:	77 1f       	adc	r23, r23
    2b76:	88 1f       	adc	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	06 94       	lsr	r0
    2b7c:	a1 f7       	brne	.-24     	; 0x2b66 <__ftoa_engine+0x74>
    2b7e:	05 90       	lpm	r0, Z+
    2b80:	07 94       	ror	r0
    2b82:	28 f4       	brcc	.+10     	; 0x2b8e <__ftoa_engine+0x9c>
    2b84:	e7 0e       	add	r14, r23
    2b86:	f8 1e       	adc	r15, r24
    2b88:	49 1f       	adc	r20, r25
    2b8a:	56 1f       	adc	r21, r22
    2b8c:	c1 1d       	adc	r28, r1
    2b8e:	77 0f       	add	r23, r23
    2b90:	88 1f       	adc	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	66 1f       	adc	r22, r22
    2b96:	06 94       	lsr	r0
    2b98:	a1 f7       	brne	.-24     	; 0x2b82 <__ftoa_engine+0x90>
    2b9a:	05 90       	lpm	r0, Z+
    2b9c:	07 94       	ror	r0
    2b9e:	28 f4       	brcc	.+10     	; 0x2baa <__ftoa_engine+0xb8>
    2ba0:	f8 0e       	add	r15, r24
    2ba2:	49 1f       	adc	r20, r25
    2ba4:	56 1f       	adc	r21, r22
    2ba6:	c7 1f       	adc	r28, r23
    2ba8:	d1 1d       	adc	r29, r1
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	66 1f       	adc	r22, r22
    2bb0:	77 1f       	adc	r23, r23
    2bb2:	06 94       	lsr	r0
    2bb4:	a1 f7       	brne	.-24     	; 0x2b9e <__ftoa_engine+0xac>
    2bb6:	05 90       	lpm	r0, Z+
    2bb8:	07 94       	ror	r0
    2bba:	20 f4       	brcc	.+8      	; 0x2bc4 <__ftoa_engine+0xd2>
    2bbc:	49 0f       	add	r20, r25
    2bbe:	56 1f       	adc	r21, r22
    2bc0:	c7 1f       	adc	r28, r23
    2bc2:	d8 1f       	adc	r29, r24
    2bc4:	99 0f       	add	r25, r25
    2bc6:	66 1f       	adc	r22, r22
    2bc8:	77 1f       	adc	r23, r23
    2bca:	88 1f       	adc	r24, r24
    2bcc:	06 94       	lsr	r0
    2bce:	a9 f7       	brne	.-22     	; 0x2bba <__ftoa_engine+0xc8>
    2bd0:	84 91       	lpm	r24, Z
    2bd2:	10 95       	com	r17
    2bd4:	17 70       	andi	r17, 0x07	; 7
    2bd6:	41 f0       	breq	.+16     	; 0x2be8 <__ftoa_engine+0xf6>
    2bd8:	d6 95       	lsr	r29
    2bda:	c7 95       	ror	r28
    2bdc:	57 95       	ror	r21
    2bde:	47 95       	ror	r20
    2be0:	f7 94       	ror	r15
    2be2:	e7 94       	ror	r14
    2be4:	1a 95       	dec	r17
    2be6:	c1 f7       	brne	.-16     	; 0x2bd8 <__ftoa_engine+0xe6>
    2be8:	e6 e7       	ldi	r30, 0x76	; 118
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	68 94       	set
    2bee:	15 90       	lpm	r1, Z+
    2bf0:	15 91       	lpm	r17, Z+
    2bf2:	35 91       	lpm	r19, Z+
    2bf4:	65 91       	lpm	r22, Z+
    2bf6:	95 91       	lpm	r25, Z+
    2bf8:	05 90       	lpm	r0, Z+
    2bfa:	7f e2       	ldi	r23, 0x2F	; 47
    2bfc:	73 95       	inc	r23
    2bfe:	e1 18       	sub	r14, r1
    2c00:	f1 0a       	sbc	r15, r17
    2c02:	43 0b       	sbc	r20, r19
    2c04:	56 0b       	sbc	r21, r22
    2c06:	c9 0b       	sbc	r28, r25
    2c08:	d0 09       	sbc	r29, r0
    2c0a:	c0 f7       	brcc	.-16     	; 0x2bfc <__ftoa_engine+0x10a>
    2c0c:	e1 0c       	add	r14, r1
    2c0e:	f1 1e       	adc	r15, r17
    2c10:	43 1f       	adc	r20, r19
    2c12:	56 1f       	adc	r21, r22
    2c14:	c9 1f       	adc	r28, r25
    2c16:	d0 1d       	adc	r29, r0
    2c18:	7e f4       	brtc	.+30     	; 0x2c38 <__ftoa_engine+0x146>
    2c1a:	70 33       	cpi	r23, 0x30	; 48
    2c1c:	11 f4       	brne	.+4      	; 0x2c22 <__ftoa_engine+0x130>
    2c1e:	8a 95       	dec	r24
    2c20:	e6 cf       	rjmp	.-52     	; 0x2bee <__ftoa_engine+0xfc>
    2c22:	e8 94       	clt
    2c24:	01 50       	subi	r16, 0x01	; 1
    2c26:	30 f0       	brcs	.+12     	; 0x2c34 <__ftoa_engine+0x142>
    2c28:	08 0f       	add	r16, r24
    2c2a:	0a f4       	brpl	.+2      	; 0x2c2e <__ftoa_engine+0x13c>
    2c2c:	00 27       	eor	r16, r16
    2c2e:	02 17       	cp	r16, r18
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <__ftoa_engine+0x142>
    2c32:	20 2f       	mov	r18, r16
    2c34:	23 95       	inc	r18
    2c36:	02 2f       	mov	r16, r18
    2c38:	7a 33       	cpi	r23, 0x3A	; 58
    2c3a:	28 f0       	brcs	.+10     	; 0x2c46 <__ftoa_engine+0x154>
    2c3c:	79 e3       	ldi	r23, 0x39	; 57
    2c3e:	7d 93       	st	X+, r23
    2c40:	2a 95       	dec	r18
    2c42:	e9 f7       	brne	.-6      	; 0x2c3e <__ftoa_engine+0x14c>
    2c44:	10 c0       	rjmp	.+32     	; 0x2c66 <__ftoa_engine+0x174>
    2c46:	7d 93       	st	X+, r23
    2c48:	2a 95       	dec	r18
    2c4a:	89 f6       	brne	.-94     	; 0x2bee <__ftoa_engine+0xfc>
    2c4c:	06 94       	lsr	r0
    2c4e:	97 95       	ror	r25
    2c50:	67 95       	ror	r22
    2c52:	37 95       	ror	r19
    2c54:	17 95       	ror	r17
    2c56:	17 94       	ror	r1
    2c58:	e1 18       	sub	r14, r1
    2c5a:	f1 0a       	sbc	r15, r17
    2c5c:	43 0b       	sbc	r20, r19
    2c5e:	56 0b       	sbc	r21, r22
    2c60:	c9 0b       	sbc	r28, r25
    2c62:	d0 09       	sbc	r29, r0
    2c64:	98 f0       	brcs	.+38     	; 0x2c8c <__ftoa_engine+0x19a>
    2c66:	23 95       	inc	r18
    2c68:	7e 91       	ld	r23, -X
    2c6a:	73 95       	inc	r23
    2c6c:	7a 33       	cpi	r23, 0x3A	; 58
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <__ftoa_engine+0x180>
    2c70:	70 e3       	ldi	r23, 0x30	; 48
    2c72:	7c 93       	st	X, r23
    2c74:	20 13       	cpse	r18, r16
    2c76:	b8 f7       	brcc	.-18     	; 0x2c66 <__ftoa_engine+0x174>
    2c78:	7e 91       	ld	r23, -X
    2c7a:	70 61       	ori	r23, 0x10	; 16
    2c7c:	7d 93       	st	X+, r23
    2c7e:	30 f0       	brcs	.+12     	; 0x2c8c <__ftoa_engine+0x19a>
    2c80:	83 95       	inc	r24
    2c82:	71 e3       	ldi	r23, 0x31	; 49
    2c84:	7d 93       	st	X+, r23
    2c86:	70 e3       	ldi	r23, 0x30	; 48
    2c88:	2a 95       	dec	r18
    2c8a:	e1 f7       	brne	.-8      	; 0x2c84 <__ftoa_engine+0x192>
    2c8c:	11 24       	eor	r1, r1
    2c8e:	ef 90       	pop	r14
    2c90:	ff 90       	pop	r15
    2c92:	0f 91       	pop	r16
    2c94:	1f 91       	pop	r17
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	99 27       	eor	r25, r25
    2c9c:	87 fd       	sbrc	r24, 7
    2c9e:	90 95       	com	r25
    2ca0:	08 95       	ret

00002ca2 <strnlen_P>:
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	05 90       	lpm	r0, Z+
    2ca6:	61 50       	subi	r22, 0x01	; 1
    2ca8:	70 40       	sbci	r23, 0x00	; 0
    2caa:	01 10       	cpse	r0, r1
    2cac:	d8 f7       	brcc	.-10     	; 0x2ca4 <strnlen_P+0x2>
    2cae:	80 95       	com	r24
    2cb0:	90 95       	com	r25
    2cb2:	8e 0f       	add	r24, r30
    2cb4:	9f 1f       	adc	r25, r31
    2cb6:	08 95       	ret

00002cb8 <strnlen>:
    2cb8:	fc 01       	movw	r30, r24
    2cba:	61 50       	subi	r22, 0x01	; 1
    2cbc:	70 40       	sbci	r23, 0x00	; 0
    2cbe:	01 90       	ld	r0, Z+
    2cc0:	01 10       	cpse	r0, r1
    2cc2:	d8 f7       	brcc	.-10     	; 0x2cba <strnlen+0x2>
    2cc4:	80 95       	com	r24
    2cc6:	90 95       	com	r25
    2cc8:	8e 0f       	add	r24, r30
    2cca:	9f 1f       	adc	r25, r31
    2ccc:	08 95       	ret

00002cce <fputc>:
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	fb 01       	movw	r30, r22
    2cd8:	23 81       	ldd	r18, Z+3	; 0x03
    2cda:	21 fd       	sbrc	r18, 1
    2cdc:	03 c0       	rjmp	.+6      	; 0x2ce4 <fputc+0x16>
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	9f ef       	ldi	r25, 0xFF	; 255
    2ce2:	2c c0       	rjmp	.+88     	; 0x2d3c <fputc+0x6e>
    2ce4:	22 ff       	sbrs	r18, 2
    2ce6:	16 c0       	rjmp	.+44     	; 0x2d14 <fputc+0x46>
    2ce8:	46 81       	ldd	r20, Z+6	; 0x06
    2cea:	57 81       	ldd	r21, Z+7	; 0x07
    2cec:	24 81       	ldd	r18, Z+4	; 0x04
    2cee:	35 81       	ldd	r19, Z+5	; 0x05
    2cf0:	42 17       	cp	r20, r18
    2cf2:	53 07       	cpc	r21, r19
    2cf4:	44 f4       	brge	.+16     	; 0x2d06 <fputc+0x38>
    2cf6:	a0 81       	ld	r26, Z
    2cf8:	b1 81       	ldd	r27, Z+1	; 0x01
    2cfa:	9d 01       	movw	r18, r26
    2cfc:	2f 5f       	subi	r18, 0xFF	; 255
    2cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2d00:	31 83       	std	Z+1, r19	; 0x01
    2d02:	20 83       	st	Z, r18
    2d04:	8c 93       	st	X, r24
    2d06:	26 81       	ldd	r18, Z+6	; 0x06
    2d08:	37 81       	ldd	r19, Z+7	; 0x07
    2d0a:	2f 5f       	subi	r18, 0xFF	; 255
    2d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0e:	37 83       	std	Z+7, r19	; 0x07
    2d10:	26 83       	std	Z+6, r18	; 0x06
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <fputc+0x6e>
    2d14:	8b 01       	movw	r16, r22
    2d16:	ec 01       	movw	r28, r24
    2d18:	fb 01       	movw	r30, r22
    2d1a:	00 84       	ldd	r0, Z+8	; 0x08
    2d1c:	f1 85       	ldd	r31, Z+9	; 0x09
    2d1e:	e0 2d       	mov	r30, r0
    2d20:	09 95       	icall
    2d22:	89 2b       	or	r24, r25
    2d24:	e1 f6       	brne	.-72     	; 0x2cde <fputc+0x10>
    2d26:	d8 01       	movw	r26, r16
    2d28:	16 96       	adiw	r26, 0x06	; 6
    2d2a:	8d 91       	ld	r24, X+
    2d2c:	9c 91       	ld	r25, X
    2d2e:	17 97       	sbiw	r26, 0x07	; 7
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	17 96       	adiw	r26, 0x07	; 7
    2d34:	9c 93       	st	X, r25
    2d36:	8e 93       	st	-X, r24
    2d38:	16 97       	sbiw	r26, 0x06	; 6
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	08 95       	ret

00002d46 <__ultoa_invert>:
    2d46:	fa 01       	movw	r30, r20
    2d48:	aa 27       	eor	r26, r26
    2d4a:	28 30       	cpi	r18, 0x08	; 8
    2d4c:	51 f1       	breq	.+84     	; 0x2da2 <__ultoa_invert+0x5c>
    2d4e:	20 31       	cpi	r18, 0x10	; 16
    2d50:	81 f1       	breq	.+96     	; 0x2db2 <__ultoa_invert+0x6c>
    2d52:	e8 94       	clt
    2d54:	6f 93       	push	r22
    2d56:	6e 7f       	andi	r22, 0xFE	; 254
    2d58:	6e 5f       	subi	r22, 0xFE	; 254
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	af 4f       	sbci	r26, 0xFF	; 255
    2d62:	b1 e0       	ldi	r27, 0x01	; 1
    2d64:	3e d0       	rcall	.+124    	; 0x2de2 <__ultoa_invert+0x9c>
    2d66:	b4 e0       	ldi	r27, 0x04	; 4
    2d68:	3c d0       	rcall	.+120    	; 0x2de2 <__ultoa_invert+0x9c>
    2d6a:	67 0f       	add	r22, r23
    2d6c:	78 1f       	adc	r23, r24
    2d6e:	89 1f       	adc	r24, r25
    2d70:	9a 1f       	adc	r25, r26
    2d72:	a1 1d       	adc	r26, r1
    2d74:	68 0f       	add	r22, r24
    2d76:	79 1f       	adc	r23, r25
    2d78:	8a 1f       	adc	r24, r26
    2d7a:	91 1d       	adc	r25, r1
    2d7c:	a1 1d       	adc	r26, r1
    2d7e:	6a 0f       	add	r22, r26
    2d80:	71 1d       	adc	r23, r1
    2d82:	81 1d       	adc	r24, r1
    2d84:	91 1d       	adc	r25, r1
    2d86:	a1 1d       	adc	r26, r1
    2d88:	20 d0       	rcall	.+64     	; 0x2dca <__ultoa_invert+0x84>
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <__ultoa_invert+0x48>
    2d8c:	68 94       	set
    2d8e:	3f 91       	pop	r19
    2d90:	2a e0       	ldi	r18, 0x0A	; 10
    2d92:	26 9f       	mul	r18, r22
    2d94:	11 24       	eor	r1, r1
    2d96:	30 19       	sub	r19, r0
    2d98:	30 5d       	subi	r19, 0xD0	; 208
    2d9a:	31 93       	st	Z+, r19
    2d9c:	de f6       	brtc	.-74     	; 0x2d54 <__ultoa_invert+0xe>
    2d9e:	cf 01       	movw	r24, r30
    2da0:	08 95       	ret
    2da2:	46 2f       	mov	r20, r22
    2da4:	47 70       	andi	r20, 0x07	; 7
    2da6:	40 5d       	subi	r20, 0xD0	; 208
    2da8:	41 93       	st	Z+, r20
    2daa:	b3 e0       	ldi	r27, 0x03	; 3
    2dac:	0f d0       	rcall	.+30     	; 0x2dcc <__ultoa_invert+0x86>
    2dae:	c9 f7       	brne	.-14     	; 0x2da2 <__ultoa_invert+0x5c>
    2db0:	f6 cf       	rjmp	.-20     	; 0x2d9e <__ultoa_invert+0x58>
    2db2:	46 2f       	mov	r20, r22
    2db4:	4f 70       	andi	r20, 0x0F	; 15
    2db6:	40 5d       	subi	r20, 0xD0	; 208
    2db8:	4a 33       	cpi	r20, 0x3A	; 58
    2dba:	18 f0       	brcs	.+6      	; 0x2dc2 <__ultoa_invert+0x7c>
    2dbc:	49 5d       	subi	r20, 0xD9	; 217
    2dbe:	31 fd       	sbrc	r19, 1
    2dc0:	40 52       	subi	r20, 0x20	; 32
    2dc2:	41 93       	st	Z+, r20
    2dc4:	02 d0       	rcall	.+4      	; 0x2dca <__ultoa_invert+0x84>
    2dc6:	a9 f7       	brne	.-22     	; 0x2db2 <__ultoa_invert+0x6c>
    2dc8:	ea cf       	rjmp	.-44     	; 0x2d9e <__ultoa_invert+0x58>
    2dca:	b4 e0       	ldi	r27, 0x04	; 4
    2dcc:	a6 95       	lsr	r26
    2dce:	97 95       	ror	r25
    2dd0:	87 95       	ror	r24
    2dd2:	77 95       	ror	r23
    2dd4:	67 95       	ror	r22
    2dd6:	ba 95       	dec	r27
    2dd8:	c9 f7       	brne	.-14     	; 0x2dcc <__ultoa_invert+0x86>
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	61 05       	cpc	r22, r1
    2dde:	71 05       	cpc	r23, r1
    2de0:	08 95       	ret
    2de2:	9b 01       	movw	r18, r22
    2de4:	ac 01       	movw	r20, r24
    2de6:	0a 2e       	mov	r0, r26
    2de8:	06 94       	lsr	r0
    2dea:	57 95       	ror	r21
    2dec:	47 95       	ror	r20
    2dee:	37 95       	ror	r19
    2df0:	27 95       	ror	r18
    2df2:	ba 95       	dec	r27
    2df4:	c9 f7       	brne	.-14     	; 0x2de8 <__ultoa_invert+0xa2>
    2df6:	62 0f       	add	r22, r18
    2df8:	73 1f       	adc	r23, r19
    2dfa:	84 1f       	adc	r24, r20
    2dfc:	95 1f       	adc	r25, r21
    2dfe:	a0 1d       	adc	r26, r0
    2e00:	08 95       	ret

00002e02 <__prologue_saves__>:
    2e02:	2f 92       	push	r2
    2e04:	3f 92       	push	r3
    2e06:	4f 92       	push	r4
    2e08:	5f 92       	push	r5
    2e0a:	6f 92       	push	r6
    2e0c:	7f 92       	push	r7
    2e0e:	8f 92       	push	r8
    2e10:	9f 92       	push	r9
    2e12:	af 92       	push	r10
    2e14:	bf 92       	push	r11
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	ca 1b       	sub	r28, r26
    2e2c:	db 0b       	sbc	r29, r27
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	09 94       	ijmp

00002e3a <__epilogue_restores__>:
    2e3a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e3c:	39 88       	ldd	r3, Y+17	; 0x11
    2e3e:	48 88       	ldd	r4, Y+16	; 0x10
    2e40:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e42:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e44:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e46:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e48:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e4a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e4c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e4e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e50:	df 80       	ldd	r13, Y+7	; 0x07
    2e52:	ee 80       	ldd	r14, Y+6	; 0x06
    2e54:	fd 80       	ldd	r15, Y+5	; 0x05
    2e56:	0c 81       	ldd	r16, Y+4	; 0x04
    2e58:	1b 81       	ldd	r17, Y+3	; 0x03
    2e5a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e5c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e5e:	ce 0f       	add	r28, r30
    2e60:	d1 1d       	adc	r29, r1
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	ed 01       	movw	r28, r26
    2e6e:	08 95       	ret

00002e70 <_exit>:
    2e70:	f8 94       	cli

00002e72 <__stop_program>:
    2e72:	ff cf       	rjmp	.-2      	; 0x2e72 <__stop_program>

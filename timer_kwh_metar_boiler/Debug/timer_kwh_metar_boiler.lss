
timer_kwh_metar_boiler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00002b9e  00002c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  008001c0  008001c0  00002cf2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a7e  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a6  00000000  00000000  00006af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002015  00000000  00000000  00007b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000838  00000000  00000000  00009bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be8  00000000  00000000  0000a3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002606  00000000  00000000  0000afd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000d5da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
       4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
       c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      10:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_4>
      14:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      38:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_14>
      3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      48:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_18>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      50:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__vector_20>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_21>
      58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      5c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      60:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      64:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
      68:	21 06       	cpc	r2, r17
      6a:	73 06       	cpc	r7, r19
      6c:	a0 06       	cpc	r10, r16
      6e:	32 07       	cpc	r19, r18
      70:	1c 08       	sbc	r1, r12
      72:	42 09       	sbc	r20, r2
      74:	67 0a       	sbc	r6, r23

00000076 <__trampolines_end>:
      76:	00 40       	sbci	r16, 0x00	; 0
      78:	7a 10       	cpse	r7, r10
      7a:	f3 5a       	subi	r31, 0xA3	; 163
      7c:	00 a0       	ldd	r0, Z+32	; 0x20
      7e:	72 4e       	sbci	r23, 0xE2	; 226
      80:	18 09       	sbc	r17, r8
      82:	00 10       	cpse	r0, r0
      84:	a5 d4       	rcall	.+2378   	; 0x9d0 <menu1_LCD_ispis+0xce>
      86:	e8 00       	.word	0x00e8	; ????
      88:	00 e8       	ldi	r16, 0x80	; 128
      8a:	76 48       	sbci	r23, 0x86	; 134
      8c:	17 00       	.word	0x0017	; ????
      8e:	00 e4       	ldi	r16, 0x40	; 64
      90:	0b 54       	subi	r16, 0x4B	; 75
      92:	02 00       	.word	0x0002	; ????
      94:	00 ca       	rjmp	.-3072   	; 0xfffff496 <__eeprom_end+0xff7ef496>
      96:	9a 3b       	cpi	r25, 0xBA	; 186
      98:	00 00       	nop
      9a:	00 e1       	ldi	r16, 0x10	; 16
      9c:	f5 05       	cpc	r31, r5
      9e:	00 00       	nop
      a0:	80 96       	adiw	r24, 0x20	; 32
      a2:	98 00       	.word	0x0098	; ????
      a4:	00 00       	nop
      a6:	40 42       	sbci	r20, 0x20	; 32
      a8:	0f 00       	.word	0x000f	; ????
      aa:	00 00       	nop
      ac:	a0 86       	std	Z+8, r10	; 0x08
      ae:	01 00       	.word	0x0001	; ????
      b0:	00 00       	nop
      b2:	10 27       	eor	r17, r16
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	e8 03       	fmulsu	r22, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	64 00       	.word	0x0064	; ????
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	0a 00       	.word	0x000a	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	01 00       	.word	0x0001	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	2c 76       	andi	r18, 0x6C	; 108
      d2:	d8 88       	ldd	r13, Y+16	; 0x10
      d4:	dc 67       	ori	r29, 0x7C	; 124
      d6:	4f 08       	sbc	r4, r15
      d8:	23 df       	rcall	.-442    	; 0xffffff20 <__eeprom_end+0xff7eff20>
      da:	c1 df       	rcall	.-126    	; 0x5e <__SREG__+0x1f>
      dc:	ae 59       	subi	r26, 0x9E	; 158
      de:	e1 b1       	in	r30, 0x01	; 1
      e0:	b7 96       	adiw	r30, 0x27	; 39
      e2:	e5 e3       	ldi	r30, 0x35	; 53
      e4:	e4 53       	subi	r30, 0x34	; 52
      e6:	c6 3a       	cpi	r28, 0xA6	; 166
      e8:	e6 51       	subi	r30, 0x16	; 22
      ea:	99 76       	andi	r25, 0x69	; 105
      ec:	96 e8       	ldi	r25, 0x86	; 134
      ee:	e6 c2       	rjmp	.+1484   	; 0x6bc <lcd1602_send_byte+0x34>
      f0:	84 26       	eor	r8, r20
      f2:	eb 89       	ldd	r30, Y+19	; 0x13
      f4:	8c 9b       	sbis	0x11, 4	; 17
      f6:	62 ed       	ldi	r22, 0xD2	; 210
      f8:	40 7c       	andi	r20, 0xC0	; 192
      fa:	6f fc       	.word	0xfc6f	; ????
      fc:	ef bc       	out	0x2f, r14	; 47
      fe:	9c 9f       	mul	r25, r28
     100:	40 f2       	brcs	.-112    	; 0x92 <__trampolines_end+0x1c>
     102:	ba a5       	ldd	r27, Y+42	; 0x2a
     104:	6f a5       	ldd	r22, Y+47	; 0x2f
     106:	f4 90       	lpm	r15, Z
     108:	05 5a       	subi	r16, 0xA5	; 165
     10a:	2a f7       	brpl	.-54     	; 0xd6 <__trampolines_end+0x60>
     10c:	5c 93       	st	X, r21
     10e:	6b 6c       	ori	r22, 0xCB	; 203
     110:	f9 67       	ori	r31, 0x79	; 121
     112:	6d c1       	rjmp	.+730    	; 0x3ee <i2c_send_packet+0x8>
     114:	1b fc       	.word	0xfc1b	; ????
     116:	e0 e4       	ldi	r30, 0x40	; 64
     118:	0d 47       	sbci	r16, 0x7D	; 125
     11a:	fe f5       	brtc	.+126    	; 0x19a <.do_clear_bss_loop>
     11c:	20 e6       	ldi	r18, 0x60	; 96
     11e:	b5 00       	.word	0x00b5	; ????
     120:	d0 ed       	ldi	r29, 0xD0	; 208
     122:	90 2e       	mov	r9, r16
     124:	03 00       	.word	0x0003	; ????
     126:	94 35       	cpi	r25, 0x54	; 84
     128:	77 05       	cpc	r23, r7
     12a:	00 80       	ld	r0, Z
     12c:	84 1e       	adc	r8, r20
     12e:	08 00       	.word	0x0008	; ????
     130:	00 20       	and	r0, r0
     132:	4e 0a       	sbc	r4, r30
     134:	00 00       	nop
     136:	00 c8       	rjmp	.-4096   	; 0xfffff138 <__eeprom_end+0xff7ef138>
     138:	0c 33       	cpi	r16, 0x3C	; 60
     13a:	33 33       	cpi	r19, 0x33	; 51
     13c:	33 0f       	add	r19, r19
     13e:	98 6e       	ori	r25, 0xE8	; 232
     140:	12 83       	std	Z+2, r17	; 0x02
     142:	11 41       	sbci	r17, 0x11	; 17
     144:	ef 8d       	ldd	r30, Y+31	; 0x1f
     146:	21 14       	cp	r2, r1
     148:	89 3b       	cpi	r24, 0xB9	; 185
     14a:	e6 55       	subi	r30, 0x56	; 86
     14c:	16 cf       	rjmp	.-468    	; 0xffffff7a <__eeprom_end+0xff7eff7a>
     14e:	fe e6       	ldi	r31, 0x6E	; 110
     150:	db 18       	sub	r13, r11
     152:	d1 84       	ldd	r13, Z+9	; 0x09
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	1b f7       	brvc	.-58     	; 0x11e <__trampolines_end+0xa8>
     158:	7c 1d       	adc	r23, r12
     15a:	90 1d       	adc	r25, r0
     15c:	a4 bb       	out	0x14, r26	; 20
     15e:	e4 24       	eor	r14, r4
     160:	20 32       	cpi	r18, 0x20	; 32
     162:	84 72       	andi	r24, 0x24	; 36
     164:	5e 22       	and	r5, r30
     166:	81 00       	.word	0x0081	; ????
     168:	c9 f1       	breq	.+114    	; 0x1dc <__vector_21+0x14>
     16a:	24 ec       	ldi	r18, 0xC4	; 196
     16c:	a1 e5       	ldi	r26, 0x51	; 81
     16e:	3d 27       	eor	r19, r29

00000170 <__ctors_end>:
     170:	11 24       	eor	r1, r1
     172:	1f be       	out	0x3f, r1	; 63
     174:	cf ef       	ldi	r28, 0xFF	; 255
     176:	d8 e0       	ldi	r29, 0x08	; 8
     178:	de bf       	out	0x3e, r29	; 62
     17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
     17c:	11 e0       	ldi	r17, 0x01	; 1
     17e:	a0 e0       	ldi	r26, 0x00	; 0
     180:	b1 e0       	ldi	r27, 0x01	; 1
     182:	ee e9       	ldi	r30, 0x9E	; 158
     184:	fb e2       	ldi	r31, 0x2B	; 43
     186:	02 c0       	rjmp	.+4      	; 0x18c <__do_copy_data+0x10>
     188:	05 90       	lpm	r0, Z+
     18a:	0d 92       	st	X+, r0
     18c:	a0 3c       	cpi	r26, 0xC0	; 192
     18e:	b1 07       	cpc	r27, r17
     190:	d9 f7       	brne	.-10     	; 0x188 <__do_copy_data+0xc>

00000192 <__do_clear_bss>:
     192:	22 e0       	ldi	r18, 0x02	; 2
     194:	a0 ec       	ldi	r26, 0xC0	; 192
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
     19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
     19c:	a3 35       	cpi	r26, 0x53	; 83
     19e:	b2 07       	cpc	r27, r18
     1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
     1a2:	0e 94 83 0a 	call	0x1506	; 0x1506 <main>
     1a6:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <_exit>

000001aa <__bad_interrupt>:
     1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <ADC_init>:


void ADC_init()
{
	
	PRR = 0;						//power reduction off
     1ae:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	ADMUX = 0b11000000;		        //ref internal 1.1V, kanal A0
     1b2:	80 ec       	ldi	r24, 0xC0	; 192
     1b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b11101110;			//ADC enable, start conversion, auto trigger enable, ADC conv. complete interrupt enable, 64 prescaler = 250kHz, a preporuka je do 200kHz
     1b8:	8e ee       	ldi	r24, 0xEE	; 238
     1ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b0;					//0b11
     1be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ad_kanal = 0; //prvo citam A0
     1c2:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ad_kanal>
     1c6:	08 95       	ret

000001c8 <__vector_21>:


/* TODO: u ISR-u neka bude samo flag, a obrada podataka izdvojeno, jer je ovo glup nacin, da racun radim u prekidnoj rutini */

ISR(ADC_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
	/*
	 * AD konverzija
	 * ISR okine kada je gotova konverzija
	 */
	isr_adc = 1;	//set flag
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>

}
     1da:	8f 91       	pop	r24
     1dc:	0f 90       	pop	r0
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	0f 90       	pop	r0
     1e2:	1f 90       	pop	r1
     1e4:	18 95       	reti

000001e6 <adc_read>:

void adc_read()
{
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
	
	if (isr_adc)
     1f6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <__data_end>
     1fa:	88 23       	and	r24, r24
     1fc:	09 f4       	brne	.+2      	; 0x200 <adc_read+0x1a>
     1fe:	85 c0       	rjmp	.+266    	; 0x30a <adc_read+0x124>
	{
		isr_adc = 0;	//reset flag
     200:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <__data_end>
	
	
		//upis ad konverzije oba kanala u odgovarajuce promenljive
		if(ad_kanal == 0)
     204:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ad_kanal>
     208:	81 11       	cpse	r24, r1
     20a:	09 c0       	rjmp	.+18     	; 0x21e <adc_read+0x38>
			adc_napon_raw = (uint16_t)ADC;		//potrebno je jos skalirati u zavisnosti od Vref i ulaznog napona i dole isto za struju
     20c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     210:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     214:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <adc_napon_raw+0x1>
     218:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <adc_napon_raw>
     21c:	0a c0       	rjmp	.+20     	; 0x232 <adc_read+0x4c>
		else if(ad_kanal == 1)
     21e:	81 30       	cpi	r24, 0x01	; 1
     220:	41 f4       	brne	.+16     	; 0x232 <adc_read+0x4c>
			adc_struja_raw = (uint16_t)ADC;
     222:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     226:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     22a:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <adc_struja_raw+0x1>
     22e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <adc_struja_raw>
	
		//npr: napon 1023 = 280V
		//     struja 1023 = 25A
		napon = adc_napon_raw/3.65;
     232:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <adc_napon_raw>
     236:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <adc_napon_raw+0x1>
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__floatunsisf>
     242:	2a e9       	ldi	r18, 0x9A	; 154
     244:	39 e9       	ldi	r19, 0x99	; 153
     246:	49 e6       	ldi	r20, 0x69	; 105
     248:	50 e4       	ldi	r21, 0x40	; 64
     24a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__divsf3>
     24e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__fixunssfsi>
     252:	6b 01       	movw	r12, r22
     254:	7c 01       	movw	r14, r24
     256:	70 93 cf 01 	sts	0x01CF, r23	; 0x8001cf <napon+0x1>
     25a:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <napon>
		struja = adc_struja_raw/40.92;
     25e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <adc_struja_raw>
     262:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <adc_struja_raw+0x1>
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__floatunsisf>
     26e:	24 e1       	ldi	r18, 0x14	; 20
     270:	3e ea       	ldi	r19, 0xAE	; 174
     272:	43 e2       	ldi	r20, 0x23	; 35
     274:	52 e4       	ldi	r21, 0x42	; 66
     276:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__divsf3>
     27a:	4b 01       	movw	r8, r22
     27c:	5c 01       	movw	r10, r24
     27e:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <struja>
     282:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <struja+0x1>
     286:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <struja+0x2>
     28a:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <struja+0x3>
		snaga = (napon * struja)/1000.0;	//kW
     28e:	b6 01       	movw	r22, r12
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__floatunsisf>
     298:	a5 01       	movw	r20, r10
     29a:	94 01       	movw	r18, r8
     29c:	0e 94 1e 10 	call	0x203c	; 0x203c <__mulsf3>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	4a e7       	ldi	r20, 0x7A	; 122
     2a6:	54 e4       	ldi	r21, 0x44	; 68
     2a8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__divsf3>
     2ac:	60 93 c6 01 	sts	0x01C6, r22	; 0x8001c6 <snaga>
     2b0:	70 93 c7 01 	sts	0x01C7, r23	; 0x8001c7 <snaga+0x1>
     2b4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <snaga+0x2>
     2b8:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <snaga+0x3>
		//snaga se integrali(sumira) svaki sekund u main-u cime se racuna elektricna energija
		
		/**************************************************************************************************************/
		ADCSRA &= ~(1<<ADEN);	//ISKLJUCIM ADC da bi promena u ADMUX bila sigurna, po preporuci iz datasheet-a
     2bc:	ea e7       	ldi	r30, 0x7A	; 122
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 77       	andi	r24, 0x7F	; 127
     2c4:	80 83       	st	Z, r24
	
	
		ad_kanal++;			//inkrementiraj kanal
     2c6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ad_kanal>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <ad_kanal>
		if(ad_kanal > 1)	//kreni opet od nule kad dodjes do poslednjeg; 1, da citam samo prva dva
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	18 f0       	brcs	.+6      	; 0x2da <adc_read+0xf4>
			ad_kanal = 0;
     2d4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <ad_kanal>
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <adc_read+0xfe>
	


	
		//multipleksiranje ad ulaza; tj. promena ad kanala
		switch(ad_kanal)
     2da:	88 23       	and	r24, r24
     2dc:	19 f0       	breq	.+6      	; 0x2e4 <adc_read+0xfe>
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	39 f0       	breq	.+14     	; 0x2f0 <adc_read+0x10a>
     2e2:	0e c0       	rjmp	.+28     	; 0x300 <adc_read+0x11a>
		{
			case 0:
			ADMUX &= ~(0b11);		//00;ref internal 1.1V, kanal A0
     2e4:	ec e7       	ldi	r30, 0x7C	; 124
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	8c 7f       	andi	r24, 0xFC	; 252
     2ec:	80 83       	st	Z, r24
			break;
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <adc_read+0x11a>
		
			case 1:
			ADMUX &= ~(0b10);		//01;ref internal 1.1V, kanal A1
     2f0:	ec e7       	ldi	r30, 0x7C	; 124
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8d 7f       	andi	r24, 0xFD	; 253
     2f8:	80 83       	st	Z, r24
			ADMUX |= (0b1);
     2fa:	80 81       	ld	r24, Z
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	80 83       	st	Z, r24
		}
	
	
		//napomena: promena ulaza se vrsi ovde, a kad naredni put uleti u ISR vrsi se konverzija tog kanala.
	
		ADCSRA |= (1<<ADEN)|(1<<ADSC);	//ponovo dozvolim adc posle promene u ADMUX i pokrenem opet prvu konverziju da bi htelo da radi u Free running
     300:	ea e7       	ldi	r30, 0x7A	; 122
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	80 6c       	ori	r24, 0xC0	; 192
     308:	80 83       	st	Z, r24
		
	}
}
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	af 90       	pop	r10
     316:	9f 90       	pop	r9
     318:	8f 90       	pop	r8
     31a:	08 95       	ret

0000031c <EEPROM_read>:


uint8_t EEPROM_read(uint16_t uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     31c:	f9 99       	sbic	0x1f, 1	; 31
     31e:	fe cf       	rjmp	.-4      	; 0x31c <EEPROM_read>
	
	/* Set up address register */
	EEAR = uiAddress;
     320:	92 bd       	out	0x22, r25	; 34
     322:	81 bd       	out	0x21, r24	; 33
	
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     324:	f8 9a       	sbi	0x1f, 0	; 31
	
	/* Return data from Data Register */
	return EEDR;
     326:	80 b5       	in	r24, 0x20	; 32
}
     328:	08 95       	ret

0000032a <EEPROM_write>:

void EEPROM_write(uint16_t uiAddress, uint8_t ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE));
     32a:	f9 99       	sbic	0x1f, 1	; 31
     32c:	fe cf       	rjmp	.-4      	; 0x32a <EEPROM_write>
	
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     32e:	92 bd       	out	0x22, r25	; 34
     330:	81 bd       	out	0x21, r24	; 33
	EEDR = ucData;
     332:	60 bd       	out	0x20, r22	; 32
	
	/**********************!!!!!!!!!!!!!!!!!!!!!!***************************/
	cli();									//zabrana interapta, po preporuci iz datasheet-a, doci ce do write-faila ako se desi interapt izmedju ova dva koraka
     334:	f8 94       	cli
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     336:	fa 9a       	sbi	0x1f, 2	; 31
	
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     338:	f9 9a       	sbi	0x1f, 1	; 31
	
	sei();									//dozvola interapta
     33a:	78 94       	sei
     33c:	08 95       	ret

0000033e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}
     33e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     342:	88 e4       	ldi	r24, 0x48	; 72
     344:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     348:	08 95       	ret

0000034a <i2c_start_wait>:
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec eb       	ldi	r30, 0xBC	; 188
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	24 ea       	ldi	r18, 0xA4	; 164
     354:	a9 eb       	ldi	r26, 0xB9	; 185
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	cb eb       	ldi	r28, 0xBB	; 187
     35a:	d0 e0       	ldi	r29, 0x00	; 0
     35c:	34 e8       	ldi	r19, 0x84	; 132
     35e:	44 e9       	ldi	r20, 0x94	; 148
     360:	20 83       	st	Z, r18
     362:	90 81       	ld	r25, Z
     364:	99 23       	and	r25, r25
     366:	ec f7       	brge	.-6      	; 0x362 <i2c_start_wait+0x18>
     368:	9c 91       	ld	r25, X
     36a:	98 7f       	andi	r25, 0xF8	; 248
     36c:	98 30       	cpi	r25, 0x08	; 8
     36e:	11 f0       	breq	.+4      	; 0x374 <i2c_start_wait+0x2a>
     370:	90 31       	cpi	r25, 0x10	; 16
     372:	b1 f7       	brne	.-20     	; 0x360 <i2c_start_wait+0x16>
     374:	88 83       	st	Y, r24
     376:	30 83       	st	Z, r19
     378:	90 81       	ld	r25, Z
     37a:	99 23       	and	r25, r25
     37c:	ec f7       	brge	.-6      	; 0x378 <i2c_start_wait+0x2e>
     37e:	9c 91       	ld	r25, X
     380:	98 7f       	andi	r25, 0xF8	; 248
     382:	90 32       	cpi	r25, 0x20	; 32
     384:	11 f0       	breq	.+4      	; 0x38a <i2c_start_wait+0x40>
     386:	98 35       	cpi	r25, 0x58	; 88
     388:	29 f4       	brne	.+10     	; 0x394 <i2c_start_wait+0x4a>
     38a:	40 83       	st	Z, r20
     38c:	90 81       	ld	r25, Z
     38e:	94 fd       	sbrc	r25, 4
     390:	fd cf       	rjmp	.-6      	; 0x38c <i2c_start_wait+0x42>
     392:	e6 cf       	rjmp	.-52     	; 0x360 <i2c_start_wait+0x16>
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <i2c_stop>:
     39a:	84 e9       	ldi	r24, 0x94	; 148
     39c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3a0:	ec eb       	ldi	r30, 0xBC	; 188
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	84 fd       	sbrc	r24, 4
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <i2c_stop+0xa>
     3aa:	08 95       	ret

000003ac <i2c_write>:
     3ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     3b0:	84 e8       	ldi	r24, 0x84	; 132
     3b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     3b6:	ec eb       	ldi	r30, 0xBC	; 188
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	88 23       	and	r24, r24
     3be:	ec f7       	brge	.-6      	; 0x3ba <i2c_write+0xe>
     3c0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3c4:	98 7f       	andi	r25, 0xF8	; 248
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	98 32       	cpi	r25, 0x28	; 40
     3ca:	09 f4       	brne	.+2      	; 0x3ce <i2c_write+0x22>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3d0:	84 e8       	ldi	r24, 0x84	; 132
     3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     3d6:	ec eb       	ldi	r30, 0xBC	; 188
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	88 23       	and	r24, r24
     3de:	ec f7       	brge	.-6      	; 0x3da <i2c_readNak+0xa>
	
    return TWDR;
     3e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}
     3e4:	08 95       	ret

000003e6 <i2c_send_packet>:
 koji koristi drugu i2c "biblioteku"
 
 Return:  no return - void
*************************************************************************/
void i2c_send_packet(unsigned char value, unsigned char address)
{
     3e6:	cf 93       	push	r28
     3e8:	c8 2f       	mov	r28, r24
     3ea:	86 2f       	mov	r24, r22
	i2c_send_byte(value);
	i2c_stop_condition();
	*/
	
	
	i2c_start_wait(address+I2C_WRITE);     // set device address and write mode
     3ec:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
	i2c_write(value);                      // write 
     3f0:	8c 2f       	mov	r24, r28
     3f2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
	i2c_stop();                            // set stop conditon = release bus
     3f6:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <sati_ispis>:




void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	fc 01       	movw	r30, r24
     408:	06 2f       	mov	r16, r22
     40a:	17 2f       	mov	r17, r23
     40c:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     40e:	21 11       	cpse	r18, r1
     410:	28 c0       	rjmp	.+80     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	{
		(*sat)++;
     412:	80 81       	ld	r24, Z
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
     414:	99 ee       	ldi	r25, 0xE9	; 233
     416:	98 0f       	add	r25, r24
     418:	96 30       	cpi	r25, 0x06	; 6
     41a:	18 f0       	brcs	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
void sati_ispis(uint8_t *sat, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sat)++;
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 83       	st	Z, r24
     420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		if(*sat >= 24 && *sat < 30)		//<30 posto je hr = unsigned int
			*sat = 0;
     422:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sat);
     424:	80 81       	ld	r24, Z
     426:	1f 92       	push	r1
     428:	8f 93       	push	r24
     42a:	89 e1       	ldi	r24, 0x19	; 25
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	1f 93       	push	r17
     434:	0f 93       	push	r16
     436:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     43a:	88 81       	ld	r24, Y
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     444:	80 2f       	mov	r24, r16
     446:	91 2f       	mov	r25, r17
     448:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	88 81       	ld	r24, Y
     450:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
     460:	28 c0       	rjmp	.+80     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}
	else if (inc_dec == UMANJI)
     462:	21 30       	cpi	r18, 0x01	; 1
     464:	31 f5       	brne	.+76     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{
		(*sat)--;
     466:	80 81       	ld	r24, Z
     468:	81 50       	subi	r24, 0x01	; 1
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     46a:	8a 3f       	cpi	r24, 0xFA	; 250
     46c:	10 f4       	brcc	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sat)--;
     46e:	80 83       	st	Z, r24
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		if(*sat >= 250 && *sat <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sat = 23;
     472:	87 e1       	ldi	r24, 0x17	; 23
     474:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sat);
     476:	80 81       	ld	r24, Z
     478:	1f 92       	push	r1
     47a:	8f 93       	push	r24
     47c:	89 e1       	ldi	r24, 0x19	; 25
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	9f 93       	push	r25
     482:	8f 93       	push	r24
     484:	1f 93       	push	r17
     486:	0f 93       	push	r16
     488:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     48c:	88 81       	ld	r24, Y
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	81 50       	subi	r24, 0x01	; 1
     492:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     496:	80 2f       	mov	r24, r16
     498:	91 2f       	mov	r25, r17
     49a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	88 81       	ld	r24, Y
     4a2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
	}
	
	
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <minuti_ispis>:

void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	fc 01       	movw	r30, r24
     4c6:	06 2f       	mov	r16, r22
     4c8:	17 2f       	mov	r17, r23
     4ca:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     4cc:	21 11       	cpse	r18, r1
     4ce:	28 c0       	rjmp	.+80     	; 0x520 <minuti_ispis+0x64>
	{
		(*minut)++;
     4d0:	80 81       	ld	r24, Z
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
     4d2:	95 ec       	ldi	r25, 0xC5	; 197
     4d4:	98 0f       	add	r25, r24
     4d6:	95 30       	cpi	r25, 0x05	; 5
     4d8:	18 f0       	brcs	.+6      	; 0x4e0 <minuti_ispis+0x24>
void minuti_ispis(uint8_t *minut, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*minut)++;
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	80 83       	st	Z, r24
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <minuti_ispis+0x26>
		if(*minut >= 60 && *minut < 65)		//<30 posto je hr = unsigned int
			*minut = 0;
     4e0:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *minut);
     4e2:	80 81       	ld	r24, Z
     4e4:	1f 92       	push	r1
     4e6:	8f 93       	push	r24
     4e8:	89 e1       	ldi	r24, 0x19	; 25
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	9f 93       	push	r25
     4ee:	8f 93       	push	r24
     4f0:	1f 93       	push	r17
     4f2:	0f 93       	push	r16
     4f4:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     4f8:	88 81       	ld	r24, Y
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	81 50       	subi	r24, 0x01	; 1
     4fe:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     502:	80 2f       	mov	r24, r16
     504:	91 2f       	mov	r25, r17
     506:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	88 81       	ld	r24, Y
     50e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	28 c0       	rjmp	.+80     	; 0x570 <minuti_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     520:	21 30       	cpi	r18, 0x01	; 1
     522:	31 f5       	brne	.+76     	; 0x570 <minuti_ispis+0xb4>
	{
		(*minut)--;
     524:	80 81       	ld	r24, Z
     526:	81 50       	subi	r24, 0x01	; 1
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     528:	8a 3f       	cpi	r24, 0xFA	; 250
     52a:	10 f4       	brcc	.+4      	; 0x530 <minuti_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*minut)--;
     52c:	80 83       	st	Z, r24
     52e:	02 c0       	rjmp	.+4      	; 0x534 <minuti_ispis+0x78>
		if(*minut >= 250 && *minut <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*minut = 59;
     530:	8b e3       	ldi	r24, 0x3B	; 59
     532:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *minut);
     534:	80 81       	ld	r24, Z
     536:	1f 92       	push	r1
     538:	8f 93       	push	r24
     53a:	89 e1       	ldi	r24, 0x19	; 25
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	1f 93       	push	r17
     544:	0f 93       	push	r16
     546:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     54a:	88 81       	ld	r24, Y
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	81 50       	subi	r24, 0x01	; 1
     550:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     554:	80 2f       	mov	r24, r16
     556:	91 2f       	mov	r25, r17
     558:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	88 81       	ld	r24, Y
     560:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
	}
	
	
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	08 95       	ret

0000057a <sekundi_ispis>:

void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	fc 01       	movw	r30, r24
     584:	06 2f       	mov	r16, r22
     586:	17 2f       	mov	r17, r23
     588:	ea 01       	movw	r28, r20
	
	if (inc_dec == UVECAJ)
     58a:	21 11       	cpse	r18, r1
     58c:	28 c0       	rjmp	.+80     	; 0x5de <sekundi_ispis+0x64>
	{
		(*sekund)++;
     58e:	80 81       	ld	r24, Z
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
     590:	95 ec       	ldi	r25, 0xC5	; 197
     592:	98 0f       	add	r25, r24
     594:	95 30       	cpi	r25, 0x05	; 5
     596:	18 f0       	brcs	.+6      	; 0x59e <sekundi_ispis+0x24>
void sekundi_ispis(uint8_t *sekund, char *buff, int8_t *cursor, uint8_t inc_dec)
{
	
	if (inc_dec == UVECAJ)
	{
		(*sekund)++;
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 83       	st	Z, r24
     59c:	01 c0       	rjmp	.+2      	; 0x5a0 <sekundi_ispis+0x26>
		if(*sekund >= 60 && *sekund < 65)		//<30 posto je hr = unsigned int
			*sekund = 0;
     59e:	10 82       	st	Z, r1
		
		sprintf(buff, "%02d", *sekund);
     5a0:	80 81       	ld	r24, Z
     5a2:	1f 92       	push	r1
     5a4:	8f 93       	push	r24
     5a6:	89 e1       	ldi	r24, 0x19	; 25
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	1f 93       	push	r17
     5b0:	0f 93       	push	r16
     5b2:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     5b6:	88 81       	ld	r24, Y
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	81 50       	subi	r24, 0x01	; 1
     5bc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     5c0:	80 2f       	mov	r24, r16
     5c2:	91 2f       	mov	r25, r17
     5c4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	88 81       	ld	r24, Y
     5cc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	28 c0       	rjmp	.+80     	; 0x62e <sekundi_ispis+0xb4>
	}
	else if (inc_dec == UMANJI)
     5de:	21 30       	cpi	r18, 0x01	; 1
     5e0:	31 f5       	brne	.+76     	; 0x62e <sekundi_ispis+0xb4>
	{
		(*sekund)--;
     5e2:	80 81       	ld	r24, Z
     5e4:	81 50       	subi	r24, 0x01	; 1
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
     5e6:	8a 3f       	cpi	r24, 0xFA	; 250
     5e8:	10 f4       	brcc	.+4      	; 0x5ee <sekundi_ispis+0x74>
		lcd1602_send_string(buff);
		lcd1602_goto_xy(*cursor,1);
	}
	else if (inc_dec == UMANJI)
	{
		(*sekund)--;
     5ea:	80 83       	st	Z, r24
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <sekundi_ispis+0x78>
		if(*sekund >= 250 && *sekund <= 255)	//posto je hr = unsigned int 8 bit i overflow se desi
			*sekund = 59;
     5ee:	8b e3       	ldi	r24, 0x3B	; 59
     5f0:	80 83       	st	Z, r24
		
		sprintf(buff, "%02d", *sekund);
     5f2:	80 81       	ld	r24, Z
     5f4:	1f 92       	push	r1
     5f6:	8f 93       	push	r24
     5f8:	89 e1       	ldi	r24, 0x19	; 25
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	9f 93       	push	r25
     5fe:	8f 93       	push	r24
     600:	1f 93       	push	r17
     602:	0f 93       	push	r16
     604:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		lcd1602_goto_xy(*cursor-1,1);
     608:	88 81       	ld	r24, Y
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
		lcd1602_send_string(buff);
     612:	80 2f       	mov	r24, r16
     614:	91 2f       	mov	r25, r17
     616:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		lcd1602_goto_xy(*cursor,1);
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	88 81       	ld	r24, Y
     61e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
	}
	
	
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	08 95       	ret

00000638 <putnibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     638:	cf 93       	push	r28
     63a:	c8 2f       	mov	r28, r24
     63c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     640:	84 60       	ori	r24, 0x04	; 4
     642:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     646:	6e e4       	ldi	r22, 0x4E	; 78
     648:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     64c:	87 ec       	ldi	r24, 0xC7	; 199
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <putnibble+0x18>
     654:	00 c0       	rjmp	.+0      	; 0x656 <putnibble+0x1e>
     656:	00 00       	nop
     658:	c2 95       	swap	r28
     65a:	c0 7f       	andi	r28, 0xF0	; 240
     65c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     660:	6e e4       	ldi	r22, 0x4E	; 78
     662:	8c 2b       	or	r24, r28
     664:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     668:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     66c:	8b 7f       	andi	r24, 0xFB	; 251
     66e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     672:	6e e4       	ldi	r22, 0x4E	; 78
     674:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     678:	87 ec       	ldi	r24, 0xC7	; 199
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <putnibble+0x44>
     680:	00 c0       	rjmp	.+0      	; 0x682 <putnibble+0x4a>
     682:	00 00       	nop
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <lcd1602_send_byte>:
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	c8 2f       	mov	r28, r24
     68e:	d8 2f       	mov	r29, r24
     690:	d2 95       	swap	r29
     692:	df 70       	andi	r29, 0x0F	; 15
     694:	61 11       	cpse	r22, r1
     696:	09 c0       	rjmp	.+18     	; 0x6aa <lcd1602_send_byte+0x22>
     698:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     69c:	8e 7f       	andi	r24, 0xFE	; 254
     69e:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     6a2:	6e e4       	ldi	r22, 0x4E	; 78
     6a4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6a8:	08 c0       	rjmp	.+16     	; 0x6ba <lcd1602_send_byte+0x32>
     6aa:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     6ae:	81 60       	ori	r24, 0x01	; 1
     6b0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     6b4:	6e e4       	ldi	r22, 0x4E	; 78
     6b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6ba:	8d 2f       	mov	r24, r29
     6bc:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6c0:	8c 2f       	mov	r24, r28
     6c2:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <lcd1602_send_char>:
     6cc:	cf 93       	push	r28
     6ce:	c8 2f       	mov	r28, r24
     6d0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     6d4:	81 60       	ori	r24, 0x01	; 1
     6d6:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     6da:	6e e4       	ldi	r22, 0x4E	; 78
     6dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     6e0:	8c 2f       	mov	r24, r28
     6e2:	82 95       	swap	r24
     6e4:	8f 70       	andi	r24, 0x0F	; 15
     6e6:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6ea:	8c 2f       	mov	r24, r28
     6ec:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <lcd1602_init>:
     6f4:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <led_pin>
     6f8:	0e 94 9f 01 	call	0x33e	; 0x33e <i2c_init>
     6fc:	8f e5       	ldi	r24, 0x5F	; 95
     6fe:	9a ee       	ldi	r25, 0xEA	; 234
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <lcd1602_init+0xc>
     704:	00 c0       	rjmp	.+0      	; 0x706 <lcd1602_init+0x12>
     706:	00 00       	nop
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     70e:	8f e7       	ldi	r24, 0x7F	; 127
     710:	9e e3       	ldi	r25, 0x3E	; 62
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	f1 f7       	brne	.-4      	; 0x712 <lcd1602_init+0x1e>
     716:	00 c0       	rjmp	.+0      	; 0x718 <lcd1602_init+0x24>
     718:	00 00       	nop
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     720:	8f e8       	ldi	r24, 0x8F	; 143
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	f1 f7       	brne	.-4      	; 0x724 <lcd1602_init+0x30>
     728:	00 c0       	rjmp	.+0      	; 0x72a <lcd1602_init+0x36>
     72a:	00 00       	nop
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     732:	8f e9       	ldi	r24, 0x9F	; 159
     734:	9f e0       	ldi	r25, 0x0F	; 15
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <lcd1602_init+0x42>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <lcd1602_init+0x48>
     73c:	00 00       	nop
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	0e 94 1c 03 	call	0x638	; 0x638 <putnibble>
     744:	8f e9       	ldi	r24, 0x9F	; 159
     746:	9f e0       	ldi	r25, 0x0F	; 15
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <lcd1602_init+0x54>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <lcd1602_init+0x5a>
     74e:	00 00       	nop
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	88 e2       	ldi	r24, 0x28	; 40
     754:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     758:	8f e9       	ldi	r24, 0x9F	; 159
     75a:	9f e0       	ldi	r25, 0x0F	; 15
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <lcd1602_init+0x68>
     760:	00 c0       	rjmp	.+0      	; 0x762 <lcd1602_init+0x6e>
     762:	00 00       	nop
     764:	60 e0       	ldi	r22, 0x00	; 0
     766:	8c e0       	ldi	r24, 0x0C	; 12
     768:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     76c:	8f e9       	ldi	r24, 0x9F	; 159
     76e:	9f e0       	ldi	r25, 0x0F	; 15
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <lcd1602_init+0x7c>
     774:	00 c0       	rjmp	.+0      	; 0x776 <lcd1602_init+0x82>
     776:	00 00       	nop
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     780:	8f e9       	ldi	r24, 0x9F	; 159
     782:	9f e0       	ldi	r25, 0x0F	; 15
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <lcd1602_init+0x90>
     788:	00 c0       	rjmp	.+0      	; 0x78a <lcd1602_init+0x96>
     78a:	00 00       	nop
     78c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     790:	88 60       	ori	r24, 0x08	; 8
     792:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     796:	6e e4       	ldi	r22, 0x4E	; 78
     798:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     79c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <led_pin>
     7a0:	8d 7f       	andi	r24, 0xFD	; 253
     7a2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <led_pin>
     7a6:	6e e4       	ldi	r22, 0x4E	; 78
     7a8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <i2c_send_packet>
     7ac:	08 95       	ret

000007ae <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     7ae:	90 e4       	ldi	r25, 0x40	; 64
     7b0:	69 9f       	mul	r22, r25
     7b2:	80 0d       	add	r24, r0
     7b4:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	80 68       	ori	r24, 0x80	; 128
     7ba:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7be:	08 95       	ret

000007c0 <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	fc 01       	movw	r30, r24
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7c8:	80 81       	ld	r24, Z
     7ca:	88 23       	and	r24, r24
     7cc:	59 f0       	breq	.+22     	; 0x7e4 <lcd1602_send_string+0x24>
     7ce:	8f 01       	movw	r16, r30
     7d0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		lcd1602_send_char(str[i]);
     7d2:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd1602_send_char>
		i++;
     7d6:	cf 5f       	subi	r28, 0xFF	; 255
	/*
	for(i = 0; str[i] != '\0'; i++)
		lcd1602_send_char(str[i]);
	*/	
	
	while (str[i] != '\0')
     7d8:	f8 01       	movw	r30, r16
     7da:	ec 0f       	add	r30, r28
     7dc:	f1 1d       	adc	r31, r1
     7de:	80 81       	ld	r24, Z
     7e0:	81 11       	cpse	r24, r1
     7e2:	f7 cf       	rjmp	.-18     	; 0x7d2 <lcd1602_send_string+0x12>
	{
		lcd1602_send_char(str[i]);
		i++;
	}
}
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	08 95       	ret

000007ec <lcd1602_cursor_blink>:

void lcd1602_cursor_blink(uint8_t on_off)
{
	if(on_off)
     7ec:	88 23       	and	r24, r24
     7ee:	29 f0       	breq	.+10     	; 0x7fa <lcd1602_cursor_blink+0xe>
		lcd1602_send_byte(0b1111,LCD_COMMAND);	//blink on
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	8f e0       	ldi	r24, 0x0F	; 15
     7f4:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     7f8:	08 95       	ret
	else
		lcd1602_send_byte(0b1100,LCD_COMMAND);	//blink off
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	8c e0       	ldi	r24, 0x0C	; 12
     7fe:	0e 94 44 03 	call	0x688	; 0x688 <lcd1602_send_byte>
     802:	08 95       	ret

00000804 <period_paljenja>:
    }
}


uint8_t period_paljenja(Time_date *On_time, Time_date *Off_time, Time_date *CurrentTime)
{
     804:	fa 01       	movw	r30, r20
	static uint16_t vreme_trenutno;
	
	//char buff[50];
	
	/* prebacim sate i minute u jednu promenljivu */
	vreme_on = (On_time->hr)*100 + On_time->min;
     806:	dc 01       	movw	r26, r24
     808:	12 96       	adiw	r26, 0x02	; 2
     80a:	2c 91       	ld	r18, X
     80c:	12 97       	sbiw	r26, 0x02	; 2
     80e:	54 e6       	ldi	r21, 0x64	; 100
     810:	11 96       	adiw	r26, 0x01	; 1
     812:	8c 91       	ld	r24, X
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	52 9f       	mul	r21, r18
     818:	80 0d       	add	r24, r0
     81a:	91 1d       	adc	r25, r1
     81c:	11 24       	eor	r1, r1
	vreme_off = (Off_time->hr)*100 + Off_time->min;
     81e:	db 01       	movw	r26, r22
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	2c 91       	ld	r18, X
     824:	12 97       	sbiw	r26, 0x02	; 2
     826:	11 96       	adiw	r26, 0x01	; 1
     828:	6c 91       	ld	r22, X
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	52 9f       	mul	r21, r18
     82e:	60 0d       	add	r22, r0
     830:	71 1d       	adc	r23, r1
     832:	11 24       	eor	r1, r1
	vreme_trenutno = (CurrentTime->hr)*100 + CurrentTime->min;
     834:	42 81       	ldd	r20, Z+2	; 0x02
     836:	21 81       	ldd	r18, Z+1	; 0x01
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	54 9f       	mul	r21, r20
     83c:	20 0d       	add	r18, r0
     83e:	31 1d       	adc	r19, r1
     840:	11 24       	eor	r1, r1
	//sprintf(buff, "ON:%d OFF:%d Tr:%d",vreme_on, vreme_off, vreme_trenutno);
	//send_str(buff);
	//send_str("\n"); //novi red
	
	
	if (vreme_on >= vreme_off)  // >= ?? razmotri dodatno SVE granicne slucajeve; edit:provereno, sve u fulu radi
     842:	86 17       	cp	r24, r22
     844:	97 07       	cpc	r25, r23
     846:	68 f0       	brcs	.+26     	; 0x862 <period_paljenja+0x5e>
		//npr. ON=23:20 OFF=05:30
		//postoji prelaz preko 00:00 !UVEK! kada je ON>OFF
		//izlazni signal treba biti HIGH sve vreme (ako je ispunjen uslov da je Period ukljucenosti u toku,
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
     848:	28 17       	cp	r18, r24
     84a:	39 07       	cpc	r19, r25
     84c:	20 f0       	brcs	.+8      	; 0x856 <period_paljenja+0x52>
     84e:	28 33       	cpi	r18, 0x38	; 56
     850:	b9 e0       	ldi	r27, 0x09	; 9
     852:	3b 07       	cpc	r19, r27
     854:	78 f0       	brcs	.+30     	; 0x874 <period_paljenja+0x70>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	26 17       	cp	r18, r22
     85a:	37 07       	cpc	r19, r23
     85c:	70 f0       	brcs	.+28     	; 0x87a <period_paljenja+0x76>
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	08 95       	ret
	else  if(vreme_on < vreme_off)
	{
		//NPR ON=05:30 OFF=13:50
		//!NIKADA! ne postoji prelaz preko 00:00
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno < vreme_off) )
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	40 f0       	brcs	.+16     	; 0x878 <period_paljenja+0x74>
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	26 17       	cp	r18, r22
     86c:	37 07       	cpc	r19, r23
     86e:	28 f0       	brcs	.+10     	; 0x87a <period_paljenja+0x76>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	08 95       	ret
		//gledano naspram trenutnog vremena
		
		if ( (vreme_trenutno >= vreme_on)	&&	  (vreme_trenutno <= 2359) )		    //prvi grancni slucaj za uslov ukljucenja
		{
			//ukljuci
			stanje = 1;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	08 95       	ret
	/* Dovoljno je uzeti u obzir samo sate i minute, sekunde nisu od znacaja */
	/* Da bih olaksao sebi, sate i minute cu spajati u jednu promenljivu, npr. 22:15 se biti 2215 */
	/* Prelazak preko 00:00 je granicni slucaj i desava se jedino kada je vreme ON VECE od vreme OFF */
	/* Izlazni signal (Grejac upaljen) treba da bude uvek HIGH dok period traje */
	
	uint8_t stanje = 0;
     878:	80 e0       	ldi	r24, 0x00	; 0
		stanje = 0;
	}
	
	return stanje;
	
}
     87a:	08 95       	ret

0000087c <displ1_LCD_ispis>:


void displ1_LCD_ispis()
{
	/*izbegao sam celear-ovanje ekrana koje izaziva treperenje dipleja, sa dodavanjem razmaka pre i posle zeljenog ispisa */
	lcd1602_goto_xy(0,0);
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("    ");
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string(bafer);
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("    ");
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_goto_xy(0,1);
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     8a4:	86 e0       	ldi	r24, 0x06	; 6
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	sprintf(bafer, "%02d:%02d--%02d:%02d", vreme_paljenja.hr, vreme_paljenja.min, vreme_gasenja.hr, vreme_gasenja.min);
     8ac:	e7 e3       	ldi	r30, 0x37	; 55
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	81 81       	ldd	r24, Z+1	; 0x01
     8b2:	1f 92       	push	r1
     8b4:	8f 93       	push	r24
     8b6:	82 81       	ldd	r24, Z+2	; 0x02
     8b8:	1f 92       	push	r1
     8ba:	8f 93       	push	r24
     8bc:	e5 e2       	ldi	r30, 0x25	; 37
     8be:	f2 e0       	ldi	r31, 0x02	; 2
     8c0:	81 81       	ldd	r24, Z+1	; 0x01
     8c2:	1f 92       	push	r1
     8c4:	8f 93       	push	r24
     8c6:	82 81       	ldd	r24, Z+2	; 0x02
     8c8:	1f 92       	push	r1
     8ca:	8f 93       	push	r24
     8cc:	89 e0       	ldi	r24, 0x09	; 9
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	9f 93       	push	r25
     8d2:	8f 93       	push	r24
     8d4:	88 e0       	ldi	r24, 0x08	; 8
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
	lcd1602_send_string(bafer);
     8e0:	88 e0       	ldi	r24, 0x08	; 8
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("  ");
     8e8:	86 e0       	ldi	r24, 0x06	; 6
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
}
     8f0:	8d b7       	in	r24, 0x3d	; 61
     8f2:	9e b7       	in	r25, 0x3e	; 62
     8f4:	0c 96       	adiw	r24, 0x0c	; 12
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	9e bf       	out	0x3e, r25	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	8d bf       	out	0x3d, r24	; 61
     900:	08 95       	ret

00000902 <menu1_LCD_ispis>:

void menu1_LCD_ispis(int* pomocna)
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	
	lcd1602_goto_xy(0, 0);
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(">");	//fiksno, a djiram text za menije vertikalno
     910:	86 e2       	ldi	r24, 0x26	; 38
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(" ");	//prazno polje ispod ">"
     920:	87 e0       	ldi	r24, 0x07	; 7
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>

	lcd1602_goto_xy(1,0);
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(menu1_txt[kursor_vert]);
     930:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     934:	20 e1       	ldi	r18, 0x10	; 16
     936:	82 02       	muls	r24, r18
     938:	c0 01       	movw	r24, r0
     93a:	11 24       	eor	r1, r1
     93c:	81 58       	subi	r24, 0x81	; 129
     93e:	9e 4f       	sbci	r25, 0xFE	; 254
     940:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	if (kursor_vert == KURSOR_JEDNOKRAT)			//jednokrat na prvoj liniji
     944:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     948:	81 11       	cpse	r24, r1
     94a:	15 c0       	rjmp	.+42     	; 0x976 <menu1_LCD_ispis+0x74>
	{
		if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     94c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <jednok_on_off>
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	49 f4       	brne	.+18     	; 0x966 <menu1_LCD_ispis+0x64>
		{
			lcd1602_goto_xy(12,0);
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	8c e0       	ldi	r24, 0x0C	; 12
     958:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     95c:	8e e1       	ldi	r24, 0x1E	; 30
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
     964:	08 c0       	rjmp	.+16     	; 0x976 <menu1_LCD_ispis+0x74>
		}
		else					//ako je off ispisi <OF> pored JEDNOKRATNO
		{
			lcd1602_goto_xy(12,0);
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	8c e0       	ldi	r24, 0x0C	; 12
     96a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     96e:	83 e2       	ldi	r24, 0x23	; 35
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		}
	}
	
	lcd1602_goto_xy(1,1);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	*pomocna = (*pomocna==KURSOR_MENU1_MAX) ? -1 : *pomocna;	//if-else, wrap-around ekran; -1 da bi dole krenuo od nule, tj od pocetka
     97e:	88 81       	ld	r24, Y
     980:	99 81       	ldd	r25, Y+1	; 0x01
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	91 05       	cpc	r25, r1
     986:	11 f4       	brne	.+4      	; 0x98c <menu1_LCD_ispis+0x8a>
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	9f ef       	ldi	r25, 0xFF	; 255
     98c:	99 83       	std	Y+1, r25	; 0x01
     98e:	88 83       	st	Y, r24
	lcd1602_send_string(menu1_txt[*pomocna + 1]);
     990:	82 95       	swap	r24
     992:	92 95       	swap	r25
     994:	90 7f       	andi	r25, 0xF0	; 240
     996:	98 27       	eor	r25, r24
     998:	80 7f       	andi	r24, 0xF0	; 240
     99a:	98 27       	eor	r25, r24
     99c:	81 57       	subi	r24, 0x71	; 113
     99e:	9e 4f       	sbci	r25, 0xFE	; 254
     9a0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	if ( (*pomocna+1) == KURSOR_JEDNOKRAT)			//jednokrat na drugoj liniji, sa wrap-around-om
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	a9 f4       	brne	.+42     	; 0x9d6 <menu1_LCD_ispis+0xd4>
	{
		if (jednok_on_off == 1)					//ako je on ispisi <ON> pored JEDNOKRATNO
     9ac:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <jednok_on_off>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	49 f4       	brne	.+18     	; 0x9c6 <menu1_LCD_ispis+0xc4>
		{
			lcd1602_goto_xy(12,1);
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	8c e0       	ldi	r24, 0x0C	; 12
     9b8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
			lcd1602_send_string("<ON>");
     9bc:	8e e1       	ldi	r24, 0x1E	; 30
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
     9c4:	08 c0       	rjmp	.+16     	; 0x9d6 <menu1_LCD_ispis+0xd4>
		}
		else					//ako je off ispisi <OF> pored JEDNOKRATNO
		{
			lcd1602_goto_xy(12,1);
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	8c e0       	ldi	r24, 0x0C	; 12
     9ca:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
			lcd1602_send_string("<OF>");
     9ce:	83 e2       	ldi	r24, 0x23	; 35
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
		}
	}
	
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <podSat_LCD_ispis>:

void podSat_LCD_ispis()
{
	lcd1602_goto_xy(0,0);
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("PODESAVANJE SATA");
     9e4:	88 e2       	ldi	r24, 0x28	; 40
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_goto_xy(0,1);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("    ");
     9f4:	84 e0       	ldi	r24, 0x04	; 4
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string(bafer);
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("    ");
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     a12:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
     a1c:	08 95       	ret

00000a1e <podOnOff_LCD_ispis>:
}

void podOnOff_LCD_ispis()
{
	
	sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     a1e:	ec e1       	ldi	r30, 0x1C	; 28
     a20:	f2 e0       	ldi	r31, 0x02	; 2
     a22:	81 81       	ldd	r24, Z+1	; 0x01
     a24:	1f 92       	push	r1
     a26:	8f 93       	push	r24
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	1f 92       	push	r1
     a2c:	8f 93       	push	r24
     a2e:	ee e2       	ldi	r30, 0x2E	; 46
     a30:	f2 e0       	ldi	r31, 0x02	; 2
     a32:	81 81       	ldd	r24, Z+1	; 0x01
     a34:	1f 92       	push	r1
     a36:	8f 93       	push	r24
     a38:	82 81       	ldd	r24, Z+2	; 0x02
     a3a:	1f 92       	push	r1
     a3c:	8f 93       	push	r24
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	9f 93       	push	r25
     a44:	8f 93       	push	r24
     a46:	88 e0       	ldi	r24, 0x08	; 8
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
	
	lcd1602_goto_xy(0,0);
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("  UPALI--UGASI  ");
     a5a:	89 e3       	ldi	r24, 0x39	; 57
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     a6a:	86 e0       	ldi	r24, 0x06	; 6
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string(bafer);
     a72:	88 e0       	ldi	r24, 0x08	; 8
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("  ");
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     a88:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
}
     a92:	8d b7       	in	r24, 0x3d	; 61
     a94:	9e b7       	in	r25, 0x3e	; 62
     a96:	0c 96       	adiw	r24, 0x0c	; 12
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	9e bf       	out	0x3e, r25	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	8d bf       	out	0x3d, r24	; 61
     aa2:	08 95       	ret

00000aa4 <jednokrat_LCD_ispis>:

void jednokrat_LCD_ispis()
{
	
	sprintf(bafer, "%02d:%02d--%02d:%02d", snap_vreme_paljenja.hr, snap_vreme_paljenja.min, snap_vreme_gasenja.hr, snap_vreme_gasenja.min);
     aa4:	ec e1       	ldi	r30, 0x1C	; 28
     aa6:	f2 e0       	ldi	r31, 0x02	; 2
     aa8:	81 81       	ldd	r24, Z+1	; 0x01
     aaa:	1f 92       	push	r1
     aac:	8f 93       	push	r24
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	1f 92       	push	r1
     ab2:	8f 93       	push	r24
     ab4:	ee e2       	ldi	r30, 0x2E	; 46
     ab6:	f2 e0       	ldi	r31, 0x02	; 2
     ab8:	81 81       	ldd	r24, Z+1	; 0x01
     aba:	1f 92       	push	r1
     abc:	8f 93       	push	r24
     abe:	82 81       	ldd	r24, Z+2	; 0x02
     ac0:	1f 92       	push	r1
     ac2:	8f 93       	push	r24
     ac4:	89 e0       	ldi	r24, 0x09	; 9
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
	
	lcd1602_goto_xy(0,0);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("  JEDNOKRATNO:  ");
     ae0:	8a e4       	ldi	r24, 0x4A	; 74
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_goto_xy(0,1);
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string("  ");
     af0:	86 e0       	ldi	r24, 0x06	; 6
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string(bafer);
     af8:	88 e0       	ldi	r24, 0x08	; 8
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("  ");
     b00:	86 e0       	ldi	r24, 0x06	; 6
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_goto_xy(kursor_horiz,1);
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     b0e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_cursor_blink(1);
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
}
     b18:	8d b7       	in	r24, 0x3d	; 61
     b1a:	9e b7       	in	r25, 0x3e	; 62
     b1c:	0c 96       	adiw	r24, 0x0c	; 12
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	9e bf       	out	0x3e, r25	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	8d bf       	out	0x3d, r24	; 61
     b28:	08 95       	ret

00000b2a <brojilo_LCD_ispis>:

void brojilo_LCD_ispis()
{
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
	//lcd1602_clear(); izbrgavam, zbog treperenja, na praznim mestima stampam razmake
	
	sprintf(bafer, "%5dV", napon);
     b2e:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
     b32:	8f 93       	push	r24
     b34:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
     b38:	8f 93       	push	r24
     b3a:	8b e5       	ldi	r24, 0x5B	; 91
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	9f 93       	push	r25
     b40:	8f 93       	push	r24
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	9f 93       	push	r25
     b48:	8f 93       	push	r24
     b4a:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
	lcd1602_goto_xy(0,0);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_send_string("   ");
     b5e:	85 e0       	ldi	r24, 0x05	; 5
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	dtostrf(snaga, 4, 2, bafer);
     b66:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
     b6a:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
     b6e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
     b72:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
     b76:	08 e0       	ldi	r16, 0x08	; 8
     b78:	12 e0       	ldi	r17, 0x02	; 2
     b7a:	22 e0       	ldi	r18, 0x02	; 2
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	44 e0       	ldi	r20, 0x04	; 4
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	0e 94 91 10 	call	0x2122	; 0x2122 <dtostrf>
	lcd1602_goto_xy(9,0);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	89 e0       	ldi	r24, 0x09	; 9
     b8a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     b8e:	c8 01       	movw	r24, r16
     b90:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("kW ");	  //+ razmak da popuni ekran
     b94:	80 e6       	ldi	r24, 0x60	; 96
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	dtostrf(struja, 5, 1, bafer);
     b9c:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
     ba0:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
     ba4:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
     ba8:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	45 e0       	ldi	r20, 0x05	; 5
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	0e 94 91 10 	call	0x2122	; 0x2122 <dtostrf>
	lcd1602_goto_xy(0,1);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     bc0:	c8 01       	movw	r24, r16
     bc2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("A");
     bc6:	87 e3       	ldi	r24, 0x37	; 55
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	lcd1602_send_string("   ");
     bce:	85 e0       	ldi	r24, 0x05	; 5
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	
	dtostrf(energija, 5, 2, bafer);
     bd6:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
     bda:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
     bde:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
     be2:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
     be6:	22 e0       	ldi	r18, 0x02	; 2
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	45 e0       	ldi	r20, 0x05	; 5
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	0e 94 91 10 	call	0x2122	; 0x2122 <dtostrf>
	lcd1602_goto_xy(8,1);
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
	lcd1602_send_string(bafer);
     bfa:	c8 01       	movw	r24, r16
     bfc:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
	lcd1602_send_string("kWh");
     c00:	84 e6       	ldi	r24, 0x64	; 100
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <lcd1602_send_string>
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <fsm_lcd_menu>:
	return stanje;
	
}

void fsm_lcd_menu()
{
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	00 d0       	rcall	.+0      	; 0xc24 <fsm_lcd_menu+0xa>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	int pom;
	
	switch(STATE)
     c28:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <STATE>
     c2c:	8e 2f       	mov	r24, r30
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	87 30       	cpi	r24, 0x07	; 7
     c32:	91 05       	cpc	r25, r1
     c34:	08 f0       	brcs	.+2      	; 0xc38 <fsm_lcd_menu+0x1e>
     c36:	60 c4       	rjmp	.+2240   	; 0x14f8 <fsm_lcd_menu+0x8de>
     c38:	fc 01       	movw	r30, r24
     c3a:	ec 5c       	subi	r30, 0xCC	; 204
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__tablejump2__>
		
		case DISPL1:
				/* prvi, tj. glavni meni sa ispisom tren. vremena i vremena on/off */
				/* ispis vremena svaki sekund dok je u ovom CASE-u */
				
				if ( displ_flag_shot )	//samo prvi put kad se uleti
     c42:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c46:	88 23       	and	r24, r24
     c48:	31 f0       	breq	.+12     	; 0xc56 <fsm_lcd_menu+0x3c>
				{
					displ_flag_shot = 0; //resetujem flag, i zabranim ponovni ulazak
     c4a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     c4e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <timer_disp_cycle+0x1>
     c52:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <timer_disp_cycle>
				}
				
				if (timer_disp_cycle > 7000)	//7 sekundi
     c56:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer_disp_cycle>
     c5a:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer_disp_cycle+0x1>
     c5e:	89 35       	cpi	r24, 0x59	; 89
     c60:	9b 41       	sbci	r25, 0x1B	; 27
     c62:	28 f0       	brcs	.+10     	; 0xc6e <fsm_lcd_menu+0x54>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL2;
     c6a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
				}
						
				if(flag_pc_int)		//pc int usled signala koji dolazi sa SQW pin sa RTC modula; 1 sekund
     c6e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <flag_pc_int>
     c72:	88 23       	and	r24, r24
     c74:	49 f1       	breq	.+82     	; 0xcc8 <fsm_lcd_menu+0xae>
				{
					flag_pc_int = 0; //resetujem flag koji je u ISR
     c76:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <flag_pc_int>
			
					getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	28 e4       	ldi	r18, 0x48	; 72
     c7e:	32 e0       	ldi	r19, 0x02	; 2
     c80:	40 e4       	ldi	r20, 0x40	; 64
     c82:	52 e0       	ldi	r21, 0x02	; 2
     c84:	61 e4       	ldi	r22, 0x41	; 65
     c86:	72 e0       	ldi	r23, 0x02	; 2
     c88:	82 e4       	ldi	r24, 0x42	; 66
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <getTime>
					sprintf(bafer, "%02d:%02d:%02d", vreme_datum.hr, vreme_datum.min, vreme_datum.s);
     c90:	e0 e4       	ldi	r30, 0x40	; 64
     c92:	f2 e0       	ldi	r31, 0x02	; 2
     c94:	80 81       	ld	r24, Z
     c96:	1f 92       	push	r1
     c98:	8f 93       	push	r24
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	1f 92       	push	r1
     c9e:	8f 93       	push	r24
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	1f 92       	push	r1
     ca4:	8f 93       	push	r24
     ca6:	88 e6       	ldi	r24, 0x68	; 104
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	88 e0       	ldi	r24, 0x08	; 8
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
				
					displ1_LCD_ispis();			//ispis karaktera na LCD
     cba:	0e 94 3e 04 	call	0x87c	; 0x87c <displ1_LCD_ispis>
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
			
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     cc8:	65 e0       	ldi	r22, 0x05	; 5
     cca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     cce:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <fsm_lcd_menu+0xbe>
     cd6:	10 c4       	rjmp	.+2080   	; 0x14f8 <fsm_lcd_menu+0x8de>
				{
					displ_flag_shot = 1;	//opet dozvolim, pri izlazku iz ovog stejta
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     ce4:	09 c4       	rjmp	.+2066   	; 0x14f8 <fsm_lcd_menu+0x8de>
		break;
		
		case DISPL2:
				//ispisuje napon, struju, snagu... Smenjuje se periodicno sa DISPL1, uz pomoc tajmera
				
				if(displ_flag_shot)	//startujem tajmer samo prvi put za ciklicno menjanje DIPL1 i DISPL2
     ce6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cea:	88 23       	and	r24, r24
     cec:	31 f0       	breq	.+12     	; 0xcfa <fsm_lcd_menu+0xe0>
				{
					displ_flag_shot = 0; //resetujem flag
     cee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
					timer_disp_cycle = 0;	//start tajmera
     cf2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <timer_disp_cycle+0x1>
     cf6:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <timer_disp_cycle>
				}
				
				if (timer_disp_cycle > 4000)	//4 sekunde istekle, menjaj meni
     cfa:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer_disp_cycle>
     cfe:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer_disp_cycle+0x1>
     d02:	81 3a       	cpi	r24, 0xA1	; 161
     d04:	9f 40       	sbci	r25, 0x0F	; 15
     d06:	28 f0       	brcs	.+10     	; 0xd12 <fsm_lcd_menu+0xf8>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = DISPL1;
     d0e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <STATE>
				}
				
				if ( flag_prekid_100ms_VAkWh )	//Ispisujem napon, struju snagu, sa periodom 100ms, da nije zamrznut ispis vec da se vide promene
     d12:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <flag_prekid_100ms_VAkWh>
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <fsm_lcd_menu+0x108>
				{
					
					flag_prekid_100ms_VAkWh = 0; //reset flaga
     d1a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <flag_prekid_100ms_VAkWh>
					
					brojilo_LCD_ispis();			//ispis karaktera na LCD
     d1e:	0e 94 95 05 	call	0xb2a	; 0xb2a <brojilo_LCD_ispis>
					
				}
				
				if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )	//taster enter stisnut
     d22:	65 e0       	ldi	r22, 0x05	; 5
     d24:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d28:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <fsm_lcd_menu+0x118>
     d30:	e3 c3       	rjmp	.+1990   	; 0x14f8 <fsm_lcd_menu+0x8de>
				{
					displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					STATE = MENU1;
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     d3e:	dc c3       	rjmp	.+1976   	; 0x14f8 <fsm_lcd_menu+0x8de>
		break;
		
		case MENU1:
					//lcd1602_clear();
					
					pom = kursor_vert;
     d40:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     d44:	08 2e       	mov	r0, r24
     d46:	00 0c       	add	r0, r0
     d48:	99 0b       	sbc	r25, r25
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
					
					menu1_LCD_ispis(&pom);			//ispis karaktera na LCD
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 81 04 	call	0x902	; 0x902 <menu1_LCD_ispis>
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
     d56:	63 e0       	ldi	r22, 0x03	; 3
     d58:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d5c:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     d60:	88 23       	and	r24, r24
     d62:	59 f0       	breq	.+22     	; 0xd7a <fsm_lcd_menu+0x160>
					{
						kursor_vert++;
     d64:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     d68:	8f 5f       	subi	r24, 0xFF	; 255
						if(kursor_vert > KURSOR_MENU1_MAX)
     d6a:	84 30       	cpi	r24, 0x04	; 4
     d6c:	1c f4       	brge	.+6      	; 0xd74 <fsm_lcd_menu+0x15a>
					
					menu1_LCD_ispis(&pom);			//ispis karaktera na LCD
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )		//djira kursor vertikalno ka dole
					{
						kursor_vert++;
     d6e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <kursor_vert>
     d72:	c2 c3       	rjmp	.+1924   	; 0x14f8 <fsm_lcd_menu+0x8de>
						if(kursor_vert > KURSOR_MENU1_MAX)
						kursor_vert = 0;
     d74:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <kursor_vert>
     d78:	bf c3       	rjmp	.+1918   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
     d7a:	62 e0       	ldi	r22, 0x02	; 2
     d7c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     d80:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     d84:	88 23       	and	r24, r24
     d86:	59 f0       	breq	.+22     	; 0xd9e <fsm_lcd_menu+0x184>
					{
						kursor_vert--;
     d88:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     d8c:	81 50       	subi	r24, 0x01	; 1
						if(kursor_vert < 0)		//min je 0, logicno
     d8e:	1a f0       	brmi	.+6      	; 0xd96 <fsm_lcd_menu+0x17c>
						if(kursor_vert > KURSOR_MENU1_MAX)
						kursor_vert = 0;
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )	//djira kursor vertikalno ka gore
					{
						kursor_vert--;
     d90:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <kursor_vert>
     d94:	b1 c3       	rjmp	.+1890   	; 0x14f8 <fsm_lcd_menu+0x8de>
						if(kursor_vert < 0)		//min je 0, logicno
						kursor_vert = KURSOR_MENU1_MAX;
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <kursor_vert>
     d9c:	ad c3       	rjmp	.+1882   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if(kursor_vert == KURSOR_PODSAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     d9e:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	59 f4       	brne	.+22     	; 0xdbc <fsm_lcd_menu+0x1a2>
     da6:	65 e0       	ldi	r22, 0x05	; 5
     da8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     dac:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     db0:	88 23       	and	r24, r24
     db2:	21 f0       	breq	.+8      	; 0xdbc <fsm_lcd_menu+0x1a2>
						STATE = POD_SAT;	//meni za podesavanje sata
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     dba:	9e c3       	rjmp	.+1852   	; 0x14f8 <fsm_lcd_menu+0x8de>
					else if(kursor_vert == KURSOR_PODONOF && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     dbc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	59 f4       	brne	.+22     	; 0xdda <fsm_lcd_menu+0x1c0>
     dc4:	65 e0       	ldi	r22, 0x05	; 5
     dc6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     dca:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     dce:	88 23       	and	r24, r24
     dd0:	21 f0       	breq	.+8      	; 0xdda <fsm_lcd_menu+0x1c0>
						STATE = POD_ON_OFF;	//sub_meni za podesavanje on ili off vremena
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     dd8:	8f c3       	rjmp	.+1822   	; 0x14f8 <fsm_lcd_menu+0x8de>
					else if(kursor_vert == KURSOR_JEDNOKRAT && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     dda:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     dde:	81 11       	cpse	r24, r1
     de0:	25 c0       	rjmp	.+74     	; 0xe2c <fsm_lcd_menu+0x212>
     de2:	65 e0       	ldi	r22, 0x05	; 5
     de4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     de8:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     dec:	88 23       	and	r24, r24
     dee:	21 f0       	breq	.+8      	; 0xdf8 <fsm_lcd_menu+0x1de>
						STATE = JEDNOKRATNO;	//sub_meni za podesavanje on ili off vremena jednokratno
     df0:	85 e0       	ldi	r24, 0x05	; 5
     df2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     df6:	80 c3       	rjmp	.+1792   	; 0x14f8 <fsm_lcd_menu+0x8de>
					else if( kursor_vert == KURSOR_JEDNOKRAT && ( ocitaj_jedan_taster(tasteri, TASTER_LEVO) ||  ocitaj_jedan_taster(tasteri, TASTER_DESNO) ) ) //levo ili desno kad je na JEDNOKRATNO da togluje on/of
     df8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     dfc:	81 11       	cpse	r24, r1
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <fsm_lcd_menu+0x212>
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e06:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     e0a:	81 11       	cpse	r24, r1
     e0c:	07 c0       	rjmp	.+14     	; 0xe1c <fsm_lcd_menu+0x202>
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e14:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     e18:	88 23       	and	r24, r24
     e1a:	41 f0       	breq	.+16     	; 0xe2c <fsm_lcd_menu+0x212>
						jednok_on_off = !jednok_on_off;	//toggle
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <jednok_on_off>
     e22:	91 11       	cpse	r25, r1
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <jednok_on_off>
     e2a:	66 c3       	rjmp	.+1740   	; 0x14f8 <fsm_lcd_menu+0x8de>
					else if ( kursor_vert == KURSOR_BROJILO && ocitaj_jedan_taster(tasteri, TASTER_ENTER))
     e2c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <kursor_vert>
     e30:	83 30       	cpi	r24, 0x03	; 3
     e32:	59 f4       	brne	.+22     	; 0xe4a <fsm_lcd_menu+0x230>
     e34:	65 e0       	ldi	r22, 0x05	; 5
     e36:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e3a:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     e3e:	88 23       	and	r24, r24
     e40:	21 f0       	breq	.+8      	; 0xe4a <fsm_lcd_menu+0x230>
						STATE = BROJILO; //sub meni za prikaz merenja trenutnog napona, struje, snage...
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
     e48:	57 c3       	rjmp	.+1710   	; 0x14f8 <fsm_lcd_menu+0x8de>
					
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )				//taster nazad stisnut
     e4a:	64 e0       	ldi	r22, 0x04	; 4
     e4c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     e50:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     e54:	88 23       	and	r24, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <fsm_lcd_menu+0x240>
     e58:	4f c3       	rjmp	.+1694   	; 0x14f8 <fsm_lcd_menu+0x8de>
					{
						kursor_vert = 0;			//resetujem kursor jer ostane memorisan
     e5a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <kursor_vert>
						STATE = DISPL1;		//vraca se na prethodni meni, tj. glavni meni
     e5e:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <STATE>
     e62:	4a c3       	rjmp	.+1684   	; 0x14f8 <fsm_lcd_menu+0x8de>
		break;
		
		case POD_SAT:
		
					/* da ocita trenutno vreme samo prvi puta kada upadne u ovaj case	*/
					if (displ_flag_shot)
     e64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e68:	88 23       	and	r24, r24
     e6a:	51 f1       	breq	.+84     	; 0xec0 <fsm_lcd_menu+0x2a6>
					{
						displ_flag_shot = 0;
     e6c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						snap_shot_vremena = vreme_datum;
     e70:	89 e0       	ldi	r24, 0x09	; 9
     e72:	e0 e4       	ldi	r30, 0x40	; 64
     e74:	f2 e0       	ldi	r31, 0x02	; 2
     e76:	af ef       	ldi	r26, 0xFF	; 255
     e78:	b1 e0       	ldi	r27, 0x01	; 1
     e7a:	01 90       	ld	r0, Z+
     e7c:	0d 92       	st	X+, r0
     e7e:	8a 95       	dec	r24
     e80:	e1 f7       	brne	.-8      	; 0xe7a <fsm_lcd_menu+0x260>
						sprintf(bafer, "%02d:%02d:%02d", snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s);
     e82:	ef ef       	ldi	r30, 0xFF	; 255
     e84:	f1 e0       	ldi	r31, 0x01	; 1
     e86:	80 81       	ld	r24, Z
     e88:	1f 92       	push	r1
     e8a:	8f 93       	push	r24
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	1f 92       	push	r1
     e90:	8f 93       	push	r24
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	1f 92       	push	r1
     e96:	8f 93       	push	r24
     e98:	88 e6       	ldi	r24, 0x68	; 104
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	9f 93       	push	r25
     e9e:	8f 93       	push	r24
     ea0:	88 e0       	ldi	r24, 0x08	; 8
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	9f 93       	push	r25
     ea6:	8f 93       	push	r24
     ea8:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
			
						kursor_horiz = 5; //na 5 je hh, na 8 je mm a na 11 je ss
     eac:	85 e0       	ldi	r24, 0x05	; 5
     eae:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						podSat_LCD_ispis();			//ispis karaktera na LCD
     eb2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <podSat_LCD_ispis>
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
						
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     ec6:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     eca:	88 23       	and	r24, r24
     ecc:	89 f0       	breq	.+34     	; 0xef0 <fsm_lcd_menu+0x2d6>
					{
						kursor_horiz += 3;
     ece:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     ed2:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 11)
     ed4:	8c 30       	cpi	r24, 0x0C	; 12
     ed6:	1c f4       	brge	.+6      	; 0xede <fsm_lcd_menu+0x2c4>
						
					}
		
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
     ed8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <fsm_lcd_menu+0x2ca>
						if(kursor_horiz > 11)
							kursor_horiz = 11;
     ede:	8b e0       	ldi	r24, 0x0B	; 11
     ee0:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						lcd1602_goto_xy(kursor_horiz,1);
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     eea:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     eee:	04 c3       	rjmp	.+1544   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     ef6:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     efa:	88 23       	and	r24, r24
     efc:	89 f0       	breq	.+34     	; 0xf20 <fsm_lcd_menu+0x306>
					{
						kursor_horiz -= 3;
     efe:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f02:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 5)
     f04:	85 30       	cpi	r24, 0x05	; 5
     f06:	1c f0       	brlt	.+6      	; 0xf0e <fsm_lcd_menu+0x2f4>
							kursor_horiz = 11;
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
     f08:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <fsm_lcd_menu+0x2fa>
						if(kursor_horiz < 5)
							kursor_horiz = 5;
     f0e:	85 e0       	ldi	r24, 0x05	; 5
     f10:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						lcd1602_goto_xy(kursor_horiz,1);
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f1a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
     f1e:	ec c2       	rjmp	.+1496   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
     f20:	62 e0       	ldi	r22, 0x02	; 2
     f22:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f26:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     f2a:	88 23       	and	r24, r24
     f2c:	39 f1       	breq	.+78     	; 0xf7c <fsm_lcd_menu+0x362>
					{
						if (kursor_horiz == 5)												//podesava SATE ++
     f2e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f32:	85 30       	cpi	r24, 0x05	; 5
     f34:	51 f4       	brne	.+20     	; 0xf4a <fsm_lcd_menu+0x330>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor_horiz, UVECAJ);
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	46 ed       	ldi	r20, 0xD6	; 214
     f3a:	51 e0       	ldi	r21, 0x01	; 1
     f3c:	68 e0       	ldi	r22, 0x08	; 8
     f3e:	72 e0       	ldi	r23, 0x02	; 2
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
     f48:	d7 c2       	rjmp	.+1454   	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 8)											//podesava MINUTE ++
     f4a:	88 30       	cpi	r24, 0x08	; 8
     f4c:	51 f4       	brne	.+20     	; 0xf62 <fsm_lcd_menu+0x348>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor_horiz, UVECAJ);
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	46 ed       	ldi	r20, 0xD6	; 214
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	68 e0       	ldi	r22, 0x08	; 8
     f56:	72 e0       	ldi	r23, 0x02	; 2
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
     f60:	cb c2       	rjmp	.+1430   	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 11)											//podesava SEKUNDE ++
     f62:	8b 30       	cpi	r24, 0x0B	; 11
     f64:	09 f0       	breq	.+2      	; 0xf68 <fsm_lcd_menu+0x34e>
     f66:	c8 c2       	rjmp	.+1424   	; 0x14f8 <fsm_lcd_menu+0x8de>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor_horiz, UVECAJ);
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	46 ed       	ldi	r20, 0xD6	; 214
     f6c:	51 e0       	ldi	r21, 0x01	; 1
     f6e:	68 e0       	ldi	r22, 0x08	; 8
     f70:	72 e0       	ldi	r23, 0x02	; 2
     f72:	8f ef       	ldi	r24, 0xFF	; 255
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	0e 94 bd 02 	call	0x57a	; 0x57a <sekundi_ispis>
     f7a:	be c2       	rjmp	.+1404   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
     f7c:	63 e0       	ldi	r22, 0x03	; 3
     f7e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     f82:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     f86:	88 23       	and	r24, r24
     f88:	39 f1       	breq	.+78     	; 0xfd8 <fsm_lcd_menu+0x3be>
					{
						if (kursor_horiz == 5)												//podesava SATE --
     f8a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
     f8e:	85 30       	cpi	r24, 0x05	; 5
     f90:	51 f4       	brne	.+20     	; 0xfa6 <fsm_lcd_menu+0x38c>
							sati_ispis(&snap_shot_vremena.hr, bafer, &kursor_horiz, UMANJI);
     f92:	21 e0       	ldi	r18, 0x01	; 1
     f94:	46 ed       	ldi	r20, 0xD6	; 214
     f96:	51 e0       	ldi	r21, 0x01	; 1
     f98:	68 e0       	ldi	r22, 0x08	; 8
     f9a:	72 e0       	ldi	r23, 0x02	; 2
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
     fa4:	a9 c2       	rjmp	.+1362   	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 8)											//podesava MINUTE --
     fa6:	88 30       	cpi	r24, 0x08	; 8
     fa8:	51 f4       	brne	.+20     	; 0xfbe <fsm_lcd_menu+0x3a4>
							minuti_ispis(&snap_shot_vremena.min, bafer, &kursor_horiz, UMANJI);
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	46 ed       	ldi	r20, 0xD6	; 214
     fae:	51 e0       	ldi	r21, 0x01	; 1
     fb0:	68 e0       	ldi	r22, 0x08	; 8
     fb2:	72 e0       	ldi	r23, 0x02	; 2
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
     fbc:	9d c2       	rjmp	.+1338   	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 11)											//podesava SEKUNDE --
     fbe:	8b 30       	cpi	r24, 0x0B	; 11
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <fsm_lcd_menu+0x3aa>
     fc2:	9a c2       	rjmp	.+1332   	; 0x14f8 <fsm_lcd_menu+0x8de>
							sekundi_ispis(&snap_shot_vremena.s, bafer, &kursor_horiz, UMANJI);
     fc4:	21 e0       	ldi	r18, 0x01	; 1
     fc6:	46 ed       	ldi	r20, 0xD6	; 214
     fc8:	51 e0       	ldi	r21, 0x01	; 1
     fca:	68 e0       	ldi	r22, 0x08	; 8
     fcc:	72 e0       	ldi	r23, 0x02	; 2
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	0e 94 bd 02 	call	0x57a	; 0x57a <sekundi_ispis>
     fd6:	90 c2       	rjmp	.+1312   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//Potvrdi vreme koje vidis na ekranu i promeni vreme; izadji iz menija
     fd8:	65 e0       	ldi	r22, 0x05	; 5
     fda:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
     fde:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
     fe2:	88 23       	and	r24, r24
     fe4:	a9 f0       	breq	.+42     	; 0x1010 <fsm_lcd_menu+0x3f6>
					{
						/* vreme se upise tek kad se izleti iz ovog menija, tj. ono vreme koje stoji na ekranu ce biti upisano */
						setTime(snap_shot_vremena.hr, snap_shot_vremena.min, snap_shot_vremena.s, am, _24_hour_format);
     fe6:	ef ef       	ldi	r30, 0xFF	; 255
     fe8:	f1 e0       	ldi	r31, 0x01	; 1
     fea:	00 e0       	ldi	r16, 0x00	; 0
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	40 81       	ld	r20, Z
     ff0:	61 81       	ldd	r22, Z+1	; 0x01
     ff2:	82 81       	ldd	r24, Z+2	; 0x02
     ff4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <setTime>
						displ_flag_shot = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
     ffe:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    100e:	74 c2       	rjmp	.+1256   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    1010:	64 e0       	ldi	r22, 0x04	; 4
    1012:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1016:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    101a:	88 23       	and	r24, r24
    101c:	09 f4       	brne	.+2      	; 0x1020 <fsm_lcd_menu+0x406>
    101e:	6c c2       	rjmp	.+1240   	; 0x14f8 <fsm_lcd_menu+0x8de>
					{
						/* Vreme setujem samo ako je stisnut ENTER, ako je stisnuto NAZAD, vreme se ne dira, tj. ovde se ne dira */
								//setTime(sanp_shot_vremena.hr, sanp_shot_vremena.min, sanp_shot_vremena.s, am, _24_hour_format);
						displ_flag_shot = 1;	    //dozvolim ponovno citanje tr vremena kada se udje u ovaj case
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    1026:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    1036:	60 c2       	rjmp	.+1216   	; 0x14f8 <fsm_lcd_menu+0x8de>
		break;
		
		case POD_ON_OFF:																				
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (displ_flag_shot)
    1038:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    103c:	88 23       	and	r24, r24
    103e:	c9 f0       	breq	.+50     	; 0x1072 <fsm_lcd_menu+0x458>
					{
						displ_flag_shot = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    1040:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = vreme_paljenja;	
    1044:	89 e0       	ldi	r24, 0x09	; 9
    1046:	e5 e2       	ldi	r30, 0x25	; 37
    1048:	f2 e0       	ldi	r31, 0x02	; 2
    104a:	ae e2       	ldi	r26, 0x2E	; 46
    104c:	b2 e0       	ldi	r27, 0x02	; 2
    104e:	01 90       	ld	r0, Z+
    1050:	0d 92       	st	X+, r0
    1052:	8a 95       	dec	r24
    1054:	e1 f7       	brne	.-8      	; 0x104e <fsm_lcd_menu+0x434>
						snap_vreme_gasenja = vreme_gasenja;
    1056:	89 e0       	ldi	r24, 0x09	; 9
    1058:	e7 e3       	ldi	r30, 0x37	; 55
    105a:	f2 e0       	ldi	r31, 0x02	; 2
    105c:	ac e1       	ldi	r26, 0x1C	; 28
    105e:	b2 e0       	ldi	r27, 0x02	; 2
    1060:	01 90       	ld	r0, Z+
    1062:	0d 92       	st	X+, r0
    1064:	8a 95       	dec	r24
    1066:	e1 f7       	brne	.-8      	; 0x1060 <fsm_lcd_menu+0x446>
						
						kursor_horiz = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
    106e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <podOnOff_LCD_ispis>
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1078:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    107c:	88 23       	and	r24, r24
    107e:	c9 f0       	breq	.+50     	; 0x10b2 <fsm_lcd_menu+0x498>
					{
						kursor_horiz += 3;
    1080:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    1084:	9c ef       	ldi	r25, 0xFC	; 252
    1086:	98 0f       	add	r25, r24
    1088:	93 30       	cpi	r25, 0x03	; 3
    108a:	20 f4       	brcc	.+8      	; 0x1094 <fsm_lcd_menu+0x47a>
							kursor_horiz = 10;
    108c:	8a e0       	ldi	r24, 0x0A	; 10
    108e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <fsm_lcd_menu+0x48c>
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    1094:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 10;
						else if (kursor_horiz > 13)
    1096:	8e 30       	cpi	r24, 0x0E	; 14
    1098:	1c f4       	brge	.+6      	; 0x10a0 <fsm_lcd_menu+0x486>
						podOnOff_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    109a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    109e:	03 c0       	rjmp	.+6      	; 0x10a6 <fsm_lcd_menu+0x48c>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 10;
						else if (kursor_horiz > 13)
							kursor_horiz = 13;
    10a0:	8d e0       	ldi	r24, 0x0D	; 13
    10a2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
							
						lcd1602_goto_xy(kursor_horiz,1);
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    10ac:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
    10b0:	23 c2       	rjmp	.+1094   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    10b8:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    10bc:	88 23       	and	r24, r24
    10be:	c9 f0       	breq	.+50     	; 0x10f2 <fsm_lcd_menu+0x4d8>
					{
						kursor_horiz -= 3;
    10c0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    10c4:	96 ef       	ldi	r25, 0xF6	; 246
    10c6:	98 0f       	add	r25, r24
    10c8:	93 30       	cpi	r25, 0x03	; 3
    10ca:	20 f4       	brcc	.+8      	; 0x10d4 <fsm_lcd_menu+0x4ba>
							kursor_horiz = 6;
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <fsm_lcd_menu+0x4cc>
							
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    10d4:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 6;
						else if(kursor_horiz < 3)
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	1c f0       	brlt	.+6      	; 0x10e0 <fsm_lcd_menu+0x4c6>
							
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    10da:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <fsm_lcd_menu+0x4cc>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
							kursor_horiz = 6;
						else if(kursor_horiz < 3)
							kursor_horiz = 3;
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
							
						lcd1602_goto_xy(kursor_horiz,1);
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    10ec:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
    10f0:	03 c2       	rjmp	.+1030   	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    10f8:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    10fc:	88 23       	and	r24, r24
    10fe:	99 f1       	breq	.+102    	; 0x1166 <fsm_lcd_menu+0x54c>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON ++
    1100:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	51 f4       	brne	.+20     	; 0x111c <fsm_lcd_menu+0x502>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UVECAJ);
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	46 ed       	ldi	r20, 0xD6	; 214
    110c:	51 e0       	ldi	r21, 0x01	; 1
    110e:	68 e0       	ldi	r22, 0x08	; 8
    1110:	72 e0       	ldi	r23, 0x02	; 2
    1112:	80 e3       	ldi	r24, 0x30	; 48
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    111a:	ee c1       	rjmp	.+988    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON ++
    111c:	86 30       	cpi	r24, 0x06	; 6
    111e:	51 f4       	brne	.+20     	; 0x1134 <fsm_lcd_menu+0x51a>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UVECAJ);
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	46 ed       	ldi	r20, 0xD6	; 214
    1124:	51 e0       	ldi	r21, 0x01	; 1
    1126:	68 e0       	ldi	r22, 0x08	; 8
    1128:	72 e0       	ldi	r23, 0x02	; 2
    112a:	8f e2       	ldi	r24, 0x2F	; 47
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1132:	e2 c1       	rjmp	.+964    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 10)											//podesava SATE_OFF ++
    1134:	8a 30       	cpi	r24, 0x0A	; 10
    1136:	51 f4       	brne	.+20     	; 0x114c <fsm_lcd_menu+0x532>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UVECAJ);
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	46 ed       	ldi	r20, 0xD6	; 214
    113c:	51 e0       	ldi	r21, 0x01	; 1
    113e:	68 e0       	ldi	r22, 0x08	; 8
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	8e e1       	ldi	r24, 0x1E	; 30
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    114a:	d6 c1       	rjmp	.+940    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF ++
    114c:	8d 30       	cpi	r24, 0x0D	; 13
    114e:	09 f0       	breq	.+2      	; 0x1152 <fsm_lcd_menu+0x538>
    1150:	d3 c1       	rjmp	.+934    	; 0x14f8 <fsm_lcd_menu+0x8de>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UVECAJ);
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	46 ed       	ldi	r20, 0xD6	; 214
    1156:	51 e0       	ldi	r21, 0x01	; 1
    1158:	68 e0       	ldi	r22, 0x08	; 8
    115a:	72 e0       	ldi	r23, 0x02	; 2
    115c:	8d e1       	ldi	r24, 0x1D	; 29
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1164:	c9 c1       	rjmp	.+914    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    1166:	63 e0       	ldi	r22, 0x03	; 3
    1168:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    116c:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    1170:	88 23       	and	r24, r24
    1172:	99 f1       	breq	.+102    	; 0x11da <fsm_lcd_menu+0x5c0>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON --
    1174:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	51 f4       	brne	.+20     	; 0x1190 <fsm_lcd_menu+0x576>
							sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UMANJI);
    117c:	21 e0       	ldi	r18, 0x01	; 1
    117e:	46 ed       	ldi	r20, 0xD6	; 214
    1180:	51 e0       	ldi	r21, 0x01	; 1
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	72 e0       	ldi	r23, 0x02	; 2
    1186:	80 e3       	ldi	r24, 0x30	; 48
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    118e:	b4 c1       	rjmp	.+872    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON --
    1190:	86 30       	cpi	r24, 0x06	; 6
    1192:	51 f4       	brne	.+20     	; 0x11a8 <fsm_lcd_menu+0x58e>
							minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UMANJI);
    1194:	21 e0       	ldi	r18, 0x01	; 1
    1196:	46 ed       	ldi	r20, 0xD6	; 214
    1198:	51 e0       	ldi	r21, 0x01	; 1
    119a:	68 e0       	ldi	r22, 0x08	; 8
    119c:	72 e0       	ldi	r23, 0x02	; 2
    119e:	8f e2       	ldi	r24, 0x2F	; 47
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    11a6:	a8 c1       	rjmp	.+848    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 10)											//podesava SATE_OFF --
    11a8:	8a 30       	cpi	r24, 0x0A	; 10
    11aa:	51 f4       	brne	.+20     	; 0x11c0 <fsm_lcd_menu+0x5a6>
							sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UMANJI);
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	46 ed       	ldi	r20, 0xD6	; 214
    11b0:	51 e0       	ldi	r21, 0x01	; 1
    11b2:	68 e0       	ldi	r22, 0x08	; 8
    11b4:	72 e0       	ldi	r23, 0x02	; 2
    11b6:	8e e1       	ldi	r24, 0x1E	; 30
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    11be:	9c c1       	rjmp	.+824    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF --
    11c0:	8d 30       	cpi	r24, 0x0D	; 13
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <fsm_lcd_menu+0x5ac>
    11c4:	99 c1       	rjmp	.+818    	; 0x14f8 <fsm_lcd_menu+0x8de>
							minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UMANJI);
    11c6:	21 e0       	ldi	r18, 0x01	; 1
    11c8:	46 ed       	ldi	r20, 0xD6	; 214
    11ca:	51 e0       	ldi	r21, 0x01	; 1
    11cc:	68 e0       	ldi	r22, 0x08	; 8
    11ce:	72 e0       	ldi	r23, 0x02	; 2
    11d0:	8d e1       	ldi	r24, 0x1D	; 29
    11d2:	92 e0       	ldi	r25, 0x02	; 2
    11d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    11d8:	8f c1       	rjmp	.+798    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    11e0:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    11e4:	88 23       	and	r24, r24
    11e6:	d1 f1       	breq	.+116    	; 0x125c <fsm_lcd_menu+0x642>
					{
						vreme_paljenja = snap_vreme_paljenja;	//konacno upisem
    11e8:	89 e0       	ldi	r24, 0x09	; 9
    11ea:	ee e2       	ldi	r30, 0x2E	; 46
    11ec:	f2 e0       	ldi	r31, 0x02	; 2
    11ee:	a5 e2       	ldi	r26, 0x25	; 37
    11f0:	b2 e0       	ldi	r27, 0x02	; 2
    11f2:	01 90       	ld	r0, Z+
    11f4:	0d 92       	st	X+, r0
    11f6:	8a 95       	dec	r24
    11f8:	e1 f7       	brne	.-8      	; 0x11f2 <fsm_lcd_menu+0x5d8>
						vreme_gasenja = snap_vreme_gasenja;
    11fa:	89 e0       	ldi	r24, 0x09	; 9
    11fc:	ec e1       	ldi	r30, 0x1C	; 28
    11fe:	f2 e0       	ldi	r31, 0x02	; 2
    1200:	a7 e3       	ldi	r26, 0x37	; 55
    1202:	b2 e0       	ldi	r27, 0x02	; 2
    1204:	01 90       	ld	r0, Z+
    1206:	0d 92       	st	X+, r0
    1208:	8a 95       	dec	r24
    120a:	e1 f7       	brne	.-8      	; 0x1204 <fsm_lcd_menu+0x5ea>
						
						/* upis u eeprom */
						EEPROM_write(UPALI_HR_ADR, vreme_paljenja.hr);
    120c:	05 e2       	ldi	r16, 0x25	; 37
    120e:	12 e0       	ldi	r17, 0x02	; 2
    1210:	f8 01       	movw	r30, r16
    1212:	62 81       	ldd	r22, Z+2	; 0x02
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UPALI_MIN_ADR, vreme_paljenja.min);
    121c:	f8 01       	movw	r30, r16
    121e:	61 81       	ldd	r22, Z+1	; 0x01
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UGASI_HR_ADR, vreme_gasenja.hr);
    1228:	07 e3       	ldi	r16, 0x37	; 55
    122a:	12 e0       	ldi	r17, 0x02	; 2
    122c:	f8 01       	movw	r30, r16
    122e:	62 81       	ldd	r22, Z+2	; 0x02
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(UGASI_MIN_ADR, vreme_gasenja.min);
    1238:	f8 01       	movw	r30, r16
    123a:	61 81       	ldd	r22, Z+1	; 0x01
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    124a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    125a:	4e c1       	rjmp	.+668    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    125c:	64 e0       	ldi	r22, 0x04	; 4
    125e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1262:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <fsm_lcd_menu+0x652>
    126a:	46 c1       	rjmp	.+652    	; 0x14f8 <fsm_lcd_menu+0x8de>
					{
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    1272:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    1282:	3a c1       	rjmp	.+628    	; 0x14f8 <fsm_lcd_menu+0x8de>
		case JEDNOKRATNO:
					//da opali samo jednom, bez obzira na glavni period
					/* prakticno kopija POD-ON-OFF samo se u drugu promenljivu belezi, cak pozajmljujem i iste tmp promenljive */
					/* podesavanje perioda paljenja i gasenja */
					/* da ispise samo prvi puta kada upadne u ovaj case da ne djira bezveze	*/
					if (displ_flag_shot)
    1284:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1288:	88 23       	and	r24, r24
    128a:	c9 f0       	breq	.+50     	; 0x12be <fsm_lcd_menu+0x6a4>
					{
						displ_flag_shot = 0;		//zabranjujem ponovni ispis sve dok je u ovom case-u. Dozvoljava se kada izleti iz njega
    128c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
						
						snap_vreme_paljenja = jednokratno_paljenje;
    1290:	89 e0       	ldi	r24, 0x09	; 9
    1292:	e6 ef       	ldi	r30, 0xF6	; 246
    1294:	f1 e0       	ldi	r31, 0x01	; 1
    1296:	ae e2       	ldi	r26, 0x2E	; 46
    1298:	b2 e0       	ldi	r27, 0x02	; 2
    129a:	01 90       	ld	r0, Z+
    129c:	0d 92       	st	X+, r0
    129e:	8a 95       	dec	r24
    12a0:	e1 f7       	brne	.-8      	; 0x129a <fsm_lcd_menu+0x680>
						snap_vreme_gasenja = jednokratno_gasenje;
    12a2:	89 e0       	ldi	r24, 0x09	; 9
    12a4:	ed ee       	ldi	r30, 0xED	; 237
    12a6:	f1 e0       	ldi	r31, 0x01	; 1
    12a8:	ac e1       	ldi	r26, 0x1C	; 28
    12aa:	b2 e0       	ldi	r27, 0x02	; 2
    12ac:	01 90       	ld	r0, Z+
    12ae:	0d 92       	st	X+, r0
    12b0:	8a 95       	dec	r24
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <fsm_lcd_menu+0x692>
						
						kursor_horiz = 3;			//hh1:mm1 = 3,6 ; hh2:mm2 = 10,13
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
    12ba:	0e 94 52 05 	call	0xaa4	; 0xaa4 <jednokrat_LCD_ispis>
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
    12be:	61 e0       	ldi	r22, 0x01	; 1
    12c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    12c4:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    12c8:	88 23       	and	r24, r24
    12ca:	c9 f0       	breq	.+50     	; 0x12fe <fsm_lcd_menu+0x6e4>
					{
						kursor_horiz += 3;
    12cc:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
    12d0:	9c ef       	ldi	r25, 0xFC	; 252
    12d2:	98 0f       	add	r25, r24
    12d4:	93 30       	cpi	r25, 0x03	; 3
    12d6:	20 f4       	brcc	.+8      	; 0x12e0 <fsm_lcd_menu+0x6c6>
						kursor_horiz = 10;
    12d8:	8a e0       	ldi	r24, 0x0A	; 10
    12da:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <fsm_lcd_menu+0x6d8>
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    12e0:	8d 5f       	subi	r24, 0xFD	; 253
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 10;
						else if (kursor_horiz > 13)
    12e2:	8e 30       	cpi	r24, 0x0E	; 14
    12e4:	1c f4       	brge	.+6      	; 0x12ec <fsm_lcd_menu+0x6d2>
						jednokrat_LCD_ispis();			//ispis karaktera na LCD
						
					}
					if ( ocitaj_jedan_taster(tasteri, TASTER_DESNO) )		//kursor desno
					{
						kursor_horiz += 3;
    12e6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <fsm_lcd_menu+0x6d8>
						if(kursor_horiz > 6 && kursor_horiz <10)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 10;
						else if (kursor_horiz > 13)
						kursor_horiz = 13;
    12ec:	8d e0       	ldi	r24, 0x0D	; 13
    12ee:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						lcd1602_goto_xy(kursor_horiz,1);
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    12f8:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
    12fc:	fd c0       	rjmp	.+506    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1304:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    1308:	88 23       	and	r24, r24
    130a:	c9 f0       	breq	.+50     	; 0x133e <fsm_lcd_menu+0x724>
					{
						kursor_horiz -= 3;
    130c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
    1310:	96 ef       	ldi	r25, 0xF6	; 246
    1312:	98 0f       	add	r25, r24
    1314:	93 30       	cpi	r25, 0x03	; 3
    1316:	20 f4       	brcc	.+8      	; 0x1320 <fsm_lcd_menu+0x706>
						kursor_horiz = 6;
    1318:	86 e0       	ldi	r24, 0x06	; 6
    131a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <fsm_lcd_menu+0x718>
						
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    1320:	83 50       	subi	r24, 0x03	; 3
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 6;
						else if(kursor_horiz < 3)
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	1c f0       	brlt	.+6      	; 0x132c <fsm_lcd_menu+0x712>
						
						lcd1602_goto_xy(kursor_horiz,1);
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_LEVO))		//kursor levo
					{
						kursor_horiz -= 3;
    1326:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <fsm_lcd_menu+0x718>
						if(kursor_horiz < 10 && kursor_horiz > 6)	//zbog asimetrije pri prikazu: 23:30--05:04
						kursor_horiz = 6;
						else if(kursor_horiz < 3)
						kursor_horiz = 3;
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <kursor_horiz>
						
						lcd1602_goto_xy(kursor_horiz,1);
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    1338:	0e 94 d7 03 	call	0x7ae	; 0x7ae <lcd1602_goto_xy>
    133c:	dd c0       	rjmp	.+442    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_GORE) )
    133e:	62 e0       	ldi	r22, 0x02	; 2
    1340:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    1344:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    1348:	88 23       	and	r24, r24
    134a:	99 f1       	breq	.+102    	; 0x13b2 <fsm_lcd_menu+0x798>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON ++
    134c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	51 f4       	brne	.+20     	; 0x1368 <fsm_lcd_menu+0x74e>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UVECAJ);
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	46 ed       	ldi	r20, 0xD6	; 214
    1358:	51 e0       	ldi	r21, 0x01	; 1
    135a:	68 e0       	ldi	r22, 0x08	; 8
    135c:	72 e0       	ldi	r23, 0x02	; 2
    135e:	80 e3       	ldi	r24, 0x30	; 48
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1366:	c8 c0       	rjmp	.+400    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON ++
    1368:	86 30       	cpi	r24, 0x06	; 6
    136a:	51 f4       	brne	.+20     	; 0x1380 <fsm_lcd_menu+0x766>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UVECAJ);
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	46 ed       	ldi	r20, 0xD6	; 214
    1370:	51 e0       	ldi	r21, 0x01	; 1
    1372:	68 e0       	ldi	r22, 0x08	; 8
    1374:	72 e0       	ldi	r23, 0x02	; 2
    1376:	8f e2       	ldi	r24, 0x2F	; 47
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    137e:	bc c0       	rjmp	.+376    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 10)											//podesava SATE_OFF ++
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	51 f4       	brne	.+20     	; 0x1398 <fsm_lcd_menu+0x77e>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UVECAJ);
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	46 ed       	ldi	r20, 0xD6	; 214
    1388:	51 e0       	ldi	r21, 0x01	; 1
    138a:	68 e0       	ldi	r22, 0x08	; 8
    138c:	72 e0       	ldi	r23, 0x02	; 2
    138e:	8e e1       	ldi	r24, 0x1E	; 30
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    1396:	b0 c0       	rjmp	.+352    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF ++
    1398:	8d 30       	cpi	r24, 0x0D	; 13
    139a:	09 f0       	breq	.+2      	; 0x139e <fsm_lcd_menu+0x784>
    139c:	ad c0       	rjmp	.+346    	; 0x14f8 <fsm_lcd_menu+0x8de>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UVECAJ);
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	46 ed       	ldi	r20, 0xD6	; 214
    13a2:	51 e0       	ldi	r21, 0x01	; 1
    13a4:	68 e0       	ldi	r22, 0x08	; 8
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	8d e1       	ldi	r24, 0x1D	; 29
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    13b0:	a3 c0       	rjmp	.+326    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_DOLE) )
    13b2:	63 e0       	ldi	r22, 0x03	; 3
    13b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    13b8:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    13bc:	88 23       	and	r24, r24
    13be:	99 f1       	breq	.+102    	; 0x1426 <fsm_lcd_menu+0x80c>
					{
						if (kursor_horiz == 3)												//podesava SATE_ON --
    13c0:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <kursor_horiz>
    13c4:	83 30       	cpi	r24, 0x03	; 3
    13c6:	51 f4       	brne	.+20     	; 0x13dc <fsm_lcd_menu+0x7c2>
						sati_ispis(&snap_vreme_paljenja.hr, bafer, &kursor_horiz, UMANJI);
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	46 ed       	ldi	r20, 0xD6	; 214
    13cc:	51 e0       	ldi	r21, 0x01	; 1
    13ce:	68 e0       	ldi	r22, 0x08	; 8
    13d0:	72 e0       	ldi	r23, 0x02	; 2
    13d2:	80 e3       	ldi	r24, 0x30	; 48
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    13da:	8e c0       	rjmp	.+284    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 6)											//podesava MINUTE_ON --
    13dc:	86 30       	cpi	r24, 0x06	; 6
    13de:	51 f4       	brne	.+20     	; 0x13f4 <fsm_lcd_menu+0x7da>
						minuti_ispis(&snap_vreme_paljenja.min, bafer, &kursor_horiz, UMANJI);
    13e0:	21 e0       	ldi	r18, 0x01	; 1
    13e2:	46 ed       	ldi	r20, 0xD6	; 214
    13e4:	51 e0       	ldi	r21, 0x01	; 1
    13e6:	68 e0       	ldi	r22, 0x08	; 8
    13e8:	72 e0       	ldi	r23, 0x02	; 2
    13ea:	8f e2       	ldi	r24, 0x2F	; 47
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    13f2:	82 c0       	rjmp	.+260    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 10)											//podesava SATE_OFF --
    13f4:	8a 30       	cpi	r24, 0x0A	; 10
    13f6:	51 f4       	brne	.+20     	; 0x140c <fsm_lcd_menu+0x7f2>
						sati_ispis(&snap_vreme_gasenja.hr, bafer, &kursor_horiz, UMANJI);
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	46 ed       	ldi	r20, 0xD6	; 214
    13fc:	51 e0       	ldi	r21, 0x01	; 1
    13fe:	68 e0       	ldi	r22, 0x08	; 8
    1400:	72 e0       	ldi	r23, 0x02	; 2
    1402:	8e e1       	ldi	r24, 0x1E	; 30
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	0e 94 ff 01 	call	0x3fe	; 0x3fe <sati_ispis>
    140a:	76 c0       	rjmp	.+236    	; 0x14f8 <fsm_lcd_menu+0x8de>
						else if (kursor_horiz == 13)											//podesava MINUTE_OFF --
    140c:	8d 30       	cpi	r24, 0x0D	; 13
    140e:	09 f0       	breq	.+2      	; 0x1412 <fsm_lcd_menu+0x7f8>
    1410:	73 c0       	rjmp	.+230    	; 0x14f8 <fsm_lcd_menu+0x8de>
						minuti_ispis(&snap_vreme_gasenja.min, bafer, &kursor_horiz, UMANJI);
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	46 ed       	ldi	r20, 0xD6	; 214
    1416:	51 e0       	ldi	r21, 0x01	; 1
    1418:	68 e0       	ldi	r22, 0x08	; 8
    141a:	72 e0       	ldi	r23, 0x02	; 2
    141c:	8d e1       	ldi	r24, 0x1D	; 29
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e 94 5e 02 	call	0x4bc	; 0x4bc <minuti_ispis>
    1424:	69 c0       	rjmp	.+210    	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_ENTER) )				//ENTER vreme i izlaz iz menija
    1426:	65 e0       	ldi	r22, 0x05	; 5
    1428:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    142c:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    1430:	88 23       	and	r24, r24
    1432:	d1 f1       	breq	.+116    	; 0x14a8 <fsm_lcd_menu+0x88e>
					{
						jednokratno_paljenje = snap_vreme_paljenja;	//konacno upisem
    1434:	89 e0       	ldi	r24, 0x09	; 9
    1436:	ee e2       	ldi	r30, 0x2E	; 46
    1438:	f2 e0       	ldi	r31, 0x02	; 2
    143a:	a6 ef       	ldi	r26, 0xF6	; 246
    143c:	b1 e0       	ldi	r27, 0x01	; 1
    143e:	01 90       	ld	r0, Z+
    1440:	0d 92       	st	X+, r0
    1442:	8a 95       	dec	r24
    1444:	e1 f7       	brne	.-8      	; 0x143e <fsm_lcd_menu+0x824>
						jednokratno_gasenje = snap_vreme_gasenja;
    1446:	89 e0       	ldi	r24, 0x09	; 9
    1448:	ec e1       	ldi	r30, 0x1C	; 28
    144a:	f2 e0       	ldi	r31, 0x02	; 2
    144c:	ad ee       	ldi	r26, 0xED	; 237
    144e:	b1 e0       	ldi	r27, 0x01	; 1
    1450:	01 90       	ld	r0, Z+
    1452:	0d 92       	st	X+, r0
    1454:	8a 95       	dec	r24
    1456:	e1 f7       	brne	.-8      	; 0x1450 <fsm_lcd_menu+0x836>
						
						/* upis u eeprom */
						EEPROM_write(JEDNOK_UPALI_HR_ADR, jednokratno_paljenje.hr);
    1458:	06 ef       	ldi	r16, 0xF6	; 246
    145a:	11 e0       	ldi	r17, 0x01	; 1
    145c:	f8 01       	movw	r30, r16
    145e:	62 81       	ldd	r22, Z+2	; 0x02
    1460:	84 e0       	ldi	r24, 0x04	; 4
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UPALI_MIN_ADR, jednokratno_paljenje.min);
    1468:	f8 01       	movw	r30, r16
    146a:	61 81       	ldd	r22, Z+1	; 0x01
    146c:	85 e0       	ldi	r24, 0x05	; 5
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_HR_ADR, jednokratno_gasenje.hr);
    1474:	0d ee       	ldi	r16, 0xED	; 237
    1476:	11 e0       	ldi	r17, 0x01	; 1
    1478:	f8 01       	movw	r30, r16
    147a:	62 81       	ldd	r22, Z+2	; 0x02
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						EEPROM_write(JEDNOK_UGASI_MIN_ADR, jednokratno_gasenje.min);
    1484:	f8 01       	movw	r30, r16
    1486:	61 81       	ldd	r22, Z+1	; 0x01
    1488:	87 e0       	ldi	r24, 0x07	; 7
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 95 01 	call	0x32a	; 0x32a <EEPROM_write>
						
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    1496:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    14a6:	28 c0       	rjmp	.+80     	; 0x14f8 <fsm_lcd_menu+0x8de>
					}
					else if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )			//IZLAZ iz menija
    14a8:	64 e0       	ldi	r22, 0x04	; 4
    14aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    14ae:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    14b2:	88 23       	and	r24, r24
    14b4:	09 f1       	breq	.+66     	; 0x14f8 <fsm_lcd_menu+0x8de>
					{
						displ_flag_shot = 1;			//dozvolim ponovni ispis
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						kursor_horiz = 0;					//reset kursora
    14bc:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <kursor_horiz>
						lcd1602_cursor_blink(0);	//isklucim blinking cursor
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lcd1602_cursor_blink>
						STATE = MENU1;				//vraca se u prethodni meni
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
    14cc:	15 c0       	rjmp	.+42     	; 0x14f8 <fsm_lcd_menu+0x8de>
		
		case BROJILO:
					
					//Ispisivanje trenutnog napona, struje, snage...
					//kopija DISPL2 ali bez uslova za ciklicno menjanje displeja
					if ( flag_prekid_100ms_VAkWh )	//Ispisujem napon, struju snagu, sa periodom 100ms, da nije zamrznut ispis vec da se vide promene
    14ce:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <flag_prekid_100ms_VAkWh>
    14d2:	88 23       	and	r24, r24
    14d4:	21 f0       	breq	.+8      	; 0x14de <fsm_lcd_menu+0x8c4>
					{
						flag_prekid_100ms_VAkWh = 0; //reset flaga
    14d6:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <flag_prekid_100ms_VAkWh>
						
						brojilo_LCD_ispis();
    14da:	0e 94 95 05 	call	0xb2a	; 0xb2a <brojilo_LCD_ispis>
					}
					
					
					if ( ocitaj_jedan_taster(tasteri, TASTER_NAZAD) )	//taster enter stisnut
    14de:	64 e0       	ldi	r22, 0x04	; 4
    14e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tasteri>
    14e4:	0e 94 20 0c 	call	0x1840	; 0x1840 <ocitaj_jedan_taster>
    14e8:	88 23       	and	r24, r24
    14ea:	31 f0       	breq	.+12     	; 0x14f8 <fsm_lcd_menu+0x8de>
					{
						displ_flag_shot = 1; //opet dozvolim, pri izlazku iz ovog stejta
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
						STATE = MENU1;
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <STATE>
		default: {}
		
	}
	
	
}
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <main>:
{
	
	
/******************************** Inicijalizacija perifirija ***************************************************/

	tajmer0_init();			
    1506:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <tajmer0_init>
	i2c_init();				//NAPOMENA: ISKLJUCENI internal-pullup na SDA i SCL, PC4-PC5 
    150a:	0e 94 9f 01 	call	0x33e	; 0x33e <i2c_init>
	lcd1602_init();
    150e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <lcd1602_init>
	ADC_init();				
    1512:	0e 94 d7 00 	call	0x1ae	; 0x1ae <ADC_init>
	uart_init(500000);		//vidi f-ju za opcije bauda; 500k
    1516:	60 e2       	ldi	r22, 0x20	; 32
    1518:	71 ea       	ldi	r23, 0xA1	; 161
    151a:	87 e0       	ldi	r24, 0x07	; 7
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <uart_init>
	DS3231_init();			//RTC init
    1522:	0e 94 ce 0c 	call	0x199c	; 0x199c <DS3231_init>
	pc_init();				//pin change interrupt init. NAPOMENA: PINC3 input
    1526:	0e 94 cb 0b 	call	0x1796	; 0x1796 <pc_init>
	tasteri_init();			//NAPOMENA: PD2-7 INPUT, INT_PULLUP=ON
    152a:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <tasteri_init>
	
	DDRB |= 1<<PINB5;		//pinB 5 - DIG13 = OUTPUT LED DIODA
    152e:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= 1<<PINB4;		//pinB 4 OUTPUT 
    1530:	24 9a       	sbi	0x04, 4	; 4
	
	sei();	//global interrupt enable
    1532:	78 94       	sei
	//EEPROM_write(UPALI_MIN_ADR, 25);
	//EEPROM_write(UGASI_HR_ADR, 5);
	//EEPROM_write(UGASI_MIN_ADR, 45);
	
	/* citanje on-off vremena iz eeproma pri inicijalizaciji */
	vreme_paljenja.hr = EEPROM_read(UPALI_HR_ADR);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    153c:	c5 e2       	ldi	r28, 0x25	; 37
    153e:	d2 e0       	ldi	r29, 0x02	; 2
    1540:	8a 83       	std	Y+2, r24	; 0x02
	vreme_paljenja.min = EEPROM_read(UPALI_MIN_ADR);
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    154a:	89 83       	std	Y+1, r24	; 0x01
	vreme_gasenja.hr = EEPROM_read(UGASI_HR_ADR);
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1554:	c7 e3       	ldi	r28, 0x37	; 55
    1556:	d2 e0       	ldi	r29, 0x02	; 2
    1558:	8a 83       	std	Y+2, r24	; 0x02
	vreme_gasenja.min = EEPROM_read(UGASI_MIN_ADR);
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1562:	89 83       	std	Y+1, r24	; 0x01
	
	jednokratno_paljenje.hr = EEPROM_read(JEDNOK_UPALI_HR_ADR);
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    156c:	c6 ef       	ldi	r28, 0xF6	; 246
    156e:	d1 e0       	ldi	r29, 0x01	; 1
    1570:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_paljenje.min = EEPROM_read(JEDNOK_UPALI_MIN_ADR);
    1572:	85 e0       	ldi	r24, 0x05	; 5
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    157a:	89 83       	std	Y+1, r24	; 0x01
	jednokratno_gasenje.hr = EEPROM_read(JEDNOK_UGASI_HR_ADR);
    157c:	86 e0       	ldi	r24, 0x06	; 6
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1584:	cd ee       	ldi	r28, 0xED	; 237
    1586:	d1 e0       	ldi	r29, 0x01	; 1
    1588:	8a 83       	std	Y+2, r24	; 0x02
	jednokratno_gasenje.min = EEPROM_read(JEDNOK_UGASI_MIN_ADR);
    158a:	87 e0       	ldi	r24, 0x07	; 7
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 8e 01 	call	0x31c	; 0x31c <EEPROM_read>
    1592:	89 83       	std	Y+1, r24	; 0x01
	
	snap_vreme_paljenja = vreme_paljenja;
    1594:	89 e0       	ldi	r24, 0x09	; 9
    1596:	e5 e2       	ldi	r30, 0x25	; 37
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	ae e2       	ldi	r26, 0x2E	; 46
    159c:	b2 e0       	ldi	r27, 0x02	; 2
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	8a 95       	dec	r24
    15a4:	e1 f7       	brne	.-8      	; 0x159e <main+0x98>
	snap_vreme_gasenja = vreme_gasenja;
    15a6:	89 e0       	ldi	r24, 0x09	; 9
    15a8:	e7 e3       	ldi	r30, 0x37	; 55
    15aa:	f2 e0       	ldi	r31, 0x02	; 2
    15ac:	ac e1       	ldi	r26, 0x1C	; 28
    15ae:	b2 e0       	ldi	r27, 0x02	; 2
    15b0:	01 90       	ld	r0, Z+
    15b2:	0d 92       	st	X+, r0
    15b4:	8a 95       	dec	r24
    15b6:	e1 f7       	brne	.-8      	; 0x15b0 <main+0xaa>
		
		/* ocitava napon i struju */
		adc_read();			
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    15b8:	0f 2e       	mov	r0, r31
    15ba:	f7 e7       	ldi	r31, 0x77	; 119
    15bc:	ef 2e       	mov	r14, r31
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	ff 2e       	mov	r15, r31
    15c2:	f0 2d       	mov	r31, r0
    15c4:	c8 e0       	ldi	r28, 0x08	; 8
    15c6:	d2 e0       	ldi	r29, 0x02	; 2
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    15c8:	dd 24       	eor	r13, r13
    15ca:	d3 94       	inc	r13
    while (1) 
    {
		
		/* polling tastera */
		//tasteri = PIND;
		tasteri = ocitaj_tastere();
    15cc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <ocitaj_tastere>
    15d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tasteri>
		
		/* ocitava napon i struju */
		adc_read();			
    15d4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <adc_read>
		
		
		sprintf(bafer, "%4d  ", adc_napon_raw);
    15d8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <adc_napon_raw+0x1>
    15dc:	8f 93       	push	r24
    15de:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <adc_napon_raw>
    15e2:	8f 93       	push	r24
    15e4:	ff 92       	push	r15
    15e6:	ef 92       	push	r14
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		uart_send_str(bafer);
    15f0:	ce 01       	movw	r24, r28
    15f2:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		sprintf(bafer, "%4d  ", adc_struja_raw);
    15f6:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <adc_struja_raw+0x1>
    15fa:	8f 93       	push	r24
    15fc:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <adc_struja_raw>
    1600:	8f 93       	push	r24
    1602:	ff 92       	push	r15
    1604:	ef 92       	push	r14
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		uart_send_str(bafer);
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		
		sprintf(bafer, "%4d  ", napon);
    1614:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <napon+0x1>
    1618:	8f 93       	push	r24
    161a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <napon>
    161e:	8f 93       	push	r24
    1620:	ff 92       	push	r15
    1622:	ef 92       	push	r14
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	0e 94 b1 10 	call	0x2162	; 0x2162 <sprintf>
		uart_send_str(bafer);
    162c:	ce 01       	movw	r24, r28
    162e:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		dtostrf(struja, 4, 1, bafer);
    1632:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <struja>
    1636:	70 91 cb 01 	lds	r23, 0x01CB	; 0x8001cb <struja+0x1>
    163a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <struja+0x2>
    163e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <struja+0x3>
    1642:	8e 01       	movw	r16, r28
    1644:	21 e0       	ldi	r18, 0x01	; 1
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	44 e0       	ldi	r20, 0x04	; 4
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	0e 94 91 10 	call	0x2122	; 0x2122 <dtostrf>
		uart_send_str(bafer);
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		uart_send_str("  ");
    1656:	86 e0       	ldi	r24, 0x06	; 6
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		dtostrf(snaga, 4, 2, bafer);
    165e:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
    1662:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
    1666:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
    166a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
    166e:	22 e0       	ldi	r18, 0x02	; 2
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	44 e0       	ldi	r20, 0x04	; 4
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	0e 94 91 10 	call	0x2122	; 0x2122 <dtostrf>
		uart_send_str(bafer);
    167a:	ce 01       	movw	r24, r28
    167c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		uart_send_str("  ");
    1680:	86 e0       	ldi	r24, 0x06	; 6
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		dtostrf(energija, 5, 2, bafer);
    1688:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    168c:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    1690:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    1694:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    1698:	22 e0       	ldi	r18, 0x02	; 2
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	45 e0       	ldi	r20, 0x05	; 5
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	0e 94 91 10 	call	0x2122	; 0x2122 <dtostrf>
		uart_send_str(bafer);
    16a4:	ce 01       	movw	r24, r28
    16a6:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		uart_send_str("\n");
    16aa:	8d e7       	ldi	r24, 0x7D	; 125
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <uart_send_str>
		//uart_send_str(bafer_uart);
		//uart_send_str("\n");
		
		/* bez obzira na STATE provera vremena treba da ide na 1s odnosno provera
		   da li grejac treba biti ukljucen ili iskljucen. Donji deo koda (swithc-case) ne bi trebao da koci program */
		if (flag_pc_int_pomocni)		//ide na 1 sekund
    16b2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <flag_pc_int_pomocni>
    16b6:	2d b7       	in	r18, 0x3d	; 61
    16b8:	3e b7       	in	r19, 0x3e	; 62
    16ba:	2e 5e       	subi	r18, 0xEE	; 238
    16bc:	3f 4f       	sbci	r19, 0xFF	; 255
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	3e bf       	out	0x3e, r19	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	2d bf       	out	0x3d, r18	; 61
    16c8:	88 23       	and	r24, r24
    16ca:	09 f4       	brne	.+2      	; 0x16ce <main+0x1c8>
    16cc:	61 c0       	rjmp	.+194    	; 0x1790 <main+0x28a>
		{
			flag_pc_int_pomocni = 0;
    16ce:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <flag_pc_int_pomocni>
			/* da sam koristio isti flag kao u automatu stanja, a ovde ga resetujem, dole nikada
			   ne bi bio ispunjen uslov za flag_pc_int==1 */
			
			getTime(&vreme_datum.hr, &vreme_datum.min, &vreme_datum.s, &vreme_datum.am_pm, _24_hour_format);
    16d2:	00 e0       	ldi	r16, 0x00	; 0
    16d4:	28 e4       	ldi	r18, 0x48	; 72
    16d6:	32 e0       	ldi	r19, 0x02	; 2
    16d8:	40 e4       	ldi	r20, 0x40	; 64
    16da:	52 e0       	ldi	r21, 0x02	; 2
    16dc:	61 e4       	ldi	r22, 0x41	; 65
    16de:	72 e0       	ldi	r23, 0x02	; 2
    16e0:	82 e4       	ldi	r24, 0x42	; 66
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <getTime>
			
			/* integraljenje(sumiranje) snage je enerija. E = P * t     */
			energija += (snaga/3600.0);		//posto merim u kWh, a ovo ide na 1 sekund, a sat ima 3600s delim sa 3600.0
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	41 e6       	ldi	r20, 0x61	; 97
    16ee:	55 e4       	ldi	r21, 0x45	; 69
    16f0:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <snaga>
    16f4:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <snaga+0x1>
    16f8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <snaga+0x2>
    16fc:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <snaga+0x3>
    1700:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__divsf3>
    1704:	9b 01       	movw	r18, r22
    1706:	ac 01       	movw	r20, r24
    1708:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <energija>
    170c:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <energija+0x1>
    1710:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <energija+0x2>
    1714:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <energija+0x3>
    1718:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    171c:	60 93 c2 01 	sts	0x01C2, r22	; 0x8001c2 <energija>
    1720:	70 93 c3 01 	sts	0x01C3, r23	; 0x8001c3 <energija+0x1>
    1724:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <energija+0x2>
    1728:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <energija+0x3>
			//uart_send_str(bafer);
			//uart_send_str("\n"); //novi red
		
			
			/* JEDNOKRATNI PERIOD PALJENJA */						
			if (jednok_on_off==1)
    172c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <jednok_on_off>
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	d1 f4       	brne	.+52     	; 0x1768 <main+0x262>
			{
				/* ako je setovan flag, pali bojler jednokratno */
				/* potrebno je resetovati flag po isteku perioda */
				if ( period_paljenja(&jednokratno_paljenje, &jednokratno_gasenje, &vreme_datum) )	//vraca 0 ili 1 (ugasi - upali)
    1734:	40 e4       	ldi	r20, 0x40	; 64
    1736:	52 e0       	ldi	r21, 0x02	; 2
    1738:	6d ee       	ldi	r22, 0xED	; 237
    173a:	71 e0       	ldi	r23, 0x01	; 1
    173c:	86 ef       	ldi	r24, 0xF6	; 246
    173e:	91 e0       	ldi	r25, 0x01	; 1
    1740:	0e 94 02 04 	call	0x804	; 0x804 <period_paljenja>
    1744:	88 23       	and	r24, r24
    1746:	29 f0       	breq	.+10     	; 0x1752 <main+0x24c>
				{
					ukljuceno = 1;			//ako je IF ispunjen setuj promenljivu "ukljuceno"
    1748:	d0 92 d9 01 	sts	0x01D9, r13	; 0x8001d9 <ukljuceno>
					jednok_se_desio = 1;
    174c:	d0 92 d4 01 	sts	0x01D4, r13	; 0x8001d4 <jednok_se_desio>
    1750:	0d c0       	rjmp	.+26     	; 0x176c <main+0x266>
				}
				else if(jednok_se_desio)												//jednok. setovan, ALI ISTEKAO
    1752:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <jednok_se_desio>
    1756:	88 23       	and	r24, r24
    1758:	49 f0       	breq	.+18     	; 0x176c <main+0x266>
				{																		//proverava se tek kad period paljenja vraca 0, tj kada gornji IF nije ispunjen
					ukljuceno = 0;
    175a:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ukljuceno>
					jednok_on_off = 0;		//resetujem flag		
    175e:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <jednok_on_off>
					jednok_se_desio = 0;	//resetujem i ovaj flag. Da nema ovoga Jednokratno paljenje nikada ne bi startovalo ako tek treba da se desi
    1762:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <jednok_se_desio>
    1766:	02 c0       	rjmp	.+4      	; 0x176c <main+0x266>
				}
			}
			else
				ukljuceno = 0;
    1768:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ukljuceno>
			
			/* GLAVNI PERIOD; paljenje/gasenje releja > grjaca bojlera; edit: zapravo o grejacu odlucuje termostat bojlera, ovim se pali bojler */
			ukljuceno |= period_paljenja(&vreme_paljenja, &vreme_gasenja, &vreme_datum);	//ILI veza glavnog i jednok. perioda
    176c:	40 e4       	ldi	r20, 0x40	; 64
    176e:	52 e0       	ldi	r21, 0x02	; 2
    1770:	67 e3       	ldi	r22, 0x37	; 55
    1772:	72 e0       	ldi	r23, 0x02	; 2
    1774:	85 e2       	ldi	r24, 0x25	; 37
    1776:	92 e0       	ldi	r25, 0x02	; 2
    1778:	0e 94 02 04 	call	0x804	; 0x804 <period_paljenja>
    177c:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <ukljuceno>
    1780:	89 2b       	or	r24, r25
    1782:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <ukljuceno>
			
			if (ukljuceno)
    1786:	88 23       	and	r24, r24
    1788:	11 f0       	breq	.+4      	; 0x178e <main+0x288>
				PORTB |= 1<<PINB5;   //high
    178a:	2d 9a       	sbi	0x05, 5	; 5
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <main+0x28a>
			else
				PORTB &= ~(1<<PINB5);	//low
    178e:	2d 98       	cbi	0x05, 5	; 5
		}
		
		
		
		/* automat stanja za menije na displeju */
		fsm_lcd_menu();
    1790:	0e 94 0d 06 	call	0xc1a	; 0xc1a <fsm_lcd_menu>
		

    }
    1794:	1b cf       	rjmp	.-458    	; 0x15cc <main+0xc6>

00001796 <pc_init>:
*/
void pc_init()
{
	//PCINT-ovi su podeljeni u 3 grupe
	
	PCICR |= 1<<PCIE1;		//interrupt enable, u PCIE1 spadaju PCINT 14 - 8. Meni treba PCINT11 pin
    1796:	e8 e6       	ldi	r30, 0x68	; 104
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	82 60       	ori	r24, 0x02	; 2
    179e:	80 83       	st	Z, r24
	PCMSK1 |= 1<<PCINT11;   //interrupt enable na zeljenom pinu - PCINT11
    17a0:	ec e6       	ldi	r30, 0x6C	; 108
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	88 60       	ori	r24, 0x08	; 8
    17a8:	80 83       	st	Z, r24
	
	DDRC &= ~(1<<PINC3);  //PCINT11 je na pinu PC3, ulaz
    17aa:	3b 98       	cbi	0x07, 3	; 7
    17ac:	08 95       	ret

000017ae <__vector_4>:
	
}

ISR(PCINT1_vect) 
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	8f 93       	push	r24
	   pola sekunde zbog toga sto ne razlikuje ivice, proverim samo kada je HIGH
	   cime dobijam 1 sekund.
	*/
	
	//moze i  (PINC & 1<<PINC3) == 0b1000, ali je redundantno
	if( PINC & (1<<PINC3) )		
    17ba:	33 9b       	sbis	0x06, 3	; 6
    17bc:	05 c0       	rjmp	.+10     	; 0x17c8 <__vector_4+0x1a>
	{
		flag_pc_int = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <flag_pc_int>
		flag_pc_int_pomocni = 1;
    17c4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <flag_pc_int_pomocni>
	}
		
    17c8:	8f 91       	pop	r24
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0
    17d0:	1f 90       	pop	r1
    17d2:	18 95       	reti

000017d4 <tasteri_init>:
extern const char *byte_to_binary(int x);

void tasteri_init()
{
	/* tasteri input */
	DDRD &= ~( (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort) );
    17d4:	8a b1       	in	r24, 0x0a	; 10
    17d6:	8f 70       	andi	r24, 0x0F	; 15
    17d8:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~( (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort) );
    17da:	84 b1       	in	r24, 0x04	; 4
    17dc:	8c 7f       	andi	r24, 0xFC	; 252
    17de:	84 b9       	out	0x04, r24	; 4
	
	/* internal pull ups ON */
	PORTD |= (1<<TASTER_LEVO_pinPort) | (1<<TASTER_DESNO_pinPort) | (1<<TASTER_GORE_pinPort) | (1<<TASTER_DOLE_pinPort);
    17e0:	8b b1       	in	r24, 0x0b	; 11
    17e2:	80 6f       	ori	r24, 0xF0	; 240
    17e4:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<TASTER_NAZAD_pinPort) | (1<<TASTER_ENTER_pinPort);
    17e6:	85 b1       	in	r24, 0x05	; 5
    17e8:	83 60       	ori	r24, 0x03	; 3
    17ea:	85 b9       	out	0x05, r24	; 5
    17ec:	08 95       	ret

000017ee <ocitaj_tastere>:

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
	uint8_t temp_reg2 = 0xFF;
	
	if (flag_prekid_debounce_time_half)		//prvo citanje 3ms; zapravo perioda je 3ms jer je to razlika izmedju prvog i drugog citanja
    17ee:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <flag_prekid_debounce_time_half>
    17f2:	88 23       	and	r24, r24
    17f4:	69 f0       	breq	.+26     	; 0x1810 <ocitaj_tastere+0x22>
	{
		flag_prekid_debounce_time_half = 0;	//reset flag
    17f6:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <flag_prekid_debounce_time_half>
		
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PINB a posle njih su 2 bita iz PIND
    17fa:	93 b1       	in	r25, 0x03	; 3
    17fc:	29 b1       	in	r18, 0x09	; 9
    17fe:	30 e1       	ldi	r19, 0x10	; 16
    1800:	93 9f       	mul	r25, r19
    1802:	c0 01       	movw	r24, r0
    1804:	11 24       	eor	r1, r1
    1806:	92 2f       	mov	r25, r18
    1808:	92 95       	swap	r25
    180a:	9f 70       	andi	r25, 0x0F	; 15
    180c:	89 2b       	or	r24, r25
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <ocitaj_tastere+0x24>
	/* u tajmeru imam zapravo "2 tajmera" tj. procitam sve tastere prvi put pa posle 3ms (tj. Deb.Perioda/2)
	   opet procitam stanje. Ako se poklapaju konacno upisujem stanje iz dve pomocne promenljive u glavnu promenljivu
	   koja preslikava stvano stanje	*/

	static uint8_t tasteri_reg = 0xFF;
	uint8_t temp_reg1 = 0xFF;
    1810:	8f ef       	ldi	r24, 0xFF	; 255
		//procitam stanje svih tastera i spakujem u jednu promenljivu
		//prvo citanje
		temp_reg1 = (PINB << 4 )|(PIND >> 4);	//prva 4 LSB su PINB a posle njih su 2 bita iz PIND

	}
	if (flag_prekid_debounce_time)		//drugo citanje 6ms, tj 3ms posle drugog
    1812:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <flag_prekid_debounce_time>
    1816:	99 23       	and	r25, r25
    1818:	81 f0       	breq	.+32     	; 0x183a <ocitaj_tastere+0x4c>
	{
		flag_prekid_debounce_time = 0;
    181a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <flag_prekid_debounce_time>
		
		//drugo citanje
		temp_reg2 = (PINB << 4 )|(PIND >> 4);
    181e:	93 b1       	in	r25, 0x03	; 3
    1820:	49 b1       	in	r20, 0x09	; 9
		
		if (temp_reg1 == temp_reg2)
    1822:	50 e1       	ldi	r21, 0x10	; 16
    1824:	95 9f       	mul	r25, r21
    1826:	90 01       	movw	r18, r0
    1828:	11 24       	eor	r1, r1
    182a:	94 2f       	mov	r25, r20
    182c:	92 95       	swap	r25
    182e:	9f 70       	andi	r25, 0x0F	; 15
    1830:	29 2b       	or	r18, r25
    1832:	82 13       	cpse	r24, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <ocitaj_tastere+0x4c>
			tasteri_reg = temp_reg2;	//nebitno da li je 1 ili 2 jer su ovde isti
    1836:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tasteri_reg.2113>
		
	}
	
	return tasteri_reg;
}
    183a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tasteri_reg.2113>
    183e:	08 95       	ret

00001840 <ocitaj_jedan_taster>:
	static uint8_t temp_tast = 0;
	static uint8_t flag_stisnut = 0;
	static uint8_t delay_enable = 1;
	uint8_t pom;
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	20 95       	com	r18
    1846:	30 95       	com	r19
    1848:	e6 2f       	mov	r30, r22
    184a:	a9 01       	movw	r20, r18
    184c:	06 2e       	mov	r0, r22
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <ocitaj_jedan_taster+0x14>
    1850:	55 95       	asr	r21
    1852:	47 95       	ror	r20
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <ocitaj_jedan_taster+0x10>
    1858:	40 ff       	sbrs	r20, 0
    185a:	17 c0       	rjmp	.+46     	; 0x188a <ocitaj_jedan_taster+0x4a>
    185c:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <flag_stisnut.2122>
    1860:	91 11       	cpse	r25, r1
    1862:	13 c0       	rjmp	.+38     	; 0x188a <ocitaj_jedan_taster+0x4a>
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <flag_stisnut.2122>
		temp_tast = button;		//zapamtim koji je taster stisnut
    186a:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <temp_tast.2121>
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    186e:	80 95       	com	r24
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	06 2e       	mov	r0, r22
    1876:	02 c0       	rjmp	.+4      	; 0x187c <ocitaj_jedan_taster+0x3c>
    1878:	44 0f       	add	r20, r20
    187a:	55 1f       	adc	r21, r21
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <ocitaj_jedan_taster+0x38>
    1880:	84 23       	and	r24, r20
    1882:	09 f0       	breq	.+2      	; 0x1886 <ocitaj_jedan_taster+0x46>
    1884:	45 c0       	rjmp	.+138    	; 0x1910 <ocitaj_jedan_taster+0xd0>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	08 95       	ret
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
    188a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <temp_tast.2121>
    188e:	e9 2f       	mov	r30, r25
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1890:	80 95       	com	r24
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	09 2e       	mov	r0, r25
    1898:	02 c0       	rjmp	.+4      	; 0x189e <ocitaj_jedan_taster+0x5e>
    189a:	44 0f       	add	r20, r20
    189c:	55 1f       	adc	r21, r21
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <ocitaj_jedan_taster+0x5a>
    18a2:	84 23       	and	r24, r20
    18a4:	19 f1       	breq	.+70     	; 0x18ec <ocitaj_jedan_taster+0xac>
    18a6:	8e ef       	ldi	r24, 0xFE	; 254
    18a8:	89 0f       	add	r24, r25
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	08 f5       	brcc	.+66     	; 0x18f0 <ocitaj_jedan_taster+0xb0>
    18ae:	69 13       	cpse	r22, r25
    18b0:	21 c0       	rjmp	.+66     	; 0x18f4 <ocitaj_jedan_taster+0xb4>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <ocitaj_jedan_taster+0x78>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
		   ovo radim da bi bilo moguce brze menjati sate ako je taster ostao stisnut, da ne bi morao 30 puta stiskati i pustati taster */
		//startuj "delay" tajmer, ali samo prvi put
		//ako je delay istekao periodicno togluj promenljivu "stisnut", jer ce to napraviti efekat brzog stiskanja
		//kada je taster otpusten opet dozvoli startovanje "delay" tajmera
		
		if (delay_enable == 1)
    18b8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <delay_enable.2123>
    18bc:	91 30       	cpi	r25, 0x01	; 1
    18be:	31 f4       	brne	.+12     	; 0x18cc <ocitaj_jedan_taster+0x8c>
		{
			delay_enable = 0;	//spreci ponovni ulazak
    18c0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <delay_enable.2123>
			delay_timer = 0;	//start, timer ISR ga uvecava
    18c4:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <delay_timer+0x1>
    18c8:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <delay_timer>
		}
		if (delay_timer >= 400)	//ako je delay veci od 400ms togluj "stisnut"
    18cc:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <delay_timer>
    18d0:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <delay_timer+0x1>
    18d4:	20 39       	cpi	r18, 0x90	; 144
    18d6:	31 40       	sbci	r19, 0x01	; 1
    18d8:	00 f1       	brcs	.+64     	; 0x191a <ocitaj_jedan_taster+0xda>
		{
			if(flag_prekid_50ms)
    18da:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <flag_prekid_50ms>
    18de:	99 23       	and	r25, r25
    18e0:	e1 f0       	breq	.+56     	; 0x191a <ocitaj_jedan_taster+0xda>
			{
				flag_prekid_50ms = 0; //reset flag-a
    18e2:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <flag_prekid_50ms>
				stisnut ^= 0b1;	//toggle
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	89 27       	eor	r24, r25
    18ea:	08 95       	ret
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <ocitaj_jedan_taster+0xb6>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	01 c0       	rjmp	.+2      	; 0x18f6 <ocitaj_jedan_taster+0xb6>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
			}
			
				
		}		
	}
	else if ( (~buttons_reg & (1<<temp_tast)) == 0 )		//provera da li je otpusten taster koji je stisnut
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <ocitaj_jedan_taster+0xbc>
    18f8:	35 95       	asr	r19
    18fa:	27 95       	ror	r18
    18fc:	ea 95       	dec	r30
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <ocitaj_jedan_taster+0xb8>
    1900:	20 fd       	sbrc	r18, 0
    1902:	0b c0       	rjmp	.+22     	; 0x191a <ocitaj_jedan_taster+0xda>
	{
		flag_stisnut = 0;	//resetujem flag tek kada je otpusten taster koji je stisnut
    1904:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <flag_stisnut.2122>
		delay_enable = 1;	//dozvoli ponovno startovanje "delay" tajmera ako je taster otpusten
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <delay_enable.2123>
	sprintf(buff, "flag_stis:%d  ", flag_stisnut);
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    190e:	08 95       	ret
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
	}		
	pom  =	( ~buttons_reg & (1<<temp_tast)) ;	//maskiram i proveravam da li je stisnut
	if (  pom  && (temp_tast==TASTER_DOLE || temp_tast==TASTER_GORE) && button == temp_tast)	//ako je taster gore ili dole ostao stisnut, sacekaj malo pa ga toggle-uj nekom periodom
    1910:	62 50       	subi	r22, 0x02	; 2
    1912:	62 30       	cpi	r22, 0x02	; 2
    1914:	80 f2       	brcs	.-96     	; 0x18b6 <ocitaj_jedan_taster+0x76>
	
	if ( (~buttons_reg & (1<<button)) && flag_stisnut == 0 )		//taster stisnut a prethodno otpusten
	{
		flag_stisnut = 1;		//specava ponovni ulazak ako je ostao stisnut
		temp_tast = button;		//zapamtim koji je taster stisnut
		stisnut = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	ee cf       	rjmp	.-36     	; 0x18f6 <ocitaj_jedan_taster+0xb6>
	uart_send_str(buff);		
	uart_send_str("\n");
	*/
	
	return stisnut;
    191a:	08 95       	ret

0000191c <bcd_to_decimal>:
	*p2 = bcd_to_decimal(tmp);
	tmp = (0x3F & DS3231_Read(dateREG));
	*p3 = bcd_to_decimal(tmp);
	tmp = (0x07 & DS3231_Read(dayREG));
	*p4 = bcd_to_decimal(tmp);
}
    191c:	98 2f       	mov	r25, r24
    191e:	92 95       	swap	r25
    1920:	9f 70       	andi	r25, 0x0F	; 15
    1922:	99 0f       	add	r25, r25
    1924:	29 2f       	mov	r18, r25
    1926:	22 0f       	add	r18, r18
    1928:	22 0f       	add	r18, r18
    192a:	92 0f       	add	r25, r18
    192c:	8f 70       	andi	r24, 0x0F	; 15
    192e:	89 0f       	add	r24, r25
    1930:	08 95       	ret

00001932 <decimal_to_bcd>:
    1932:	9d ec       	ldi	r25, 0xCD	; 205
    1934:	89 9f       	mul	r24, r25
    1936:	91 2d       	mov	r25, r1
    1938:	11 24       	eor	r1, r1
    193a:	96 95       	lsr	r25
    193c:	96 95       	lsr	r25
    193e:	96 95       	lsr	r25
    1940:	20 e1       	ldi	r18, 0x10	; 16
    1942:	92 9f       	mul	r25, r18
    1944:	a0 01       	movw	r20, r0
    1946:	11 24       	eor	r1, r1
    1948:	99 0f       	add	r25, r25
    194a:	29 2f       	mov	r18, r25
    194c:	22 0f       	add	r18, r18
    194e:	22 0f       	add	r18, r18
    1950:	92 0f       	add	r25, r18
    1952:	89 1b       	sub	r24, r25
    1954:	8f 70       	andi	r24, 0x0F	; 15
    1956:	84 2b       	or	r24, r20
    1958:	08 95       	ret

0000195a <DS3231_Read>:
    195a:	cf 93       	push	r28
    195c:	c8 2f       	mov	r28, r24
    195e:	80 ed       	ldi	r24, 0xD0	; 208
    1960:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1964:	8c 2f       	mov	r24, r28
    1966:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    196a:	81 ed       	ldi	r24, 0xD1	; 209
    196c:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1970:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <i2c_readNak>
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <DS3231_Write>:
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	d8 2f       	mov	r29, r24
    197e:	c6 2f       	mov	r28, r22
    1980:	80 ed       	ldi	r24, 0xD0	; 208
    1982:	0e 94 a5 01 	call	0x34a	; 0x34a <i2c_start_wait>
    1986:	8d 2f       	mov	r24, r29
    1988:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    198c:	8c 2f       	mov	r24, r28
    198e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <i2c_write>
    1992:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_stop>
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <DS3231_init>:
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	8e e0       	ldi	r24, 0x0E	; 14
    19a0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	8f e0       	ldi	r24, 0x0F	; 15
    19a8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
    19ac:	68 ee       	ldi	r22, 0xE8	; 232
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
    19b4:	08 95       	ret

000019b6 <getTime>:
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	ec 01       	movw	r28, r24
    19ca:	7b 01       	movw	r14, r22
    19cc:	6a 01       	movw	r12, r20
    19ce:	59 01       	movw	r10, r18
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	0e 94 ad 0c 	call	0x195a	; 0x195a <DS3231_Read>
    19d6:	0e 94 8e 0c 	call	0x191c	; 0x191c <bcd_to_decimal>
    19da:	f6 01       	movw	r30, r12
    19dc:	80 83       	st	Z, r24
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	0e 94 ad 0c 	call	0x195a	; 0x195a <DS3231_Read>
    19e4:	0e 94 8e 0c 	call	0x191c	; 0x191c <bcd_to_decimal>
    19e8:	f7 01       	movw	r30, r14
    19ea:	80 83       	st	Z, r24
    19ec:	01 30       	cpi	r16, 0x01	; 1
    19ee:	81 f4       	brne	.+32     	; 0x1a10 <getTime+0x5a>
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	0e 94 ad 0c 	call	0x195a	; 0x195a <DS3231_Read>
    19f6:	85 fb       	bst	r24, 5
    19f8:	88 27       	eor	r24, r24
    19fa:	80 f9       	bld	r24, 0
    19fc:	f5 01       	movw	r30, r10
    19fe:	80 83       	st	Z, r24
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	0e 94 ad 0c 	call	0x195a	; 0x195a <DS3231_Read>
    1a06:	8f 71       	andi	r24, 0x1F	; 31
    1a08:	0e 94 8e 0c 	call	0x191c	; 0x191c <bcd_to_decimal>
    1a0c:	88 83       	st	Y, r24
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <getTime+0x68>
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	0e 94 ad 0c 	call	0x195a	; 0x195a <DS3231_Read>
    1a16:	8f 73       	andi	r24, 0x3F	; 63
    1a18:	0e 94 8e 0c 	call	0x191c	; 0x191c <bcd_to_decimal>
    1a1c:	88 83       	st	Y, r24
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	cf 90       	pop	r12
    1a2c:	bf 90       	pop	r11
    1a2e:	af 90       	pop	r10
    1a30:	08 95       	ret

00001a32 <setTime>:


void setTime(unsigned char hSet, unsigned char mSet, unsigned char sSet, unsigned char am_pm_state, unsigned char hour_format)
{
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	d8 2f       	mov	r29, r24
    1a3c:	c6 2f       	mov	r28, r22
    1a3e:	84 2f       	mov	r24, r20
    1a40:	12 2f       	mov	r17, r18
	unsigned char tmp = 0;
	
	DS3231_Write(secondREG, (decimal_to_bcd(sSet)));
    1a42:	0e 94 99 0c 	call	0x1932	; 0x1932 <decimal_to_bcd>
    1a46:	68 2f       	mov	r22, r24
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
	DS3231_Write(minuteREG, (decimal_to_bcd(mSet)));
    1a4e:	8c 2f       	mov	r24, r28
    1a50:	0e 94 99 0c 	call	0x1932	; 0x1932 <decimal_to_bcd>
    1a54:	68 2f       	mov	r22, r24
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
	
	switch(hour_format)
    1a5c:	01 30       	cpi	r16, 0x01	; 1
    1a5e:	79 f4       	brne	.+30     	; 0x1a7e <setTime+0x4c>
	{
		case 1:
		{
			switch(am_pm_state)
    1a60:	11 30       	cpi	r17, 0x01	; 1
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <setTime+0x36>
					tmp = 0x60;
					break;
				}
				default:
				{
					tmp = 0x40;
    1a64:	c0 e4       	ldi	r28, 0x40	; 64
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <setTime+0x38>
		{
			switch(am_pm_state)
			{
				case 1:
				{
					tmp = 0x60;
    1a68:	c0 e6       	ldi	r28, 0x60	; 96
				{
					tmp = 0x40;
					break;
				}
			}
			DS3231_Write(hourREG, ((tmp | (0x1F & (decimal_to_bcd(hSet))))));
    1a6a:	8d 2f       	mov	r24, r29
    1a6c:	0e 94 99 0c 	call	0x1932	; 0x1932 <decimal_to_bcd>
    1a70:	8f 71       	andi	r24, 0x1F	; 31
    1a72:	68 2f       	mov	r22, r24
    1a74:	6c 2b       	or	r22, r28
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
			break;
    1a7c:	08 c0       	rjmp	.+16     	; 0x1a8e <setTime+0x5c>
		}
		
		default:
		{
			DS3231_Write(hourREG, (0x3F & (decimal_to_bcd(hSet))));
    1a7e:	8d 2f       	mov	r24, r29
    1a80:	0e 94 99 0c 	call	0x1932	; 0x1932 <decimal_to_bcd>
    1a84:	68 2f       	mov	r22, r24
    1a86:	6f 73       	andi	r22, 0x3F	; 63
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DS3231_Write>
			break;
		}
	}
}
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret

00001a98 <tajmer0_init>:
volatile uint8_t flag_prekid_100ms_VAkWh = 0;		//koristim za ispis napona i struje, da nisu zamrznuti dok se prikazuju vec da se vide eventualne promene
volatile uint8_t brojac_prekida_tajmera0_za100ms_VAkWh = 0;	//za 100ms flag, tj tajmer

void tajmer0_init()
{
	TCCR0A = 0b10;		//CTC mode, TOP=OCR0A
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b11;		//prescaler = 64
    1a9c:	93 e0       	ldi	r25, 0x03	; 3
    1a9e:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//da bi se dobila frekvencija 1kHz odnosno prekid na svaki 1ms
    1aa0:	99 ef       	ldi	r25, 0xF9	; 249
    1aa2:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b10;		//compare match A interrupt enable
    1aa4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    1aa8:	08 95       	ret

00001aaa <__vector_14>:
	
}

ISR(TIMER0_COMPA_vect)   //1ms prekid
{
    1aaa:	1f 92       	push	r1
    1aac:	0f 92       	push	r0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	0f 92       	push	r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
	flag_tajmer0_prekid = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <flag_tajmer0_prekid>
	
	brojac_prekida_tajmera0++;
    1abe:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <brojac_prekida_tajmera0>
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <brojac_prekida_tajmera0>
	brojac_prekida_tajmera0_debounce_half++; 
    1ac8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
    1acc:	8f 5f       	subi	r24, 0xFF	; 255
    1ace:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
	brojac_prekida_tajmera0_debounce++;
    1ad2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
	delay_timer++;		//overflow posle 65.5 sekundi, ali koga briga ne remeti normalan rad; 16bit
    1adc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <delay_timer>
    1ae0:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <delay_timer+0x1>
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <delay_timer+0x1>
    1aea:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <delay_timer>
	timer_disp_cycle++;	//u main-u resetujem; 16bit
    1aee:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <timer_disp_cycle>
    1af2:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <timer_disp_cycle+0x1>
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <timer_disp_cycle+0x1>
    1afc:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <timer_disp_cycle>
	brojac_prekida_tajmera0_za100ms_VAkWh++;
    1b00:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <brojac_prekida_tajmera0_za100ms_VAkWh>
    1b04:	8f 5f       	subi	r24, 0xFF	; 255
    1b06:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <brojac_prekida_tajmera0_za100ms_VAkWh>
		
	if(brojac_prekida_tajmera0 == 100)	//1ms * 50 = 50ms  !!!brojac je 8-bit znaci ide do max 255 LOLOOLOLOLO
    1b0a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <brojac_prekida_tajmera0>
    1b0e:	84 36       	cpi	r24, 0x64	; 100
    1b10:	29 f4       	brne	.+10     	; 0x1b1c <__vector_14+0x72>
	{
		brojac_prekida_tajmera0 = 0;
    1b12:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <brojac_prekida_tajmera0>
		flag_prekid_50ms = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <flag_prekid_50ms>
	}
	
	if(brojac_prekida_tajmera0_debounce_half == DEBOUNCE_TIME_half)	//3ms
    1b1c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	29 f4       	brne	.+10     	; 0x1b2e <__vector_14+0x84>
	{
		brojac_prekida_tajmera0_debounce_half = 0;
    1b24:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <brojac_prekida_tajmera0_debounce_half>
		flag_prekid_debounce_time_half = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <flag_prekid_debounce_time_half>
	}
	
	
	if(brojac_prekida_tajmera0_debounce == DEBOUNCE_TIME)	//1ms * 6 = 6ms
    1b2e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
    1b32:	86 30       	cpi	r24, 0x06	; 6
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <__vector_14+0x96>
	{
		brojac_prekida_tajmera0_debounce = 0;
    1b36:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <brojac_prekida_tajmera0_debounce>
		flag_prekid_debounce_time = 1;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <flag_prekid_debounce_time>
	}
	
	if(brojac_prekida_tajmera0_za100ms_VAkWh == 100)
    1b40:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <brojac_prekida_tajmera0_za100ms_VAkWh>
    1b44:	84 36       	cpi	r24, 0x64	; 100
    1b46:	19 f4       	brne	.+6      	; 0x1b4e <__vector_14+0xa4>
	{
		flag_prekid_100ms_VAkWh = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <flag_prekid_100ms_VAkWh>
	}
	
    1b4e:	9f 91       	pop	r25
    1b50:	8f 91       	pop	r24
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	0f 90       	pop	r0
    1b58:	1f 90       	pop	r1
    1b5a:	18 95       	reti

00001b5c <__vector_20>:
volatile unsigned char poslato;
volatile unsigned char input_char;
volatile unsigned char input_buffer[INPUT_BUFF_SIZE], buff_size=0;

ISR(USART_TX_vect)
{
    1b5c:	1f 92       	push	r1
    1b5e:	0f 92       	push	r0
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	0f 92       	push	r0
    1b64:	11 24       	eor	r1, r1
	poslato=0;
    1b66:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <poslato>
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	0f 90       	pop	r0
    1b70:	1f 90       	pop	r1
    1b72:	18 95       	reti

00001b74 <__vector_18>:

ISR(USART_RX_vect)
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	8f 93       	push	r24
    1b80:	ef 93       	push	r30
    1b82:	ff 93       	push	r31
	input_char=UDR0;
    1b84:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b88:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <input_char>
	
	if (buff_size<INPUT_BUFF_SIZE)
    1b8c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <buff_size>
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	98 f4       	brcc	.+38     	; 0x1bba <__vector_18+0x46>
	{
		input_buffer[buff_size]=input_char;
    1b94:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <buff_size>
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <input_char>
    1b9e:	e5 5b       	subi	r30, 0xB5	; 181
    1ba0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ba2:	80 83       	st	Z, r24
		buff_size++;
    1ba4:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <buff_size>
    1ba8:	8f 5f       	subi	r24, 0xFF	; 255
    1baa:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <buff_size>
		input_buffer[buff_size]='\0';
    1bae:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <buff_size>
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	e5 5b       	subi	r30, 0xB5	; 181
    1bb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb8:	10 82       	st	Z, r1
	}
}
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	8f 91       	pop	r24
    1bc0:	0f 90       	pop	r0
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	0f 90       	pop	r0
    1bc6:	1f 90       	pop	r1
    1bc8:	18 95       	reti

00001bca <uart_init>:

void uart_init(uint32_t baud_rate)
{
	UCSR0A = 0b10;			//dupla brzina slanja
    1bca:	22 e0       	ldi	r18, 0x02	; 2
    1bcc:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0b11011000;	//RX complete interupt enable; TX complete interupt enable; Receiver enable; Transmitter enable
    1bd0:	28 ed       	ldi	r18, 0xD8	; 216
    1bd2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0b110;			//asinhroni rezim, 8-bit, no parity, 1 stop bit
    1bd6:	26 e0       	ldi	r18, 0x06	; 6
    1bd8:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	

	switch(baud_rate)
    1bdc:	61 15       	cp	r22, r1
    1bde:	2c e2       	ldi	r18, 0x2C	; 44
    1be0:	72 07       	cpc	r23, r18
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	82 07       	cpc	r24, r18
    1be6:	91 05       	cpc	r25, r1
    1be8:	09 f4       	brne	.+2      	; 0x1bec <uart_init+0x22>
    1bea:	51 c0       	rjmp	.+162    	; 0x1c8e <uart_init+0xc4>
    1bec:	c8 f4       	brcc	.+50     	; 0x1c20 <uart_init+0x56>
    1bee:	60 34       	cpi	r22, 0x40	; 64
    1bf0:	28 e3       	ldi	r18, 0x38	; 56
    1bf2:	72 07       	cpc	r23, r18
    1bf4:	81 05       	cpc	r24, r1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	a9 f1       	breq	.+106    	; 0x1c64 <uart_init+0x9a>
    1bfa:	30 f4       	brcc	.+12     	; 0x1c08 <uart_init+0x3e>
    1bfc:	60 38       	cpi	r22, 0x80	; 128
    1bfe:	75 42       	sbci	r23, 0x25	; 37
    1c00:	81 05       	cpc	r24, r1
    1c02:	91 05       	cpc	r25, r1
    1c04:	41 f1       	breq	.+80     	; 0x1c56 <uart_init+0x8c>
    1c06:	64 c0       	rjmp	.+200    	; 0x1cd0 <uart_init+0x106>
    1c08:	61 15       	cp	r22, r1
    1c0a:	2b e4       	ldi	r18, 0x4B	; 75
    1c0c:	72 07       	cpc	r23, r18
    1c0e:	81 05       	cpc	r24, r1
    1c10:	91 05       	cpc	r25, r1
    1c12:	79 f1       	breq	.+94     	; 0x1c72 <uart_init+0xa8>
    1c14:	61 15       	cp	r22, r1
    1c16:	76 49       	sbci	r23, 0x96	; 150
    1c18:	81 05       	cpc	r24, r1
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	89 f1       	breq	.+98     	; 0x1c80 <uart_init+0xb6>
    1c1e:	58 c0       	rjmp	.+176    	; 0x1cd0 <uart_init+0x106>
    1c20:	60 32       	cpi	r22, 0x20	; 32
    1c22:	21 ea       	ldi	r18, 0xA1	; 161
    1c24:	72 07       	cpc	r23, r18
    1c26:	27 e0       	ldi	r18, 0x07	; 7
    1c28:	82 07       	cpc	r24, r18
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	f1 f1       	breq	.+124    	; 0x1caa <uart_init+0xe0>
    1c2e:	30 f4       	brcc	.+12     	; 0x1c3c <uart_init+0x72>
    1c30:	60 39       	cpi	r22, 0x90	; 144
    1c32:	70 4d       	sbci	r23, 0xD0	; 208
    1c34:	83 40       	sbci	r24, 0x03	; 3
    1c36:	91 05       	cpc	r25, r1
    1c38:	89 f1       	breq	.+98     	; 0x1c9c <uart_init+0xd2>
    1c3a:	4a c0       	rjmp	.+148    	; 0x1cd0 <uart_init+0x106>
    1c3c:	60 34       	cpi	r22, 0x40	; 64
    1c3e:	22 e4       	ldi	r18, 0x42	; 66
    1c40:	72 07       	cpc	r23, r18
    1c42:	2f e0       	ldi	r18, 0x0F	; 15
    1c44:	82 07       	cpc	r24, r18
    1c46:	91 05       	cpc	r25, r1
    1c48:	b9 f1       	breq	.+110    	; 0x1cb8 <uart_init+0xee>
    1c4a:	60 38       	cpi	r22, 0x80	; 128
    1c4c:	74 48       	sbci	r23, 0x84	; 132
    1c4e:	8e 41       	sbci	r24, 0x1E	; 30
    1c50:	91 05       	cpc	r25, r1
    1c52:	c9 f1       	breq	.+114    	; 0x1cc6 <uart_init+0xfc>
    1c54:	3d c0       	rjmp	.+122    	; 0x1cd0 <uart_init+0x106>
	{
		/*za U2Xn=1 tj. za 2x podesenu brzinu slanja */
		case 9600:	  UBRR0 = 207; break;	//error = 0.2%
    1c56:	8f ec       	ldi	r24, 0xCF	; 207
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c5e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c62:	08 95       	ret
		case 14400:   UBRR0 = 138; break;	//error = -0.1%
    1c64:	8a e8       	ldi	r24, 0x8A	; 138
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c70:	08 95       	ret
		case 19200:   UBRR0 = 103; break;	//error = 0.2%
    1c72:	87 e6       	ldi	r24, 0x67	; 103
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c7a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c7e:	08 95       	ret
		case 38400:   UBRR0 = 51;  break;	//error = 0.2%
    1c80:	83 e3       	ldi	r24, 0x33	; 51
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c8c:	08 95       	ret
		case 76800:	  UBRR0 = 25;  break;	//error = 0.2%
    1c8e:	89 e1       	ldi	r24, 0x19	; 25
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1c9a:	08 95       	ret
		case 250000:  UBRR0 = 7;   break;	//error = 0%
    1c9c:	87 e0       	ldi	r24, 0x07	; 7
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1ca4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1ca8:	08 95       	ret
		case 500000:  UBRR0 = 3;   break;	//error = 0%
    1caa:	83 e0       	ldi	r24, 0x03	; 3
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1cb2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1cb6:	08 95       	ret
		case 1000000: UBRR0 = 1;   break;	//error = 0%
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1cc0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1cc4:	08 95       	ret
		case 2000000: UBRR0 = 0;   break;	//error = 0%
    1cc6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1cca:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1cce:	08 95       	ret
		default:
			UBRR0 = 207;					//baud 9600 ako nije pogodjen ni jedan case
    1cd0:	8f ec       	ldi	r24, 0xCF	; 207
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1cd8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1cdc:	08 95       	ret

00001cde <uart_send_str>:
	}
	
}

void uart_send_str(char *str)
{
    1cde:	fc 01       	movw	r30, r24
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1ce0:	90 81       	ld	r25, Z
    1ce2:	99 23       	and	r25, r25
    1ce4:	71 f0       	breq	.+28     	; 0x1d02 <uart_send_str+0x24>
    1ce6:	31 96       	adiw	r30, 0x01	; 1
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1ce8:	a6 ec       	ldi	r26, 0xC6	; 198
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1cec:	81 e0       	ldi	r24, 0x01	; 1
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
	{
		UDR0 = *str;		//salje karakter koji se nalazi na adresi na koju pokazuje str
    1cee:	9c 93       	st	X, r25
		poslato = 1;		//flag koji se resetuje u TX ISR-u
    1cf0:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <poslato>
		while (poslato);	//koci dok ISR ne kaze da je gotovo
    1cf4:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <poslato>
    1cf8:	91 11       	cpse	r25, r1
    1cfa:	fc cf       	rjmp	.-8      	; 0x1cf4 <uart_send_str+0x16>

void uart_send_str(char *str)
{
	//funkcija za slanje stringova
	
	while (*str!='\0')		//koci dok ne posalje ceo string
    1cfc:	91 91       	ld	r25, Z+
    1cfe:	91 11       	cpse	r25, r1
    1d00:	f6 cf       	rjmp	.-20     	; 0x1cee <uart_send_str+0x10>
    1d02:	08 95       	ret

00001d04 <__subsf3>:
    1d04:	50 58       	subi	r21, 0x80	; 128

00001d06 <__addsf3>:
    1d06:	bb 27       	eor	r27, r27
    1d08:	aa 27       	eor	r26, r26
    1d0a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3x>
    1d0e:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__fp_round>
    1d12:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__fp_pscA>
    1d16:	38 f0       	brcs	.+14     	; 0x1d26 <__addsf3+0x20>
    1d18:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__fp_pscB>
    1d1c:	20 f0       	brcs	.+8      	; 0x1d26 <__addsf3+0x20>
    1d1e:	39 f4       	brne	.+14     	; 0x1d2e <__addsf3+0x28>
    1d20:	9f 3f       	cpi	r25, 0xFF	; 255
    1d22:	19 f4       	brne	.+6      	; 0x1d2a <__addsf3+0x24>
    1d24:	26 f4       	brtc	.+8      	; 0x1d2e <__addsf3+0x28>
    1d26:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__fp_nan>
    1d2a:	0e f4       	brtc	.+2      	; 0x1d2e <__addsf3+0x28>
    1d2c:	e0 95       	com	r30
    1d2e:	e7 fb       	bst	r30, 7
    1d30:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_inf>

00001d34 <__addsf3x>:
    1d34:	e9 2f       	mov	r30, r25
    1d36:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fp_split3>
    1d3a:	58 f3       	brcs	.-42     	; 0x1d12 <__addsf3+0xc>
    1d3c:	ba 17       	cp	r27, r26
    1d3e:	62 07       	cpc	r22, r18
    1d40:	73 07       	cpc	r23, r19
    1d42:	84 07       	cpc	r24, r20
    1d44:	95 07       	cpc	r25, r21
    1d46:	20 f0       	brcs	.+8      	; 0x1d50 <__addsf3x+0x1c>
    1d48:	79 f4       	brne	.+30     	; 0x1d68 <__addsf3x+0x34>
    1d4a:	a6 f5       	brtc	.+104    	; 0x1db4 <__addsf3x+0x80>
    1d4c:	0c 94 17 10 	jmp	0x202e	; 0x202e <__fp_zero>
    1d50:	0e f4       	brtc	.+2      	; 0x1d54 <__addsf3x+0x20>
    1d52:	e0 95       	com	r30
    1d54:	0b 2e       	mov	r0, r27
    1d56:	ba 2f       	mov	r27, r26
    1d58:	a0 2d       	mov	r26, r0
    1d5a:	0b 01       	movw	r0, r22
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	90 01       	movw	r18, r0
    1d60:	0c 01       	movw	r0, r24
    1d62:	ca 01       	movw	r24, r20
    1d64:	a0 01       	movw	r20, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	ff 27       	eor	r31, r31
    1d6a:	59 1b       	sub	r21, r25
    1d6c:	99 f0       	breq	.+38     	; 0x1d94 <__addsf3x+0x60>
    1d6e:	59 3f       	cpi	r21, 0xF9	; 249
    1d70:	50 f4       	brcc	.+20     	; 0x1d86 <__addsf3x+0x52>
    1d72:	50 3e       	cpi	r21, 0xE0	; 224
    1d74:	68 f1       	brcs	.+90     	; 0x1dd0 <__addsf3x+0x9c>
    1d76:	1a 16       	cp	r1, r26
    1d78:	f0 40       	sbci	r31, 0x00	; 0
    1d7a:	a2 2f       	mov	r26, r18
    1d7c:	23 2f       	mov	r18, r19
    1d7e:	34 2f       	mov	r19, r20
    1d80:	44 27       	eor	r20, r20
    1d82:	58 5f       	subi	r21, 0xF8	; 248
    1d84:	f3 cf       	rjmp	.-26     	; 0x1d6c <__addsf3x+0x38>
    1d86:	46 95       	lsr	r20
    1d88:	37 95       	ror	r19
    1d8a:	27 95       	ror	r18
    1d8c:	a7 95       	ror	r26
    1d8e:	f0 40       	sbci	r31, 0x00	; 0
    1d90:	53 95       	inc	r21
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <__addsf3x+0x52>
    1d94:	7e f4       	brtc	.+30     	; 0x1db4 <__addsf3x+0x80>
    1d96:	1f 16       	cp	r1, r31
    1d98:	ba 0b       	sbc	r27, r26
    1d9a:	62 0b       	sbc	r22, r18
    1d9c:	73 0b       	sbc	r23, r19
    1d9e:	84 0b       	sbc	r24, r20
    1da0:	ba f0       	brmi	.+46     	; 0x1dd0 <__addsf3x+0x9c>
    1da2:	91 50       	subi	r25, 0x01	; 1
    1da4:	a1 f0       	breq	.+40     	; 0x1dce <__addsf3x+0x9a>
    1da6:	ff 0f       	add	r31, r31
    1da8:	bb 1f       	adc	r27, r27
    1daa:	66 1f       	adc	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	c2 f7       	brpl	.-16     	; 0x1da2 <__addsf3x+0x6e>
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <__addsf3x+0x9c>
    1db4:	ba 0f       	add	r27, r26
    1db6:	62 1f       	adc	r22, r18
    1db8:	73 1f       	adc	r23, r19
    1dba:	84 1f       	adc	r24, r20
    1dbc:	48 f4       	brcc	.+18     	; 0x1dd0 <__addsf3x+0x9c>
    1dbe:	87 95       	ror	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b7 95       	ror	r27
    1dc6:	f7 95       	ror	r31
    1dc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <__addsf3x+0x9a>
    1dcc:	b0 cf       	rjmp	.-160    	; 0x1d2e <__addsf3+0x28>
    1dce:	93 95       	inc	r25
    1dd0:	88 0f       	add	r24, r24
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <__addsf3x+0xa2>
    1dd4:	99 27       	eor	r25, r25
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	97 95       	ror	r25
    1dda:	87 95       	ror	r24
    1ddc:	08 95       	ret

00001dde <__divsf3>:
    1dde:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__divsf3x>
    1de2:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__fp_round>
    1de6:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__fp_pscB>
    1dea:	58 f0       	brcs	.+22     	; 0x1e02 <__divsf3+0x24>
    1dec:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__fp_pscA>
    1df0:	40 f0       	brcs	.+16     	; 0x1e02 <__divsf3+0x24>
    1df2:	29 f4       	brne	.+10     	; 0x1dfe <__divsf3+0x20>
    1df4:	5f 3f       	cpi	r21, 0xFF	; 255
    1df6:	29 f0       	breq	.+10     	; 0x1e02 <__divsf3+0x24>
    1df8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_inf>
    1dfc:	51 11       	cpse	r21, r1
    1dfe:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__fp_szero>
    1e02:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__fp_nan>

00001e06 <__divsf3x>:
    1e06:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fp_split3>
    1e0a:	68 f3       	brcs	.-38     	; 0x1de6 <__divsf3+0x8>

00001e0c <__divsf3_pse>:
    1e0c:	99 23       	and	r25, r25
    1e0e:	b1 f3       	breq	.-20     	; 0x1dfc <__divsf3+0x1e>
    1e10:	55 23       	and	r21, r21
    1e12:	91 f3       	breq	.-28     	; 0x1df8 <__divsf3+0x1a>
    1e14:	95 1b       	sub	r25, r21
    1e16:	55 0b       	sbc	r21, r21
    1e18:	bb 27       	eor	r27, r27
    1e1a:	aa 27       	eor	r26, r26
    1e1c:	62 17       	cp	r22, r18
    1e1e:	73 07       	cpc	r23, r19
    1e20:	84 07       	cpc	r24, r20
    1e22:	38 f0       	brcs	.+14     	; 0x1e32 <__divsf3_pse+0x26>
    1e24:	9f 5f       	subi	r25, 0xFF	; 255
    1e26:	5f 4f       	sbci	r21, 0xFF	; 255
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	44 1f       	adc	r20, r20
    1e2e:	aa 1f       	adc	r26, r26
    1e30:	a9 f3       	breq	.-22     	; 0x1e1c <__divsf3_pse+0x10>
    1e32:	35 d0       	rcall	.+106    	; 0x1e9e <__divsf3_pse+0x92>
    1e34:	0e 2e       	mov	r0, r30
    1e36:	3a f0       	brmi	.+14     	; 0x1e46 <__divsf3_pse+0x3a>
    1e38:	e0 e8       	ldi	r30, 0x80	; 128
    1e3a:	32 d0       	rcall	.+100    	; 0x1ea0 <__divsf3_pse+0x94>
    1e3c:	91 50       	subi	r25, 0x01	; 1
    1e3e:	50 40       	sbci	r21, 0x00	; 0
    1e40:	e6 95       	lsr	r30
    1e42:	00 1c       	adc	r0, r0
    1e44:	ca f7       	brpl	.-14     	; 0x1e38 <__divsf3_pse+0x2c>
    1e46:	2b d0       	rcall	.+86     	; 0x1e9e <__divsf3_pse+0x92>
    1e48:	fe 2f       	mov	r31, r30
    1e4a:	29 d0       	rcall	.+82     	; 0x1e9e <__divsf3_pse+0x92>
    1e4c:	66 0f       	add	r22, r22
    1e4e:	77 1f       	adc	r23, r23
    1e50:	88 1f       	adc	r24, r24
    1e52:	bb 1f       	adc	r27, r27
    1e54:	26 17       	cp	r18, r22
    1e56:	37 07       	cpc	r19, r23
    1e58:	48 07       	cpc	r20, r24
    1e5a:	ab 07       	cpc	r26, r27
    1e5c:	b0 e8       	ldi	r27, 0x80	; 128
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <__divsf3_pse+0x56>
    1e60:	bb 0b       	sbc	r27, r27
    1e62:	80 2d       	mov	r24, r0
    1e64:	bf 01       	movw	r22, r30
    1e66:	ff 27       	eor	r31, r31
    1e68:	93 58       	subi	r25, 0x83	; 131
    1e6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6c:	3a f0       	brmi	.+14     	; 0x1e7c <__divsf3_pse+0x70>
    1e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e70:	51 05       	cpc	r21, r1
    1e72:	78 f0       	brcs	.+30     	; 0x1e92 <__divsf3_pse+0x86>
    1e74:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_inf>
    1e78:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__fp_szero>
    1e7c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e7e:	e4 f3       	brlt	.-8      	; 0x1e78 <__divsf3_pse+0x6c>
    1e80:	98 3e       	cpi	r25, 0xE8	; 232
    1e82:	d4 f3       	brlt	.-12     	; 0x1e78 <__divsf3_pse+0x6c>
    1e84:	86 95       	lsr	r24
    1e86:	77 95       	ror	r23
    1e88:	67 95       	ror	r22
    1e8a:	b7 95       	ror	r27
    1e8c:	f7 95       	ror	r31
    1e8e:	9f 5f       	subi	r25, 0xFF	; 255
    1e90:	c9 f7       	brne	.-14     	; 0x1e84 <__divsf3_pse+0x78>
    1e92:	88 0f       	add	r24, r24
    1e94:	91 1d       	adc	r25, r1
    1e96:	96 95       	lsr	r25
    1e98:	87 95       	ror	r24
    1e9a:	97 f9       	bld	r25, 7
    1e9c:	08 95       	ret
    1e9e:	e1 e0       	ldi	r30, 0x01	; 1
    1ea0:	66 0f       	add	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	bb 1f       	adc	r27, r27
    1ea8:	62 17       	cp	r22, r18
    1eaa:	73 07       	cpc	r23, r19
    1eac:	84 07       	cpc	r24, r20
    1eae:	ba 07       	cpc	r27, r26
    1eb0:	20 f0       	brcs	.+8      	; 0x1eba <__divsf3_pse+0xae>
    1eb2:	62 1b       	sub	r22, r18
    1eb4:	73 0b       	sbc	r23, r19
    1eb6:	84 0b       	sbc	r24, r20
    1eb8:	ba 0b       	sbc	r27, r26
    1eba:	ee 1f       	adc	r30, r30
    1ebc:	88 f7       	brcc	.-30     	; 0x1ea0 <__divsf3_pse+0x94>
    1ebe:	e0 95       	com	r30
    1ec0:	08 95       	ret

00001ec2 <__fixunssfsi>:
    1ec2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fp_splitA>
    1ec6:	88 f0       	brcs	.+34     	; 0x1eea <__fixunssfsi+0x28>
    1ec8:	9f 57       	subi	r25, 0x7F	; 127
    1eca:	98 f0       	brcs	.+38     	; 0x1ef2 <__fixunssfsi+0x30>
    1ecc:	b9 2f       	mov	r27, r25
    1ece:	99 27       	eor	r25, r25
    1ed0:	b7 51       	subi	r27, 0x17	; 23
    1ed2:	b0 f0       	brcs	.+44     	; 0x1f00 <__fixunssfsi+0x3e>
    1ed4:	e1 f0       	breq	.+56     	; 0x1f0e <__fixunssfsi+0x4c>
    1ed6:	66 0f       	add	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	1a f0       	brmi	.+6      	; 0x1ee6 <__fixunssfsi+0x24>
    1ee0:	ba 95       	dec	r27
    1ee2:	c9 f7       	brne	.-14     	; 0x1ed6 <__fixunssfsi+0x14>
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <__fixunssfsi+0x4c>
    1ee6:	b1 30       	cpi	r27, 0x01	; 1
    1ee8:	91 f0       	breq	.+36     	; 0x1f0e <__fixunssfsi+0x4c>
    1eea:	0e 94 17 10 	call	0x202e	; 0x202e <__fp_zero>
    1eee:	b1 e0       	ldi	r27, 0x01	; 1
    1ef0:	08 95       	ret
    1ef2:	0c 94 17 10 	jmp	0x202e	; 0x202e <__fp_zero>
    1ef6:	67 2f       	mov	r22, r23
    1ef8:	78 2f       	mov	r23, r24
    1efa:	88 27       	eor	r24, r24
    1efc:	b8 5f       	subi	r27, 0xF8	; 248
    1efe:	39 f0       	breq	.+14     	; 0x1f0e <__fixunssfsi+0x4c>
    1f00:	b9 3f       	cpi	r27, 0xF9	; 249
    1f02:	cc f3       	brlt	.-14     	; 0x1ef6 <__fixunssfsi+0x34>
    1f04:	86 95       	lsr	r24
    1f06:	77 95       	ror	r23
    1f08:	67 95       	ror	r22
    1f0a:	b3 95       	inc	r27
    1f0c:	d9 f7       	brne	.-10     	; 0x1f04 <__fixunssfsi+0x42>
    1f0e:	3e f4       	brtc	.+14     	; 0x1f1e <__fixunssfsi+0x5c>
    1f10:	90 95       	com	r25
    1f12:	80 95       	com	r24
    1f14:	70 95       	com	r23
    1f16:	61 95       	neg	r22
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f1e:	08 95       	ret

00001f20 <__floatunsisf>:
    1f20:	e8 94       	clt
    1f22:	09 c0       	rjmp	.+18     	; 0x1f36 <__floatsisf+0x12>

00001f24 <__floatsisf>:
    1f24:	97 fb       	bst	r25, 7
    1f26:	3e f4       	brtc	.+14     	; 0x1f36 <__floatsisf+0x12>
    1f28:	90 95       	com	r25
    1f2a:	80 95       	com	r24
    1f2c:	70 95       	com	r23
    1f2e:	61 95       	neg	r22
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	99 23       	and	r25, r25
    1f38:	a9 f0       	breq	.+42     	; 0x1f64 <__floatsisf+0x40>
    1f3a:	f9 2f       	mov	r31, r25
    1f3c:	96 e9       	ldi	r25, 0x96	; 150
    1f3e:	bb 27       	eor	r27, r27
    1f40:	93 95       	inc	r25
    1f42:	f6 95       	lsr	r31
    1f44:	87 95       	ror	r24
    1f46:	77 95       	ror	r23
    1f48:	67 95       	ror	r22
    1f4a:	b7 95       	ror	r27
    1f4c:	f1 11       	cpse	r31, r1
    1f4e:	f8 cf       	rjmp	.-16     	; 0x1f40 <__floatsisf+0x1c>
    1f50:	fa f4       	brpl	.+62     	; 0x1f90 <__floatsisf+0x6c>
    1f52:	bb 0f       	add	r27, r27
    1f54:	11 f4       	brne	.+4      	; 0x1f5a <__floatsisf+0x36>
    1f56:	60 ff       	sbrs	r22, 0
    1f58:	1b c0       	rjmp	.+54     	; 0x1f90 <__floatsisf+0x6c>
    1f5a:	6f 5f       	subi	r22, 0xFF	; 255
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	16 c0       	rjmp	.+44     	; 0x1f90 <__floatsisf+0x6c>
    1f64:	88 23       	and	r24, r24
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <__floatsisf+0x48>
    1f68:	96 e9       	ldi	r25, 0x96	; 150
    1f6a:	11 c0       	rjmp	.+34     	; 0x1f8e <__floatsisf+0x6a>
    1f6c:	77 23       	and	r23, r23
    1f6e:	21 f0       	breq	.+8      	; 0x1f78 <__floatsisf+0x54>
    1f70:	9e e8       	ldi	r25, 0x8E	; 142
    1f72:	87 2f       	mov	r24, r23
    1f74:	76 2f       	mov	r23, r22
    1f76:	05 c0       	rjmp	.+10     	; 0x1f82 <__floatsisf+0x5e>
    1f78:	66 23       	and	r22, r22
    1f7a:	71 f0       	breq	.+28     	; 0x1f98 <__floatsisf+0x74>
    1f7c:	96 e8       	ldi	r25, 0x86	; 134
    1f7e:	86 2f       	mov	r24, r22
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	60 e0       	ldi	r22, 0x00	; 0
    1f84:	2a f0       	brmi	.+10     	; 0x1f90 <__floatsisf+0x6c>
    1f86:	9a 95       	dec	r25
    1f88:	66 0f       	add	r22, r22
    1f8a:	77 1f       	adc	r23, r23
    1f8c:	88 1f       	adc	r24, r24
    1f8e:	da f7       	brpl	.-10     	; 0x1f86 <__floatsisf+0x62>
    1f90:	88 0f       	add	r24, r24
    1f92:	96 95       	lsr	r25
    1f94:	87 95       	ror	r24
    1f96:	97 f9       	bld	r25, 7
    1f98:	08 95       	ret

00001f9a <__fp_inf>:
    1f9a:	97 f9       	bld	r25, 7
    1f9c:	9f 67       	ori	r25, 0x7F	; 127
    1f9e:	80 e8       	ldi	r24, 0x80	; 128
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	08 95       	ret

00001fa6 <__fp_nan>:
    1fa6:	9f ef       	ldi	r25, 0xFF	; 255
    1fa8:	80 ec       	ldi	r24, 0xC0	; 192
    1faa:	08 95       	ret

00001fac <__fp_pscA>:
    1fac:	00 24       	eor	r0, r0
    1fae:	0a 94       	dec	r0
    1fb0:	16 16       	cp	r1, r22
    1fb2:	17 06       	cpc	r1, r23
    1fb4:	18 06       	cpc	r1, r24
    1fb6:	09 06       	cpc	r0, r25
    1fb8:	08 95       	ret

00001fba <__fp_pscB>:
    1fba:	00 24       	eor	r0, r0
    1fbc:	0a 94       	dec	r0
    1fbe:	12 16       	cp	r1, r18
    1fc0:	13 06       	cpc	r1, r19
    1fc2:	14 06       	cpc	r1, r20
    1fc4:	05 06       	cpc	r0, r21
    1fc6:	08 95       	ret

00001fc8 <__fp_round>:
    1fc8:	09 2e       	mov	r0, r25
    1fca:	03 94       	inc	r0
    1fcc:	00 0c       	add	r0, r0
    1fce:	11 f4       	brne	.+4      	; 0x1fd4 <__fp_round+0xc>
    1fd0:	88 23       	and	r24, r24
    1fd2:	52 f0       	brmi	.+20     	; 0x1fe8 <__fp_round+0x20>
    1fd4:	bb 0f       	add	r27, r27
    1fd6:	40 f4       	brcc	.+16     	; 0x1fe8 <__fp_round+0x20>
    1fd8:	bf 2b       	or	r27, r31
    1fda:	11 f4       	brne	.+4      	; 0x1fe0 <__fp_round+0x18>
    1fdc:	60 ff       	sbrs	r22, 0
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <__fp_round+0x20>
    1fe0:	6f 5f       	subi	r22, 0xFF	; 255
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	08 95       	ret

00001fea <__fp_split3>:
    1fea:	57 fd       	sbrc	r21, 7
    1fec:	90 58       	subi	r25, 0x80	; 128
    1fee:	44 0f       	add	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	59 f0       	breq	.+22     	; 0x200a <__fp_splitA+0x10>
    1ff4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ff6:	71 f0       	breq	.+28     	; 0x2014 <__fp_splitA+0x1a>
    1ff8:	47 95       	ror	r20

00001ffa <__fp_splitA>:
    1ffa:	88 0f       	add	r24, r24
    1ffc:	97 fb       	bst	r25, 7
    1ffe:	99 1f       	adc	r25, r25
    2000:	61 f0       	breq	.+24     	; 0x201a <__fp_splitA+0x20>
    2002:	9f 3f       	cpi	r25, 0xFF	; 255
    2004:	79 f0       	breq	.+30     	; 0x2024 <__fp_splitA+0x2a>
    2006:	87 95       	ror	r24
    2008:	08 95       	ret
    200a:	12 16       	cp	r1, r18
    200c:	13 06       	cpc	r1, r19
    200e:	14 06       	cpc	r1, r20
    2010:	55 1f       	adc	r21, r21
    2012:	f2 cf       	rjmp	.-28     	; 0x1ff8 <__fp_split3+0xe>
    2014:	46 95       	lsr	r20
    2016:	f1 df       	rcall	.-30     	; 0x1ffa <__fp_splitA>
    2018:	08 c0       	rjmp	.+16     	; 0x202a <__fp_splitA+0x30>
    201a:	16 16       	cp	r1, r22
    201c:	17 06       	cpc	r1, r23
    201e:	18 06       	cpc	r1, r24
    2020:	99 1f       	adc	r25, r25
    2022:	f1 cf       	rjmp	.-30     	; 0x2006 <__fp_splitA+0xc>
    2024:	86 95       	lsr	r24
    2026:	71 05       	cpc	r23, r1
    2028:	61 05       	cpc	r22, r1
    202a:	08 94       	sec
    202c:	08 95       	ret

0000202e <__fp_zero>:
    202e:	e8 94       	clt

00002030 <__fp_szero>:
    2030:	bb 27       	eor	r27, r27
    2032:	66 27       	eor	r22, r22
    2034:	77 27       	eor	r23, r23
    2036:	cb 01       	movw	r24, r22
    2038:	97 f9       	bld	r25, 7
    203a:	08 95       	ret

0000203c <__mulsf3>:
    203c:	0e 94 31 10 	call	0x2062	; 0x2062 <__mulsf3x>
    2040:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__fp_round>
    2044:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__fp_pscA>
    2048:	38 f0       	brcs	.+14     	; 0x2058 <__mulsf3+0x1c>
    204a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__fp_pscB>
    204e:	20 f0       	brcs	.+8      	; 0x2058 <__mulsf3+0x1c>
    2050:	95 23       	and	r25, r21
    2052:	11 f0       	breq	.+4      	; 0x2058 <__mulsf3+0x1c>
    2054:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_inf>
    2058:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__fp_nan>
    205c:	11 24       	eor	r1, r1
    205e:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__fp_szero>

00002062 <__mulsf3x>:
    2062:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <__fp_split3>
    2066:	70 f3       	brcs	.-36     	; 0x2044 <__mulsf3+0x8>

00002068 <__mulsf3_pse>:
    2068:	95 9f       	mul	r25, r21
    206a:	c1 f3       	breq	.-16     	; 0x205c <__mulsf3+0x20>
    206c:	95 0f       	add	r25, r21
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	55 1f       	adc	r21, r21
    2072:	62 9f       	mul	r22, r18
    2074:	f0 01       	movw	r30, r0
    2076:	72 9f       	mul	r23, r18
    2078:	bb 27       	eor	r27, r27
    207a:	f0 0d       	add	r31, r0
    207c:	b1 1d       	adc	r27, r1
    207e:	63 9f       	mul	r22, r19
    2080:	aa 27       	eor	r26, r26
    2082:	f0 0d       	add	r31, r0
    2084:	b1 1d       	adc	r27, r1
    2086:	aa 1f       	adc	r26, r26
    2088:	64 9f       	mul	r22, r20
    208a:	66 27       	eor	r22, r22
    208c:	b0 0d       	add	r27, r0
    208e:	a1 1d       	adc	r26, r1
    2090:	66 1f       	adc	r22, r22
    2092:	82 9f       	mul	r24, r18
    2094:	22 27       	eor	r18, r18
    2096:	b0 0d       	add	r27, r0
    2098:	a1 1d       	adc	r26, r1
    209a:	62 1f       	adc	r22, r18
    209c:	73 9f       	mul	r23, r19
    209e:	b0 0d       	add	r27, r0
    20a0:	a1 1d       	adc	r26, r1
    20a2:	62 1f       	adc	r22, r18
    20a4:	83 9f       	mul	r24, r19
    20a6:	a0 0d       	add	r26, r0
    20a8:	61 1d       	adc	r22, r1
    20aa:	22 1f       	adc	r18, r18
    20ac:	74 9f       	mul	r23, r20
    20ae:	33 27       	eor	r19, r19
    20b0:	a0 0d       	add	r26, r0
    20b2:	61 1d       	adc	r22, r1
    20b4:	23 1f       	adc	r18, r19
    20b6:	84 9f       	mul	r24, r20
    20b8:	60 0d       	add	r22, r0
    20ba:	21 1d       	adc	r18, r1
    20bc:	82 2f       	mov	r24, r18
    20be:	76 2f       	mov	r23, r22
    20c0:	6a 2f       	mov	r22, r26
    20c2:	11 24       	eor	r1, r1
    20c4:	9f 57       	subi	r25, 0x7F	; 127
    20c6:	50 40       	sbci	r21, 0x00	; 0
    20c8:	9a f0       	brmi	.+38     	; 0x20f0 <__mulsf3_pse+0x88>
    20ca:	f1 f0       	breq	.+60     	; 0x2108 <__mulsf3_pse+0xa0>
    20cc:	88 23       	and	r24, r24
    20ce:	4a f0       	brmi	.+18     	; 0x20e2 <__mulsf3_pse+0x7a>
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	bb 1f       	adc	r27, r27
    20d6:	66 1f       	adc	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	91 50       	subi	r25, 0x01	; 1
    20de:	50 40       	sbci	r21, 0x00	; 0
    20e0:	a9 f7       	brne	.-22     	; 0x20cc <__mulsf3_pse+0x64>
    20e2:	9e 3f       	cpi	r25, 0xFE	; 254
    20e4:	51 05       	cpc	r21, r1
    20e6:	80 f0       	brcs	.+32     	; 0x2108 <__mulsf3_pse+0xa0>
    20e8:	0c 94 cd 0f 	jmp	0x1f9a	; 0x1f9a <__fp_inf>
    20ec:	0c 94 18 10 	jmp	0x2030	; 0x2030 <__fp_szero>
    20f0:	5f 3f       	cpi	r21, 0xFF	; 255
    20f2:	e4 f3       	brlt	.-8      	; 0x20ec <__mulsf3_pse+0x84>
    20f4:	98 3e       	cpi	r25, 0xE8	; 232
    20f6:	d4 f3       	brlt	.-12     	; 0x20ec <__mulsf3_pse+0x84>
    20f8:	86 95       	lsr	r24
    20fa:	77 95       	ror	r23
    20fc:	67 95       	ror	r22
    20fe:	b7 95       	ror	r27
    2100:	f7 95       	ror	r31
    2102:	e7 95       	ror	r30
    2104:	9f 5f       	subi	r25, 0xFF	; 255
    2106:	c1 f7       	brne	.-16     	; 0x20f8 <__mulsf3_pse+0x90>
    2108:	fe 2b       	or	r31, r30
    210a:	88 0f       	add	r24, r24
    210c:	91 1d       	adc	r25, r1
    210e:	96 95       	lsr	r25
    2110:	87 95       	ror	r24
    2112:	97 f9       	bld	r25, 7
    2114:	08 95       	ret

00002116 <__tablejump2__>:
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	05 90       	lpm	r0, Z+
    211c:	f4 91       	lpm	r31, Z
    211e:	e0 2d       	mov	r30, r0
    2120:	09 94       	ijmp

00002122 <dtostrf>:
    2122:	ef 92       	push	r14
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	e8 01       	movw	r28, r16
    212e:	47 fd       	sbrc	r20, 7
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <dtostrf+0x14>
    2132:	34 e0       	ldi	r19, 0x04	; 4
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <dtostrf+0x16>
    2136:	34 e1       	ldi	r19, 0x14	; 20
    2138:	04 2e       	mov	r0, r20
    213a:	00 0c       	add	r0, r0
    213c:	55 0b       	sbc	r21, r21
    213e:	57 ff       	sbrs	r21, 7
    2140:	03 c0       	rjmp	.+6      	; 0x2148 <dtostrf+0x26>
    2142:	51 95       	neg	r21
    2144:	41 95       	neg	r20
    2146:	51 09       	sbc	r21, r1
    2148:	e3 2e       	mov	r14, r19
    214a:	02 2f       	mov	r16, r18
    214c:	24 2f       	mov	r18, r20
    214e:	ae 01       	movw	r20, r28
    2150:	0e 94 b4 12 	call	0x2568	; 0x2568 <dtoa_prf>
    2154:	ce 01       	movw	r24, r28
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ef 90       	pop	r14
    2160:	08 95       	ret

00002162 <sprintf>:
    2162:	ae e0       	ldi	r26, 0x0E	; 14
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e7 eb       	ldi	r30, 0xB7	; 183
    2168:	f0 e1       	ldi	r31, 0x10	; 16
    216a:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x1c>
    216e:	0d 89       	ldd	r16, Y+21	; 0x15
    2170:	1e 89       	ldd	r17, Y+22	; 0x16
    2172:	86 e0       	ldi	r24, 0x06	; 6
    2174:	8c 83       	std	Y+4, r24	; 0x04
    2176:	1a 83       	std	Y+2, r17	; 0x02
    2178:	09 83       	std	Y+1, r16	; 0x01
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	9f e7       	ldi	r25, 0x7F	; 127
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	ae 01       	movw	r20, r28
    2184:	47 5e       	subi	r20, 0xE7	; 231
    2186:	5f 4f       	sbci	r21, 0xFF	; 255
    2188:	6f 89       	ldd	r22, Y+23	; 0x17
    218a:	78 8d       	ldd	r23, Y+24	; 0x18
    218c:	ce 01       	movw	r24, r28
    218e:	01 96       	adiw	r24, 0x01	; 1
    2190:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <vfprintf>
    2194:	ef 81       	ldd	r30, Y+7	; 0x07
    2196:	f8 85       	ldd	r31, Y+8	; 0x08
    2198:	e0 0f       	add	r30, r16
    219a:	f1 1f       	adc	r31, r17
    219c:	10 82       	st	Z, r1
    219e:	2e 96       	adiw	r28, 0x0e	; 14
    21a0:	e4 e0       	ldi	r30, 0x04	; 4
    21a2:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x1c>

000021a6 <vfprintf>:
    21a6:	ab e0       	ldi	r26, 0x0B	; 11
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e9 ed       	ldi	r30, 0xD9	; 217
    21ac:	f0 e1       	ldi	r31, 0x10	; 16
    21ae:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__prologue_saves__>
    21b2:	6c 01       	movw	r12, r24
    21b4:	7b 01       	movw	r14, r22
    21b6:	8a 01       	movw	r16, r20
    21b8:	fc 01       	movw	r30, r24
    21ba:	17 82       	std	Z+7, r1	; 0x07
    21bc:	16 82       	std	Z+6, r1	; 0x06
    21be:	83 81       	ldd	r24, Z+3	; 0x03
    21c0:	81 ff       	sbrs	r24, 1
    21c2:	cc c1       	rjmp	.+920    	; 0x255c <vfprintf+0x3b6>
    21c4:	ce 01       	movw	r24, r28
    21c6:	01 96       	adiw	r24, 0x01	; 1
    21c8:	3c 01       	movw	r6, r24
    21ca:	f6 01       	movw	r30, r12
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	f7 01       	movw	r30, r14
    21d0:	93 fd       	sbrc	r25, 3
    21d2:	85 91       	lpm	r24, Z+
    21d4:	93 ff       	sbrs	r25, 3
    21d6:	81 91       	ld	r24, Z+
    21d8:	7f 01       	movw	r14, r30
    21da:	88 23       	and	r24, r24
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <vfprintf+0x3a>
    21de:	ba c1       	rjmp	.+884    	; 0x2554 <vfprintf+0x3ae>
    21e0:	85 32       	cpi	r24, 0x25	; 37
    21e2:	39 f4       	brne	.+14     	; 0x21f2 <vfprintf+0x4c>
    21e4:	93 fd       	sbrc	r25, 3
    21e6:	85 91       	lpm	r24, Z+
    21e8:	93 ff       	sbrs	r25, 3
    21ea:	81 91       	ld	r24, Z+
    21ec:	7f 01       	movw	r14, r30
    21ee:	85 32       	cpi	r24, 0x25	; 37
    21f0:	29 f4       	brne	.+10     	; 0x21fc <vfprintf+0x56>
    21f2:	b6 01       	movw	r22, r12
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    21fa:	e7 cf       	rjmp	.-50     	; 0x21ca <vfprintf+0x24>
    21fc:	91 2c       	mov	r9, r1
    21fe:	21 2c       	mov	r2, r1
    2200:	31 2c       	mov	r3, r1
    2202:	ff e1       	ldi	r31, 0x1F	; 31
    2204:	f3 15       	cp	r31, r3
    2206:	d8 f0       	brcs	.+54     	; 0x223e <vfprintf+0x98>
    2208:	8b 32       	cpi	r24, 0x2B	; 43
    220a:	79 f0       	breq	.+30     	; 0x222a <vfprintf+0x84>
    220c:	38 f4       	brcc	.+14     	; 0x221c <vfprintf+0x76>
    220e:	80 32       	cpi	r24, 0x20	; 32
    2210:	79 f0       	breq	.+30     	; 0x2230 <vfprintf+0x8a>
    2212:	83 32       	cpi	r24, 0x23	; 35
    2214:	a1 f4       	brne	.+40     	; 0x223e <vfprintf+0x98>
    2216:	23 2d       	mov	r18, r3
    2218:	20 61       	ori	r18, 0x10	; 16
    221a:	1d c0       	rjmp	.+58     	; 0x2256 <vfprintf+0xb0>
    221c:	8d 32       	cpi	r24, 0x2D	; 45
    221e:	61 f0       	breq	.+24     	; 0x2238 <vfprintf+0x92>
    2220:	80 33       	cpi	r24, 0x30	; 48
    2222:	69 f4       	brne	.+26     	; 0x223e <vfprintf+0x98>
    2224:	23 2d       	mov	r18, r3
    2226:	21 60       	ori	r18, 0x01	; 1
    2228:	16 c0       	rjmp	.+44     	; 0x2256 <vfprintf+0xb0>
    222a:	83 2d       	mov	r24, r3
    222c:	82 60       	ori	r24, 0x02	; 2
    222e:	38 2e       	mov	r3, r24
    2230:	e3 2d       	mov	r30, r3
    2232:	e4 60       	ori	r30, 0x04	; 4
    2234:	3e 2e       	mov	r3, r30
    2236:	2a c0       	rjmp	.+84     	; 0x228c <vfprintf+0xe6>
    2238:	f3 2d       	mov	r31, r3
    223a:	f8 60       	ori	r31, 0x08	; 8
    223c:	1d c0       	rjmp	.+58     	; 0x2278 <vfprintf+0xd2>
    223e:	37 fc       	sbrc	r3, 7
    2240:	2d c0       	rjmp	.+90     	; 0x229c <vfprintf+0xf6>
    2242:	20 ed       	ldi	r18, 0xD0	; 208
    2244:	28 0f       	add	r18, r24
    2246:	2a 30       	cpi	r18, 0x0A	; 10
    2248:	40 f0       	brcs	.+16     	; 0x225a <vfprintf+0xb4>
    224a:	8e 32       	cpi	r24, 0x2E	; 46
    224c:	b9 f4       	brne	.+46     	; 0x227c <vfprintf+0xd6>
    224e:	36 fc       	sbrc	r3, 6
    2250:	81 c1       	rjmp	.+770    	; 0x2554 <vfprintf+0x3ae>
    2252:	23 2d       	mov	r18, r3
    2254:	20 64       	ori	r18, 0x40	; 64
    2256:	32 2e       	mov	r3, r18
    2258:	19 c0       	rjmp	.+50     	; 0x228c <vfprintf+0xe6>
    225a:	36 fe       	sbrs	r3, 6
    225c:	06 c0       	rjmp	.+12     	; 0x226a <vfprintf+0xc4>
    225e:	8a e0       	ldi	r24, 0x0A	; 10
    2260:	98 9e       	mul	r9, r24
    2262:	20 0d       	add	r18, r0
    2264:	11 24       	eor	r1, r1
    2266:	92 2e       	mov	r9, r18
    2268:	11 c0       	rjmp	.+34     	; 0x228c <vfprintf+0xe6>
    226a:	ea e0       	ldi	r30, 0x0A	; 10
    226c:	2e 9e       	mul	r2, r30
    226e:	20 0d       	add	r18, r0
    2270:	11 24       	eor	r1, r1
    2272:	22 2e       	mov	r2, r18
    2274:	f3 2d       	mov	r31, r3
    2276:	f0 62       	ori	r31, 0x20	; 32
    2278:	3f 2e       	mov	r3, r31
    227a:	08 c0       	rjmp	.+16     	; 0x228c <vfprintf+0xe6>
    227c:	8c 36       	cpi	r24, 0x6C	; 108
    227e:	21 f4       	brne	.+8      	; 0x2288 <vfprintf+0xe2>
    2280:	83 2d       	mov	r24, r3
    2282:	80 68       	ori	r24, 0x80	; 128
    2284:	38 2e       	mov	r3, r24
    2286:	02 c0       	rjmp	.+4      	; 0x228c <vfprintf+0xe6>
    2288:	88 36       	cpi	r24, 0x68	; 104
    228a:	41 f4       	brne	.+16     	; 0x229c <vfprintf+0xf6>
    228c:	f7 01       	movw	r30, r14
    228e:	93 fd       	sbrc	r25, 3
    2290:	85 91       	lpm	r24, Z+
    2292:	93 ff       	sbrs	r25, 3
    2294:	81 91       	ld	r24, Z+
    2296:	7f 01       	movw	r14, r30
    2298:	81 11       	cpse	r24, r1
    229a:	b3 cf       	rjmp	.-154    	; 0x2202 <vfprintf+0x5c>
    229c:	98 2f       	mov	r25, r24
    229e:	9f 7d       	andi	r25, 0xDF	; 223
    22a0:	95 54       	subi	r25, 0x45	; 69
    22a2:	93 30       	cpi	r25, 0x03	; 3
    22a4:	28 f4       	brcc	.+10     	; 0x22b0 <vfprintf+0x10a>
    22a6:	0c 5f       	subi	r16, 0xFC	; 252
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	9f e3       	ldi	r25, 0x3F	; 63
    22ac:	99 83       	std	Y+1, r25	; 0x01
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <vfprintf+0x124>
    22b0:	83 36       	cpi	r24, 0x63	; 99
    22b2:	31 f0       	breq	.+12     	; 0x22c0 <vfprintf+0x11a>
    22b4:	83 37       	cpi	r24, 0x73	; 115
    22b6:	71 f0       	breq	.+28     	; 0x22d4 <vfprintf+0x12e>
    22b8:	83 35       	cpi	r24, 0x53	; 83
    22ba:	09 f0       	breq	.+2      	; 0x22be <vfprintf+0x118>
    22bc:	59 c0       	rjmp	.+178    	; 0x2370 <vfprintf+0x1ca>
    22be:	21 c0       	rjmp	.+66     	; 0x2302 <vfprintf+0x15c>
    22c0:	f8 01       	movw	r30, r16
    22c2:	80 81       	ld	r24, Z
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	0e 5f       	subi	r16, 0xFE	; 254
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	88 24       	eor	r8, r8
    22cc:	83 94       	inc	r8
    22ce:	91 2c       	mov	r9, r1
    22d0:	53 01       	movw	r10, r6
    22d2:	13 c0       	rjmp	.+38     	; 0x22fa <vfprintf+0x154>
    22d4:	28 01       	movw	r4, r16
    22d6:	f2 e0       	ldi	r31, 0x02	; 2
    22d8:	4f 0e       	add	r4, r31
    22da:	51 1c       	adc	r5, r1
    22dc:	f8 01       	movw	r30, r16
    22de:	a0 80       	ld	r10, Z
    22e0:	b1 80       	ldd	r11, Z+1	; 0x01
    22e2:	36 fe       	sbrs	r3, 6
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <vfprintf+0x146>
    22e6:	69 2d       	mov	r22, r9
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <vfprintf+0x14a>
    22ec:	6f ef       	ldi	r22, 0xFF	; 255
    22ee:	7f ef       	ldi	r23, 0xFF	; 255
    22f0:	c5 01       	movw	r24, r10
    22f2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <strnlen>
    22f6:	4c 01       	movw	r8, r24
    22f8:	82 01       	movw	r16, r4
    22fa:	f3 2d       	mov	r31, r3
    22fc:	ff 77       	andi	r31, 0x7F	; 127
    22fe:	3f 2e       	mov	r3, r31
    2300:	16 c0       	rjmp	.+44     	; 0x232e <vfprintf+0x188>
    2302:	28 01       	movw	r4, r16
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	42 0e       	add	r4, r18
    2308:	51 1c       	adc	r5, r1
    230a:	f8 01       	movw	r30, r16
    230c:	a0 80       	ld	r10, Z
    230e:	b1 80       	ldd	r11, Z+1	; 0x01
    2310:	36 fe       	sbrs	r3, 6
    2312:	03 c0       	rjmp	.+6      	; 0x231a <vfprintf+0x174>
    2314:	69 2d       	mov	r22, r9
    2316:	70 e0       	ldi	r23, 0x00	; 0
    2318:	02 c0       	rjmp	.+4      	; 0x231e <vfprintf+0x178>
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	7f ef       	ldi	r23, 0xFF	; 255
    231e:	c5 01       	movw	r24, r10
    2320:	0e 94 e6 14 	call	0x29cc	; 0x29cc <strnlen_P>
    2324:	4c 01       	movw	r8, r24
    2326:	f3 2d       	mov	r31, r3
    2328:	f0 68       	ori	r31, 0x80	; 128
    232a:	3f 2e       	mov	r3, r31
    232c:	82 01       	movw	r16, r4
    232e:	33 fc       	sbrc	r3, 3
    2330:	1b c0       	rjmp	.+54     	; 0x2368 <vfprintf+0x1c2>
    2332:	82 2d       	mov	r24, r2
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	88 16       	cp	r8, r24
    2338:	99 06       	cpc	r9, r25
    233a:	b0 f4       	brcc	.+44     	; 0x2368 <vfprintf+0x1c2>
    233c:	b6 01       	movw	r22, r12
    233e:	80 e2       	ldi	r24, 0x20	; 32
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    2346:	2a 94       	dec	r2
    2348:	f4 cf       	rjmp	.-24     	; 0x2332 <vfprintf+0x18c>
    234a:	f5 01       	movw	r30, r10
    234c:	37 fc       	sbrc	r3, 7
    234e:	85 91       	lpm	r24, Z+
    2350:	37 fe       	sbrs	r3, 7
    2352:	81 91       	ld	r24, Z+
    2354:	5f 01       	movw	r10, r30
    2356:	b6 01       	movw	r22, r12
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    235e:	21 10       	cpse	r2, r1
    2360:	2a 94       	dec	r2
    2362:	21 e0       	ldi	r18, 0x01	; 1
    2364:	82 1a       	sub	r8, r18
    2366:	91 08       	sbc	r9, r1
    2368:	81 14       	cp	r8, r1
    236a:	91 04       	cpc	r9, r1
    236c:	71 f7       	brne	.-36     	; 0x234a <vfprintf+0x1a4>
    236e:	e8 c0       	rjmp	.+464    	; 0x2540 <vfprintf+0x39a>
    2370:	84 36       	cpi	r24, 0x64	; 100
    2372:	11 f0       	breq	.+4      	; 0x2378 <vfprintf+0x1d2>
    2374:	89 36       	cpi	r24, 0x69	; 105
    2376:	41 f5       	brne	.+80     	; 0x23c8 <vfprintf+0x222>
    2378:	f8 01       	movw	r30, r16
    237a:	37 fe       	sbrs	r3, 7
    237c:	07 c0       	rjmp	.+14     	; 0x238c <vfprintf+0x1e6>
    237e:	60 81       	ld	r22, Z
    2380:	71 81       	ldd	r23, Z+1	; 0x01
    2382:	82 81       	ldd	r24, Z+2	; 0x02
    2384:	93 81       	ldd	r25, Z+3	; 0x03
    2386:	0c 5f       	subi	r16, 0xFC	; 252
    2388:	1f 4f       	sbci	r17, 0xFF	; 255
    238a:	08 c0       	rjmp	.+16     	; 0x239c <vfprintf+0x1f6>
    238c:	60 81       	ld	r22, Z
    238e:	71 81       	ldd	r23, Z+1	; 0x01
    2390:	07 2e       	mov	r0, r23
    2392:	00 0c       	add	r0, r0
    2394:	88 0b       	sbc	r24, r24
    2396:	99 0b       	sbc	r25, r25
    2398:	0e 5f       	subi	r16, 0xFE	; 254
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	f3 2d       	mov	r31, r3
    239e:	ff 76       	andi	r31, 0x6F	; 111
    23a0:	3f 2e       	mov	r3, r31
    23a2:	97 ff       	sbrs	r25, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <vfprintf+0x212>
    23a6:	90 95       	com	r25
    23a8:	80 95       	com	r24
    23aa:	70 95       	com	r23
    23ac:	61 95       	neg	r22
    23ae:	7f 4f       	sbci	r23, 0xFF	; 255
    23b0:	8f 4f       	sbci	r24, 0xFF	; 255
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	f0 68       	ori	r31, 0x80	; 128
    23b6:	3f 2e       	mov	r3, r31
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	a3 01       	movw	r20, r6
    23be:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__ultoa_invert>
    23c2:	88 2e       	mov	r8, r24
    23c4:	86 18       	sub	r8, r6
    23c6:	45 c0       	rjmp	.+138    	; 0x2452 <vfprintf+0x2ac>
    23c8:	85 37       	cpi	r24, 0x75	; 117
    23ca:	31 f4       	brne	.+12     	; 0x23d8 <vfprintf+0x232>
    23cc:	23 2d       	mov	r18, r3
    23ce:	2f 7e       	andi	r18, 0xEF	; 239
    23d0:	b2 2e       	mov	r11, r18
    23d2:	2a e0       	ldi	r18, 0x0A	; 10
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	25 c0       	rjmp	.+74     	; 0x2422 <vfprintf+0x27c>
    23d8:	93 2d       	mov	r25, r3
    23da:	99 7f       	andi	r25, 0xF9	; 249
    23dc:	b9 2e       	mov	r11, r25
    23de:	8f 36       	cpi	r24, 0x6F	; 111
    23e0:	c1 f0       	breq	.+48     	; 0x2412 <vfprintf+0x26c>
    23e2:	18 f4       	brcc	.+6      	; 0x23ea <vfprintf+0x244>
    23e4:	88 35       	cpi	r24, 0x58	; 88
    23e6:	79 f0       	breq	.+30     	; 0x2406 <vfprintf+0x260>
    23e8:	b5 c0       	rjmp	.+362    	; 0x2554 <vfprintf+0x3ae>
    23ea:	80 37       	cpi	r24, 0x70	; 112
    23ec:	19 f0       	breq	.+6      	; 0x23f4 <vfprintf+0x24e>
    23ee:	88 37       	cpi	r24, 0x78	; 120
    23f0:	21 f0       	breq	.+8      	; 0x23fa <vfprintf+0x254>
    23f2:	b0 c0       	rjmp	.+352    	; 0x2554 <vfprintf+0x3ae>
    23f4:	e9 2f       	mov	r30, r25
    23f6:	e0 61       	ori	r30, 0x10	; 16
    23f8:	be 2e       	mov	r11, r30
    23fa:	b4 fe       	sbrs	r11, 4
    23fc:	0d c0       	rjmp	.+26     	; 0x2418 <vfprintf+0x272>
    23fe:	fb 2d       	mov	r31, r11
    2400:	f4 60       	ori	r31, 0x04	; 4
    2402:	bf 2e       	mov	r11, r31
    2404:	09 c0       	rjmp	.+18     	; 0x2418 <vfprintf+0x272>
    2406:	34 fe       	sbrs	r3, 4
    2408:	0a c0       	rjmp	.+20     	; 0x241e <vfprintf+0x278>
    240a:	29 2f       	mov	r18, r25
    240c:	26 60       	ori	r18, 0x06	; 6
    240e:	b2 2e       	mov	r11, r18
    2410:	06 c0       	rjmp	.+12     	; 0x241e <vfprintf+0x278>
    2412:	28 e0       	ldi	r18, 0x08	; 8
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <vfprintf+0x27c>
    2418:	20 e1       	ldi	r18, 0x10	; 16
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <vfprintf+0x27c>
    241e:	20 e1       	ldi	r18, 0x10	; 16
    2420:	32 e0       	ldi	r19, 0x02	; 2
    2422:	f8 01       	movw	r30, r16
    2424:	b7 fe       	sbrs	r11, 7
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <vfprintf+0x290>
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	0c 5f       	subi	r16, 0xFC	; 252
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <vfprintf+0x29c>
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 5f       	subi	r16, 0xFE	; 254
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	a3 01       	movw	r20, r6
    2444:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__ultoa_invert>
    2448:	88 2e       	mov	r8, r24
    244a:	86 18       	sub	r8, r6
    244c:	fb 2d       	mov	r31, r11
    244e:	ff 77       	andi	r31, 0x7F	; 127
    2450:	3f 2e       	mov	r3, r31
    2452:	36 fe       	sbrs	r3, 6
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <vfprintf+0x2ca>
    2456:	23 2d       	mov	r18, r3
    2458:	2e 7f       	andi	r18, 0xFE	; 254
    245a:	a2 2e       	mov	r10, r18
    245c:	89 14       	cp	r8, r9
    245e:	58 f4       	brcc	.+22     	; 0x2476 <vfprintf+0x2d0>
    2460:	34 fe       	sbrs	r3, 4
    2462:	0b c0       	rjmp	.+22     	; 0x247a <vfprintf+0x2d4>
    2464:	32 fc       	sbrc	r3, 2
    2466:	09 c0       	rjmp	.+18     	; 0x247a <vfprintf+0x2d4>
    2468:	83 2d       	mov	r24, r3
    246a:	8e 7e       	andi	r24, 0xEE	; 238
    246c:	a8 2e       	mov	r10, r24
    246e:	05 c0       	rjmp	.+10     	; 0x247a <vfprintf+0x2d4>
    2470:	b8 2c       	mov	r11, r8
    2472:	a3 2c       	mov	r10, r3
    2474:	03 c0       	rjmp	.+6      	; 0x247c <vfprintf+0x2d6>
    2476:	b8 2c       	mov	r11, r8
    2478:	01 c0       	rjmp	.+2      	; 0x247c <vfprintf+0x2d6>
    247a:	b9 2c       	mov	r11, r9
    247c:	a4 fe       	sbrs	r10, 4
    247e:	0f c0       	rjmp	.+30     	; 0x249e <vfprintf+0x2f8>
    2480:	fe 01       	movw	r30, r28
    2482:	e8 0d       	add	r30, r8
    2484:	f1 1d       	adc	r31, r1
    2486:	80 81       	ld	r24, Z
    2488:	80 33       	cpi	r24, 0x30	; 48
    248a:	21 f4       	brne	.+8      	; 0x2494 <vfprintf+0x2ee>
    248c:	9a 2d       	mov	r25, r10
    248e:	99 7e       	andi	r25, 0xE9	; 233
    2490:	a9 2e       	mov	r10, r25
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <vfprintf+0x300>
    2494:	a2 fe       	sbrs	r10, 2
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <vfprintf+0x2fe>
    2498:	b3 94       	inc	r11
    249a:	b3 94       	inc	r11
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <vfprintf+0x300>
    249e:	8a 2d       	mov	r24, r10
    24a0:	86 78       	andi	r24, 0x86	; 134
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <vfprintf+0x300>
    24a4:	b3 94       	inc	r11
    24a6:	a3 fc       	sbrc	r10, 3
    24a8:	11 c0       	rjmp	.+34     	; 0x24cc <vfprintf+0x326>
    24aa:	a0 fe       	sbrs	r10, 0
    24ac:	06 c0       	rjmp	.+12     	; 0x24ba <vfprintf+0x314>
    24ae:	b2 14       	cp	r11, r2
    24b0:	88 f4       	brcc	.+34     	; 0x24d4 <vfprintf+0x32e>
    24b2:	28 0c       	add	r2, r8
    24b4:	92 2c       	mov	r9, r2
    24b6:	9b 18       	sub	r9, r11
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <vfprintf+0x330>
    24ba:	b2 14       	cp	r11, r2
    24bc:	60 f4       	brcc	.+24     	; 0x24d6 <vfprintf+0x330>
    24be:	b6 01       	movw	r22, r12
    24c0:	80 e2       	ldi	r24, 0x20	; 32
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    24c8:	b3 94       	inc	r11
    24ca:	f7 cf       	rjmp	.-18     	; 0x24ba <vfprintf+0x314>
    24cc:	b2 14       	cp	r11, r2
    24ce:	18 f4       	brcc	.+6      	; 0x24d6 <vfprintf+0x330>
    24d0:	2b 18       	sub	r2, r11
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x332>
    24d4:	98 2c       	mov	r9, r8
    24d6:	21 2c       	mov	r2, r1
    24d8:	a4 fe       	sbrs	r10, 4
    24da:	10 c0       	rjmp	.+32     	; 0x24fc <vfprintf+0x356>
    24dc:	b6 01       	movw	r22, r12
    24de:	80 e3       	ldi	r24, 0x30	; 48
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    24e6:	a2 fe       	sbrs	r10, 2
    24e8:	17 c0       	rjmp	.+46     	; 0x2518 <vfprintf+0x372>
    24ea:	a1 fc       	sbrc	r10, 1
    24ec:	03 c0       	rjmp	.+6      	; 0x24f4 <vfprintf+0x34e>
    24ee:	88 e7       	ldi	r24, 0x78	; 120
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x352>
    24f4:	88 e5       	ldi	r24, 0x58	; 88
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	b6 01       	movw	r22, r12
    24fa:	0c c0       	rjmp	.+24     	; 0x2514 <vfprintf+0x36e>
    24fc:	8a 2d       	mov	r24, r10
    24fe:	86 78       	andi	r24, 0x86	; 134
    2500:	59 f0       	breq	.+22     	; 0x2518 <vfprintf+0x372>
    2502:	a1 fe       	sbrs	r10, 1
    2504:	02 c0       	rjmp	.+4      	; 0x250a <vfprintf+0x364>
    2506:	8b e2       	ldi	r24, 0x2B	; 43
    2508:	01 c0       	rjmp	.+2      	; 0x250c <vfprintf+0x366>
    250a:	80 e2       	ldi	r24, 0x20	; 32
    250c:	a7 fc       	sbrc	r10, 7
    250e:	8d e2       	ldi	r24, 0x2D	; 45
    2510:	b6 01       	movw	r22, r12
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    2518:	89 14       	cp	r8, r9
    251a:	38 f4       	brcc	.+14     	; 0x252a <vfprintf+0x384>
    251c:	b6 01       	movw	r22, r12
    251e:	80 e3       	ldi	r24, 0x30	; 48
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    2526:	9a 94       	dec	r9
    2528:	f7 cf       	rjmp	.-18     	; 0x2518 <vfprintf+0x372>
    252a:	8a 94       	dec	r8
    252c:	f3 01       	movw	r30, r6
    252e:	e8 0d       	add	r30, r8
    2530:	f1 1d       	adc	r31, r1
    2532:	80 81       	ld	r24, Z
    2534:	b6 01       	movw	r22, r12
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    253c:	81 10       	cpse	r8, r1
    253e:	f5 cf       	rjmp	.-22     	; 0x252a <vfprintf+0x384>
    2540:	22 20       	and	r2, r2
    2542:	09 f4       	brne	.+2      	; 0x2546 <vfprintf+0x3a0>
    2544:	42 ce       	rjmp	.-892    	; 0x21ca <vfprintf+0x24>
    2546:	b6 01       	movw	r22, r12
    2548:	80 e2       	ldi	r24, 0x20	; 32
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <fputc>
    2550:	2a 94       	dec	r2
    2552:	f6 cf       	rjmp	.-20     	; 0x2540 <vfprintf+0x39a>
    2554:	f6 01       	movw	r30, r12
    2556:	86 81       	ldd	r24, Z+6	; 0x06
    2558:	97 81       	ldd	r25, Z+7	; 0x07
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <vfprintf+0x3ba>
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	9f ef       	ldi	r25, 0xFF	; 255
    2560:	2b 96       	adiw	r28, 0x0b	; 11
    2562:	e2 e1       	ldi	r30, 0x12	; 18
    2564:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__epilogue_restores__>

00002568 <dtoa_prf>:
    2568:	a9 e0       	ldi	r26, 0x09	; 9
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea eb       	ldi	r30, 0xBA	; 186
    256e:	f2 e1       	ldi	r31, 0x12	; 18
    2570:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__prologue_saves__+0xc>
    2574:	6a 01       	movw	r12, r20
    2576:	12 2f       	mov	r17, r18
    2578:	b0 2e       	mov	r11, r16
    257a:	2b e3       	ldi	r18, 0x3B	; 59
    257c:	20 17       	cp	r18, r16
    257e:	20 f0       	brcs	.+8      	; 0x2588 <dtoa_prf+0x20>
    2580:	ff 24       	eor	r15, r15
    2582:	f3 94       	inc	r15
    2584:	f0 0e       	add	r15, r16
    2586:	02 c0       	rjmp	.+4      	; 0x258c <dtoa_prf+0x24>
    2588:	2c e3       	ldi	r18, 0x3C	; 60
    258a:	f2 2e       	mov	r15, r18
    258c:	0f 2d       	mov	r16, r15
    258e:	27 e0       	ldi	r18, 0x07	; 7
    2590:	ae 01       	movw	r20, r28
    2592:	4f 5f       	subi	r20, 0xFF	; 255
    2594:	5f 4f       	sbci	r21, 0xFF	; 255
    2596:	0e 94 0e 14 	call	0x281c	; 0x281c <__ftoa_engine>
    259a:	bc 01       	movw	r22, r24
    259c:	49 81       	ldd	r20, Y+1	; 0x01
    259e:	84 2f       	mov	r24, r20
    25a0:	89 70       	andi	r24, 0x09	; 9
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	31 f0       	breq	.+12     	; 0x25b2 <dtoa_prf+0x4a>
    25a6:	e1 fc       	sbrc	r14, 1
    25a8:	06 c0       	rjmp	.+12     	; 0x25b6 <dtoa_prf+0x4e>
    25aa:	e0 fe       	sbrs	r14, 0
    25ac:	06 c0       	rjmp	.+12     	; 0x25ba <dtoa_prf+0x52>
    25ae:	90 e2       	ldi	r25, 0x20	; 32
    25b0:	05 c0       	rjmp	.+10     	; 0x25bc <dtoa_prf+0x54>
    25b2:	9d e2       	ldi	r25, 0x2D	; 45
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <dtoa_prf+0x54>
    25b6:	9b e2       	ldi	r25, 0x2B	; 43
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <dtoa_prf+0x54>
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	5e 2d       	mov	r21, r14
    25be:	50 71       	andi	r21, 0x10	; 16
    25c0:	43 ff       	sbrs	r20, 3
    25c2:	3c c0       	rjmp	.+120    	; 0x263c <dtoa_prf+0xd4>
    25c4:	91 11       	cpse	r25, r1
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <dtoa_prf+0x64>
    25c8:	83 e0       	ldi	r24, 0x03	; 3
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <dtoa_prf+0x66>
    25cc:	84 e0       	ldi	r24, 0x04	; 4
    25ce:	81 17       	cp	r24, r17
    25d0:	18 f4       	brcc	.+6      	; 0x25d8 <dtoa_prf+0x70>
    25d2:	21 2f       	mov	r18, r17
    25d4:	28 1b       	sub	r18, r24
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <dtoa_prf+0x72>
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	51 11       	cpse	r21, r1
    25dc:	0b c0       	rjmp	.+22     	; 0x25f4 <dtoa_prf+0x8c>
    25de:	f6 01       	movw	r30, r12
    25e0:	82 2f       	mov	r24, r18
    25e2:	30 e2       	ldi	r19, 0x20	; 32
    25e4:	88 23       	and	r24, r24
    25e6:	19 f0       	breq	.+6      	; 0x25ee <dtoa_prf+0x86>
    25e8:	31 93       	st	Z+, r19
    25ea:	81 50       	subi	r24, 0x01	; 1
    25ec:	fb cf       	rjmp	.-10     	; 0x25e4 <dtoa_prf+0x7c>
    25ee:	c2 0e       	add	r12, r18
    25f0:	d1 1c       	adc	r13, r1
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	99 23       	and	r25, r25
    25f6:	29 f0       	breq	.+10     	; 0x2602 <dtoa_prf+0x9a>
    25f8:	d6 01       	movw	r26, r12
    25fa:	9c 93       	st	X, r25
    25fc:	f6 01       	movw	r30, r12
    25fe:	31 96       	adiw	r30, 0x01	; 1
    2600:	6f 01       	movw	r12, r30
    2602:	c6 01       	movw	r24, r12
    2604:	03 96       	adiw	r24, 0x03	; 3
    2606:	e2 fe       	sbrs	r14, 2
    2608:	0a c0       	rjmp	.+20     	; 0x261e <dtoa_prf+0xb6>
    260a:	3e e4       	ldi	r19, 0x4E	; 78
    260c:	d6 01       	movw	r26, r12
    260e:	3c 93       	st	X, r19
    2610:	41 e4       	ldi	r20, 0x41	; 65
    2612:	11 96       	adiw	r26, 0x01	; 1
    2614:	4c 93       	st	X, r20
    2616:	11 97       	sbiw	r26, 0x01	; 1
    2618:	12 96       	adiw	r26, 0x02	; 2
    261a:	3c 93       	st	X, r19
    261c:	06 c0       	rjmp	.+12     	; 0x262a <dtoa_prf+0xc2>
    261e:	3e e6       	ldi	r19, 0x6E	; 110
    2620:	f6 01       	movw	r30, r12
    2622:	30 83       	st	Z, r19
    2624:	41 e6       	ldi	r20, 0x61	; 97
    2626:	41 83       	std	Z+1, r20	; 0x01
    2628:	32 83       	std	Z+2, r19	; 0x02
    262a:	fc 01       	movw	r30, r24
    262c:	32 2f       	mov	r19, r18
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	33 23       	and	r19, r19
    2632:	09 f4       	brne	.+2      	; 0x2636 <dtoa_prf+0xce>
    2634:	42 c0       	rjmp	.+132    	; 0x26ba <dtoa_prf+0x152>
    2636:	41 93       	st	Z+, r20
    2638:	31 50       	subi	r19, 0x01	; 1
    263a:	fa cf       	rjmp	.-12     	; 0x2630 <dtoa_prf+0xc8>
    263c:	42 ff       	sbrs	r20, 2
    263e:	44 c0       	rjmp	.+136    	; 0x26c8 <dtoa_prf+0x160>
    2640:	91 11       	cpse	r25, r1
    2642:	02 c0       	rjmp	.+4      	; 0x2648 <dtoa_prf+0xe0>
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	01 c0       	rjmp	.+2      	; 0x264a <dtoa_prf+0xe2>
    2648:	84 e0       	ldi	r24, 0x04	; 4
    264a:	81 17       	cp	r24, r17
    264c:	18 f4       	brcc	.+6      	; 0x2654 <dtoa_prf+0xec>
    264e:	21 2f       	mov	r18, r17
    2650:	28 1b       	sub	r18, r24
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <dtoa_prf+0xee>
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	51 11       	cpse	r21, r1
    2658:	0b c0       	rjmp	.+22     	; 0x2670 <dtoa_prf+0x108>
    265a:	f6 01       	movw	r30, r12
    265c:	82 2f       	mov	r24, r18
    265e:	30 e2       	ldi	r19, 0x20	; 32
    2660:	88 23       	and	r24, r24
    2662:	19 f0       	breq	.+6      	; 0x266a <dtoa_prf+0x102>
    2664:	31 93       	st	Z+, r19
    2666:	81 50       	subi	r24, 0x01	; 1
    2668:	fb cf       	rjmp	.-10     	; 0x2660 <dtoa_prf+0xf8>
    266a:	c2 0e       	add	r12, r18
    266c:	d1 1c       	adc	r13, r1
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	99 23       	and	r25, r25
    2672:	29 f0       	breq	.+10     	; 0x267e <dtoa_prf+0x116>
    2674:	d6 01       	movw	r26, r12
    2676:	9c 93       	st	X, r25
    2678:	f6 01       	movw	r30, r12
    267a:	31 96       	adiw	r30, 0x01	; 1
    267c:	6f 01       	movw	r12, r30
    267e:	c6 01       	movw	r24, r12
    2680:	03 96       	adiw	r24, 0x03	; 3
    2682:	e2 fe       	sbrs	r14, 2
    2684:	0b c0       	rjmp	.+22     	; 0x269c <dtoa_prf+0x134>
    2686:	39 e4       	ldi	r19, 0x49	; 73
    2688:	d6 01       	movw	r26, r12
    268a:	3c 93       	st	X, r19
    268c:	3e e4       	ldi	r19, 0x4E	; 78
    268e:	11 96       	adiw	r26, 0x01	; 1
    2690:	3c 93       	st	X, r19
    2692:	11 97       	sbiw	r26, 0x01	; 1
    2694:	36 e4       	ldi	r19, 0x46	; 70
    2696:	12 96       	adiw	r26, 0x02	; 2
    2698:	3c 93       	st	X, r19
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <dtoa_prf+0x142>
    269c:	39 e6       	ldi	r19, 0x69	; 105
    269e:	f6 01       	movw	r30, r12
    26a0:	30 83       	st	Z, r19
    26a2:	3e e6       	ldi	r19, 0x6E	; 110
    26a4:	31 83       	std	Z+1, r19	; 0x01
    26a6:	36 e6       	ldi	r19, 0x66	; 102
    26a8:	32 83       	std	Z+2, r19	; 0x02
    26aa:	fc 01       	movw	r30, r24
    26ac:	32 2f       	mov	r19, r18
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	33 23       	and	r19, r19
    26b2:	19 f0       	breq	.+6      	; 0x26ba <dtoa_prf+0x152>
    26b4:	41 93       	st	Z+, r20
    26b6:	31 50       	subi	r19, 0x01	; 1
    26b8:	fb cf       	rjmp	.-10     	; 0x26b0 <dtoa_prf+0x148>
    26ba:	fc 01       	movw	r30, r24
    26bc:	e2 0f       	add	r30, r18
    26be:	f1 1d       	adc	r31, r1
    26c0:	10 82       	st	Z, r1
    26c2:	8e ef       	ldi	r24, 0xFE	; 254
    26c4:	9f ef       	ldi	r25, 0xFF	; 255
    26c6:	a6 c0       	rjmp	.+332    	; 0x2814 <dtoa_prf+0x2ac>
    26c8:	21 e0       	ldi	r18, 0x01	; 1
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	91 11       	cpse	r25, r1
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <dtoa_prf+0x16c>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	16 16       	cp	r1, r22
    26d6:	17 06       	cpc	r1, r23
    26d8:	1c f4       	brge	.+6      	; 0x26e0 <dtoa_prf+0x178>
    26da:	fb 01       	movw	r30, r22
    26dc:	31 96       	adiw	r30, 0x01	; 1
    26de:	02 c0       	rjmp	.+4      	; 0x26e4 <dtoa_prf+0x17c>
    26e0:	e1 e0       	ldi	r30, 0x01	; 1
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	2e 0f       	add	r18, r30
    26e6:	3f 1f       	adc	r19, r31
    26e8:	bb 20       	and	r11, r11
    26ea:	21 f0       	breq	.+8      	; 0x26f4 <dtoa_prf+0x18c>
    26ec:	eb 2d       	mov	r30, r11
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	31 96       	adiw	r30, 0x01	; 1
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <dtoa_prf+0x190>
    26f4:	e0 e0       	ldi	r30, 0x00	; 0
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	2e 0f       	add	r18, r30
    26fa:	3f 1f       	adc	r19, r31
    26fc:	e1 2f       	mov	r30, r17
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	2e 17       	cp	r18, r30
    2702:	3f 07       	cpc	r19, r31
    2704:	1c f4       	brge	.+6      	; 0x270c <dtoa_prf+0x1a4>
    2706:	12 1b       	sub	r17, r18
    2708:	21 2f       	mov	r18, r17
    270a:	01 c0       	rjmp	.+2      	; 0x270e <dtoa_prf+0x1a6>
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	8e 2d       	mov	r24, r14
    2710:	88 71       	andi	r24, 0x18	; 24
    2712:	59 f4       	brne	.+22     	; 0x272a <dtoa_prf+0x1c2>
    2714:	f6 01       	movw	r30, r12
    2716:	82 2f       	mov	r24, r18
    2718:	30 e2       	ldi	r19, 0x20	; 32
    271a:	88 23       	and	r24, r24
    271c:	19 f0       	breq	.+6      	; 0x2724 <dtoa_prf+0x1bc>
    271e:	31 93       	st	Z+, r19
    2720:	81 50       	subi	r24, 0x01	; 1
    2722:	fb cf       	rjmp	.-10     	; 0x271a <dtoa_prf+0x1b2>
    2724:	c2 0e       	add	r12, r18
    2726:	d1 1c       	adc	r13, r1
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	99 23       	and	r25, r25
    272c:	29 f0       	breq	.+10     	; 0x2738 <dtoa_prf+0x1d0>
    272e:	d6 01       	movw	r26, r12
    2730:	9c 93       	st	X, r25
    2732:	f6 01       	movw	r30, r12
    2734:	31 96       	adiw	r30, 0x01	; 1
    2736:	6f 01       	movw	r12, r30
    2738:	51 11       	cpse	r21, r1
    273a:	0b c0       	rjmp	.+22     	; 0x2752 <dtoa_prf+0x1ea>
    273c:	f6 01       	movw	r30, r12
    273e:	82 2f       	mov	r24, r18
    2740:	90 e3       	ldi	r25, 0x30	; 48
    2742:	88 23       	and	r24, r24
    2744:	19 f0       	breq	.+6      	; 0x274c <dtoa_prf+0x1e4>
    2746:	91 93       	st	Z+, r25
    2748:	81 50       	subi	r24, 0x01	; 1
    274a:	fb cf       	rjmp	.-10     	; 0x2742 <dtoa_prf+0x1da>
    274c:	c2 0e       	add	r12, r18
    274e:	d1 1c       	adc	r13, r1
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	0f 2d       	mov	r16, r15
    2754:	06 0f       	add	r16, r22
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	34 2f       	mov	r19, r20
    275a:	30 71       	andi	r19, 0x10	; 16
    275c:	44 ff       	sbrs	r20, 4
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <dtoa_prf+0x1fe>
    2760:	91 33       	cpi	r25, 0x31	; 49
    2762:	09 f4       	brne	.+2      	; 0x2766 <dtoa_prf+0x1fe>
    2764:	01 50       	subi	r16, 0x01	; 1
    2766:	10 16       	cp	r1, r16
    2768:	24 f4       	brge	.+8      	; 0x2772 <dtoa_prf+0x20a>
    276a:	09 30       	cpi	r16, 0x09	; 9
    276c:	18 f0       	brcs	.+6      	; 0x2774 <dtoa_prf+0x20c>
    276e:	08 e0       	ldi	r16, 0x08	; 8
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <dtoa_prf+0x20c>
    2772:	01 e0       	ldi	r16, 0x01	; 1
    2774:	ab 01       	movw	r20, r22
    2776:	77 ff       	sbrs	r23, 7
    2778:	02 c0       	rjmp	.+4      	; 0x277e <dtoa_prf+0x216>
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	fb 01       	movw	r30, r22
    2780:	e4 1b       	sub	r30, r20
    2782:	f5 0b       	sbc	r31, r21
    2784:	a1 e0       	ldi	r26, 0x01	; 1
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ac 0f       	add	r26, r28
    278a:	bd 1f       	adc	r27, r29
    278c:	ea 0f       	add	r30, r26
    278e:	fb 1f       	adc	r31, r27
    2790:	8e e2       	ldi	r24, 0x2E	; 46
    2792:	a8 2e       	mov	r10, r24
    2794:	4b 01       	movw	r8, r22
    2796:	80 1a       	sub	r8, r16
    2798:	91 08       	sbc	r9, r1
    279a:	0b 2d       	mov	r16, r11
    279c:	10 e0       	ldi	r17, 0x00	; 0
    279e:	11 95       	neg	r17
    27a0:	01 95       	neg	r16
    27a2:	11 09       	sbc	r17, r1
    27a4:	4f 3f       	cpi	r20, 0xFF	; 255
    27a6:	bf ef       	ldi	r27, 0xFF	; 255
    27a8:	5b 07       	cpc	r21, r27
    27aa:	21 f4       	brne	.+8      	; 0x27b4 <dtoa_prf+0x24c>
    27ac:	d6 01       	movw	r26, r12
    27ae:	ac 92       	st	X, r10
    27b0:	11 96       	adiw	r26, 0x01	; 1
    27b2:	6d 01       	movw	r12, r26
    27b4:	64 17       	cp	r22, r20
    27b6:	75 07       	cpc	r23, r21
    27b8:	2c f0       	brlt	.+10     	; 0x27c4 <dtoa_prf+0x25c>
    27ba:	84 16       	cp	r8, r20
    27bc:	95 06       	cpc	r9, r21
    27be:	14 f4       	brge	.+4      	; 0x27c4 <dtoa_prf+0x25c>
    27c0:	81 81       	ldd	r24, Z+1	; 0x01
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <dtoa_prf+0x25e>
    27c4:	80 e3       	ldi	r24, 0x30	; 48
    27c6:	41 50       	subi	r20, 0x01	; 1
    27c8:	51 09       	sbc	r21, r1
    27ca:	31 96       	adiw	r30, 0x01	; 1
    27cc:	d6 01       	movw	r26, r12
    27ce:	11 96       	adiw	r26, 0x01	; 1
    27d0:	7d 01       	movw	r14, r26
    27d2:	40 17       	cp	r20, r16
    27d4:	51 07       	cpc	r21, r17
    27d6:	24 f0       	brlt	.+8      	; 0x27e0 <dtoa_prf+0x278>
    27d8:	d6 01       	movw	r26, r12
    27da:	8c 93       	st	X, r24
    27dc:	67 01       	movw	r12, r14
    27de:	e2 cf       	rjmp	.-60     	; 0x27a4 <dtoa_prf+0x23c>
    27e0:	64 17       	cp	r22, r20
    27e2:	75 07       	cpc	r23, r21
    27e4:	39 f4       	brne	.+14     	; 0x27f4 <dtoa_prf+0x28c>
    27e6:	96 33       	cpi	r25, 0x36	; 54
    27e8:	20 f4       	brcc	.+8      	; 0x27f2 <dtoa_prf+0x28a>
    27ea:	95 33       	cpi	r25, 0x35	; 53
    27ec:	19 f4       	brne	.+6      	; 0x27f4 <dtoa_prf+0x28c>
    27ee:	31 11       	cpse	r19, r1
    27f0:	01 c0       	rjmp	.+2      	; 0x27f4 <dtoa_prf+0x28c>
    27f2:	81 e3       	ldi	r24, 0x31	; 49
    27f4:	f6 01       	movw	r30, r12
    27f6:	80 83       	st	Z, r24
    27f8:	f7 01       	movw	r30, r14
    27fa:	82 2f       	mov	r24, r18
    27fc:	90 e2       	ldi	r25, 0x20	; 32
    27fe:	88 23       	and	r24, r24
    2800:	19 f0       	breq	.+6      	; 0x2808 <dtoa_prf+0x2a0>
    2802:	91 93       	st	Z+, r25
    2804:	81 50       	subi	r24, 0x01	; 1
    2806:	fb cf       	rjmp	.-10     	; 0x27fe <dtoa_prf+0x296>
    2808:	f7 01       	movw	r30, r14
    280a:	e2 0f       	add	r30, r18
    280c:	f1 1d       	adc	r31, r1
    280e:	10 82       	st	Z, r1
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	29 96       	adiw	r28, 0x09	; 9
    2816:	ec e0       	ldi	r30, 0x0C	; 12
    2818:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <__epilogue_restores__+0xc>

0000281c <__ftoa_engine>:
    281c:	28 30       	cpi	r18, 0x08	; 8
    281e:	08 f0       	brcs	.+2      	; 0x2822 <__ftoa_engine+0x6>
    2820:	27 e0       	ldi	r18, 0x07	; 7
    2822:	33 27       	eor	r19, r19
    2824:	da 01       	movw	r26, r20
    2826:	99 0f       	add	r25, r25
    2828:	31 1d       	adc	r19, r1
    282a:	87 fd       	sbrc	r24, 7
    282c:	91 60       	ori	r25, 0x01	; 1
    282e:	00 96       	adiw	r24, 0x00	; 0
    2830:	61 05       	cpc	r22, r1
    2832:	71 05       	cpc	r23, r1
    2834:	39 f4       	brne	.+14     	; 0x2844 <__ftoa_engine+0x28>
    2836:	32 60       	ori	r19, 0x02	; 2
    2838:	2e 5f       	subi	r18, 0xFE	; 254
    283a:	3d 93       	st	X+, r19
    283c:	30 e3       	ldi	r19, 0x30	; 48
    283e:	2a 95       	dec	r18
    2840:	e1 f7       	brne	.-8      	; 0x283a <__ftoa_engine+0x1e>
    2842:	08 95       	ret
    2844:	9f 3f       	cpi	r25, 0xFF	; 255
    2846:	30 f0       	brcs	.+12     	; 0x2854 <__ftoa_engine+0x38>
    2848:	80 38       	cpi	r24, 0x80	; 128
    284a:	71 05       	cpc	r23, r1
    284c:	61 05       	cpc	r22, r1
    284e:	09 f0       	breq	.+2      	; 0x2852 <__ftoa_engine+0x36>
    2850:	3c 5f       	subi	r19, 0xFC	; 252
    2852:	3c 5f       	subi	r19, 0xFC	; 252
    2854:	3d 93       	st	X+, r19
    2856:	91 30       	cpi	r25, 0x01	; 1
    2858:	08 f0       	brcs	.+2      	; 0x285c <__ftoa_engine+0x40>
    285a:	80 68       	ori	r24, 0x80	; 128
    285c:	91 1d       	adc	r25, r1
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	1f 93       	push	r17
    2864:	0f 93       	push	r16
    2866:	ff 92       	push	r15
    2868:	ef 92       	push	r14
    286a:	19 2f       	mov	r17, r25
    286c:	98 7f       	andi	r25, 0xF8	; 248
    286e:	96 95       	lsr	r25
    2870:	e9 2f       	mov	r30, r25
    2872:	96 95       	lsr	r25
    2874:	96 95       	lsr	r25
    2876:	e9 0f       	add	r30, r25
    2878:	ff 27       	eor	r31, r31
    287a:	e0 53       	subi	r30, 0x30	; 48
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	99 27       	eor	r25, r25
    2880:	33 27       	eor	r19, r19
    2882:	ee 24       	eor	r14, r14
    2884:	ff 24       	eor	r15, r15
    2886:	a7 01       	movw	r20, r14
    2888:	e7 01       	movw	r28, r14
    288a:	05 90       	lpm	r0, Z+
    288c:	08 94       	sec
    288e:	07 94       	ror	r0
    2890:	28 f4       	brcc	.+10     	; 0x289c <__ftoa_engine+0x80>
    2892:	36 0f       	add	r19, r22
    2894:	e7 1e       	adc	r14, r23
    2896:	f8 1e       	adc	r15, r24
    2898:	49 1f       	adc	r20, r25
    289a:	51 1d       	adc	r21, r1
    289c:	66 0f       	add	r22, r22
    289e:	77 1f       	adc	r23, r23
    28a0:	88 1f       	adc	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	06 94       	lsr	r0
    28a6:	a1 f7       	brne	.-24     	; 0x2890 <__ftoa_engine+0x74>
    28a8:	05 90       	lpm	r0, Z+
    28aa:	07 94       	ror	r0
    28ac:	28 f4       	brcc	.+10     	; 0x28b8 <__ftoa_engine+0x9c>
    28ae:	e7 0e       	add	r14, r23
    28b0:	f8 1e       	adc	r15, r24
    28b2:	49 1f       	adc	r20, r25
    28b4:	56 1f       	adc	r21, r22
    28b6:	c1 1d       	adc	r28, r1
    28b8:	77 0f       	add	r23, r23
    28ba:	88 1f       	adc	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	66 1f       	adc	r22, r22
    28c0:	06 94       	lsr	r0
    28c2:	a1 f7       	brne	.-24     	; 0x28ac <__ftoa_engine+0x90>
    28c4:	05 90       	lpm	r0, Z+
    28c6:	07 94       	ror	r0
    28c8:	28 f4       	brcc	.+10     	; 0x28d4 <__ftoa_engine+0xb8>
    28ca:	f8 0e       	add	r15, r24
    28cc:	49 1f       	adc	r20, r25
    28ce:	56 1f       	adc	r21, r22
    28d0:	c7 1f       	adc	r28, r23
    28d2:	d1 1d       	adc	r29, r1
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	66 1f       	adc	r22, r22
    28da:	77 1f       	adc	r23, r23
    28dc:	06 94       	lsr	r0
    28de:	a1 f7       	brne	.-24     	; 0x28c8 <__ftoa_engine+0xac>
    28e0:	05 90       	lpm	r0, Z+
    28e2:	07 94       	ror	r0
    28e4:	20 f4       	brcc	.+8      	; 0x28ee <__ftoa_engine+0xd2>
    28e6:	49 0f       	add	r20, r25
    28e8:	56 1f       	adc	r21, r22
    28ea:	c7 1f       	adc	r28, r23
    28ec:	d8 1f       	adc	r29, r24
    28ee:	99 0f       	add	r25, r25
    28f0:	66 1f       	adc	r22, r22
    28f2:	77 1f       	adc	r23, r23
    28f4:	88 1f       	adc	r24, r24
    28f6:	06 94       	lsr	r0
    28f8:	a9 f7       	brne	.-22     	; 0x28e4 <__ftoa_engine+0xc8>
    28fa:	84 91       	lpm	r24, Z
    28fc:	10 95       	com	r17
    28fe:	17 70       	andi	r17, 0x07	; 7
    2900:	41 f0       	breq	.+16     	; 0x2912 <__ftoa_engine+0xf6>
    2902:	d6 95       	lsr	r29
    2904:	c7 95       	ror	r28
    2906:	57 95       	ror	r21
    2908:	47 95       	ror	r20
    290a:	f7 94       	ror	r15
    290c:	e7 94       	ror	r14
    290e:	1a 95       	dec	r17
    2910:	c1 f7       	brne	.-16     	; 0x2902 <__ftoa_engine+0xe6>
    2912:	e6 e7       	ldi	r30, 0x76	; 118
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	68 94       	set
    2918:	15 90       	lpm	r1, Z+
    291a:	15 91       	lpm	r17, Z+
    291c:	35 91       	lpm	r19, Z+
    291e:	65 91       	lpm	r22, Z+
    2920:	95 91       	lpm	r25, Z+
    2922:	05 90       	lpm	r0, Z+
    2924:	7f e2       	ldi	r23, 0x2F	; 47
    2926:	73 95       	inc	r23
    2928:	e1 18       	sub	r14, r1
    292a:	f1 0a       	sbc	r15, r17
    292c:	43 0b       	sbc	r20, r19
    292e:	56 0b       	sbc	r21, r22
    2930:	c9 0b       	sbc	r28, r25
    2932:	d0 09       	sbc	r29, r0
    2934:	c0 f7       	brcc	.-16     	; 0x2926 <__ftoa_engine+0x10a>
    2936:	e1 0c       	add	r14, r1
    2938:	f1 1e       	adc	r15, r17
    293a:	43 1f       	adc	r20, r19
    293c:	56 1f       	adc	r21, r22
    293e:	c9 1f       	adc	r28, r25
    2940:	d0 1d       	adc	r29, r0
    2942:	7e f4       	brtc	.+30     	; 0x2962 <__ftoa_engine+0x146>
    2944:	70 33       	cpi	r23, 0x30	; 48
    2946:	11 f4       	brne	.+4      	; 0x294c <__ftoa_engine+0x130>
    2948:	8a 95       	dec	r24
    294a:	e6 cf       	rjmp	.-52     	; 0x2918 <__ftoa_engine+0xfc>
    294c:	e8 94       	clt
    294e:	01 50       	subi	r16, 0x01	; 1
    2950:	30 f0       	brcs	.+12     	; 0x295e <__ftoa_engine+0x142>
    2952:	08 0f       	add	r16, r24
    2954:	0a f4       	brpl	.+2      	; 0x2958 <__ftoa_engine+0x13c>
    2956:	00 27       	eor	r16, r16
    2958:	02 17       	cp	r16, r18
    295a:	08 f4       	brcc	.+2      	; 0x295e <__ftoa_engine+0x142>
    295c:	20 2f       	mov	r18, r16
    295e:	23 95       	inc	r18
    2960:	02 2f       	mov	r16, r18
    2962:	7a 33       	cpi	r23, 0x3A	; 58
    2964:	28 f0       	brcs	.+10     	; 0x2970 <__ftoa_engine+0x154>
    2966:	79 e3       	ldi	r23, 0x39	; 57
    2968:	7d 93       	st	X+, r23
    296a:	2a 95       	dec	r18
    296c:	e9 f7       	brne	.-6      	; 0x2968 <__ftoa_engine+0x14c>
    296e:	10 c0       	rjmp	.+32     	; 0x2990 <__ftoa_engine+0x174>
    2970:	7d 93       	st	X+, r23
    2972:	2a 95       	dec	r18
    2974:	89 f6       	brne	.-94     	; 0x2918 <__ftoa_engine+0xfc>
    2976:	06 94       	lsr	r0
    2978:	97 95       	ror	r25
    297a:	67 95       	ror	r22
    297c:	37 95       	ror	r19
    297e:	17 95       	ror	r17
    2980:	17 94       	ror	r1
    2982:	e1 18       	sub	r14, r1
    2984:	f1 0a       	sbc	r15, r17
    2986:	43 0b       	sbc	r20, r19
    2988:	56 0b       	sbc	r21, r22
    298a:	c9 0b       	sbc	r28, r25
    298c:	d0 09       	sbc	r29, r0
    298e:	98 f0       	brcs	.+38     	; 0x29b6 <__ftoa_engine+0x19a>
    2990:	23 95       	inc	r18
    2992:	7e 91       	ld	r23, -X
    2994:	73 95       	inc	r23
    2996:	7a 33       	cpi	r23, 0x3A	; 58
    2998:	08 f0       	brcs	.+2      	; 0x299c <__ftoa_engine+0x180>
    299a:	70 e3       	ldi	r23, 0x30	; 48
    299c:	7c 93       	st	X, r23
    299e:	20 13       	cpse	r18, r16
    29a0:	b8 f7       	brcc	.-18     	; 0x2990 <__ftoa_engine+0x174>
    29a2:	7e 91       	ld	r23, -X
    29a4:	70 61       	ori	r23, 0x10	; 16
    29a6:	7d 93       	st	X+, r23
    29a8:	30 f0       	brcs	.+12     	; 0x29b6 <__ftoa_engine+0x19a>
    29aa:	83 95       	inc	r24
    29ac:	71 e3       	ldi	r23, 0x31	; 49
    29ae:	7d 93       	st	X+, r23
    29b0:	70 e3       	ldi	r23, 0x30	; 48
    29b2:	2a 95       	dec	r18
    29b4:	e1 f7       	brne	.-8      	; 0x29ae <__ftoa_engine+0x192>
    29b6:	11 24       	eor	r1, r1
    29b8:	ef 90       	pop	r14
    29ba:	ff 90       	pop	r15
    29bc:	0f 91       	pop	r16
    29be:	1f 91       	pop	r17
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	99 27       	eor	r25, r25
    29c6:	87 fd       	sbrc	r24, 7
    29c8:	90 95       	com	r25
    29ca:	08 95       	ret

000029cc <strnlen_P>:
    29cc:	fc 01       	movw	r30, r24
    29ce:	05 90       	lpm	r0, Z+
    29d0:	61 50       	subi	r22, 0x01	; 1
    29d2:	70 40       	sbci	r23, 0x00	; 0
    29d4:	01 10       	cpse	r0, r1
    29d6:	d8 f7       	brcc	.-10     	; 0x29ce <strnlen_P+0x2>
    29d8:	80 95       	com	r24
    29da:	90 95       	com	r25
    29dc:	8e 0f       	add	r24, r30
    29de:	9f 1f       	adc	r25, r31
    29e0:	08 95       	ret

000029e2 <strnlen>:
    29e2:	fc 01       	movw	r30, r24
    29e4:	61 50       	subi	r22, 0x01	; 1
    29e6:	70 40       	sbci	r23, 0x00	; 0
    29e8:	01 90       	ld	r0, Z+
    29ea:	01 10       	cpse	r0, r1
    29ec:	d8 f7       	brcc	.-10     	; 0x29e4 <strnlen+0x2>
    29ee:	80 95       	com	r24
    29f0:	90 95       	com	r25
    29f2:	8e 0f       	add	r24, r30
    29f4:	9f 1f       	adc	r25, r31
    29f6:	08 95       	ret

000029f8 <fputc>:
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	fb 01       	movw	r30, r22
    2a02:	23 81       	ldd	r18, Z+3	; 0x03
    2a04:	21 fd       	sbrc	r18, 1
    2a06:	03 c0       	rjmp	.+6      	; 0x2a0e <fputc+0x16>
    2a08:	8f ef       	ldi	r24, 0xFF	; 255
    2a0a:	9f ef       	ldi	r25, 0xFF	; 255
    2a0c:	2c c0       	rjmp	.+88     	; 0x2a66 <fputc+0x6e>
    2a0e:	22 ff       	sbrs	r18, 2
    2a10:	16 c0       	rjmp	.+44     	; 0x2a3e <fputc+0x46>
    2a12:	46 81       	ldd	r20, Z+6	; 0x06
    2a14:	57 81       	ldd	r21, Z+7	; 0x07
    2a16:	24 81       	ldd	r18, Z+4	; 0x04
    2a18:	35 81       	ldd	r19, Z+5	; 0x05
    2a1a:	42 17       	cp	r20, r18
    2a1c:	53 07       	cpc	r21, r19
    2a1e:	44 f4       	brge	.+16     	; 0x2a30 <fputc+0x38>
    2a20:	a0 81       	ld	r26, Z
    2a22:	b1 81       	ldd	r27, Z+1	; 0x01
    2a24:	9d 01       	movw	r18, r26
    2a26:	2f 5f       	subi	r18, 0xFF	; 255
    2a28:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2a:	31 83       	std	Z+1, r19	; 0x01
    2a2c:	20 83       	st	Z, r18
    2a2e:	8c 93       	st	X, r24
    2a30:	26 81       	ldd	r18, Z+6	; 0x06
    2a32:	37 81       	ldd	r19, Z+7	; 0x07
    2a34:	2f 5f       	subi	r18, 0xFF	; 255
    2a36:	3f 4f       	sbci	r19, 0xFF	; 255
    2a38:	37 83       	std	Z+7, r19	; 0x07
    2a3a:	26 83       	std	Z+6, r18	; 0x06
    2a3c:	14 c0       	rjmp	.+40     	; 0x2a66 <fputc+0x6e>
    2a3e:	8b 01       	movw	r16, r22
    2a40:	ec 01       	movw	r28, r24
    2a42:	fb 01       	movw	r30, r22
    2a44:	00 84       	ldd	r0, Z+8	; 0x08
    2a46:	f1 85       	ldd	r31, Z+9	; 0x09
    2a48:	e0 2d       	mov	r30, r0
    2a4a:	09 95       	icall
    2a4c:	89 2b       	or	r24, r25
    2a4e:	e1 f6       	brne	.-72     	; 0x2a08 <fputc+0x10>
    2a50:	d8 01       	movw	r26, r16
    2a52:	16 96       	adiw	r26, 0x06	; 6
    2a54:	8d 91       	ld	r24, X+
    2a56:	9c 91       	ld	r25, X
    2a58:	17 97       	sbiw	r26, 0x07	; 7
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	17 96       	adiw	r26, 0x07	; 7
    2a5e:	9c 93       	st	X, r25
    2a60:	8e 93       	st	-X, r24
    2a62:	16 97       	sbiw	r26, 0x06	; 6
    2a64:	ce 01       	movw	r24, r28
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	1f 91       	pop	r17
    2a6c:	0f 91       	pop	r16
    2a6e:	08 95       	ret

00002a70 <__ultoa_invert>:
    2a70:	fa 01       	movw	r30, r20
    2a72:	aa 27       	eor	r26, r26
    2a74:	28 30       	cpi	r18, 0x08	; 8
    2a76:	51 f1       	breq	.+84     	; 0x2acc <__ultoa_invert+0x5c>
    2a78:	20 31       	cpi	r18, 0x10	; 16
    2a7a:	81 f1       	breq	.+96     	; 0x2adc <__ultoa_invert+0x6c>
    2a7c:	e8 94       	clt
    2a7e:	6f 93       	push	r22
    2a80:	6e 7f       	andi	r22, 0xFE	; 254
    2a82:	6e 5f       	subi	r22, 0xFE	; 254
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	8f 4f       	sbci	r24, 0xFF	; 255
    2a88:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8a:	af 4f       	sbci	r26, 0xFF	; 255
    2a8c:	b1 e0       	ldi	r27, 0x01	; 1
    2a8e:	3e d0       	rcall	.+124    	; 0x2b0c <__ultoa_invert+0x9c>
    2a90:	b4 e0       	ldi	r27, 0x04	; 4
    2a92:	3c d0       	rcall	.+120    	; 0x2b0c <__ultoa_invert+0x9c>
    2a94:	67 0f       	add	r22, r23
    2a96:	78 1f       	adc	r23, r24
    2a98:	89 1f       	adc	r24, r25
    2a9a:	9a 1f       	adc	r25, r26
    2a9c:	a1 1d       	adc	r26, r1
    2a9e:	68 0f       	add	r22, r24
    2aa0:	79 1f       	adc	r23, r25
    2aa2:	8a 1f       	adc	r24, r26
    2aa4:	91 1d       	adc	r25, r1
    2aa6:	a1 1d       	adc	r26, r1
    2aa8:	6a 0f       	add	r22, r26
    2aaa:	71 1d       	adc	r23, r1
    2aac:	81 1d       	adc	r24, r1
    2aae:	91 1d       	adc	r25, r1
    2ab0:	a1 1d       	adc	r26, r1
    2ab2:	20 d0       	rcall	.+64     	; 0x2af4 <__ultoa_invert+0x84>
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <__ultoa_invert+0x48>
    2ab6:	68 94       	set
    2ab8:	3f 91       	pop	r19
    2aba:	2a e0       	ldi	r18, 0x0A	; 10
    2abc:	26 9f       	mul	r18, r22
    2abe:	11 24       	eor	r1, r1
    2ac0:	30 19       	sub	r19, r0
    2ac2:	30 5d       	subi	r19, 0xD0	; 208
    2ac4:	31 93       	st	Z+, r19
    2ac6:	de f6       	brtc	.-74     	; 0x2a7e <__ultoa_invert+0xe>
    2ac8:	cf 01       	movw	r24, r30
    2aca:	08 95       	ret
    2acc:	46 2f       	mov	r20, r22
    2ace:	47 70       	andi	r20, 0x07	; 7
    2ad0:	40 5d       	subi	r20, 0xD0	; 208
    2ad2:	41 93       	st	Z+, r20
    2ad4:	b3 e0       	ldi	r27, 0x03	; 3
    2ad6:	0f d0       	rcall	.+30     	; 0x2af6 <__ultoa_invert+0x86>
    2ad8:	c9 f7       	brne	.-14     	; 0x2acc <__ultoa_invert+0x5c>
    2ada:	f6 cf       	rjmp	.-20     	; 0x2ac8 <__ultoa_invert+0x58>
    2adc:	46 2f       	mov	r20, r22
    2ade:	4f 70       	andi	r20, 0x0F	; 15
    2ae0:	40 5d       	subi	r20, 0xD0	; 208
    2ae2:	4a 33       	cpi	r20, 0x3A	; 58
    2ae4:	18 f0       	brcs	.+6      	; 0x2aec <__ultoa_invert+0x7c>
    2ae6:	49 5d       	subi	r20, 0xD9	; 217
    2ae8:	31 fd       	sbrc	r19, 1
    2aea:	40 52       	subi	r20, 0x20	; 32
    2aec:	41 93       	st	Z+, r20
    2aee:	02 d0       	rcall	.+4      	; 0x2af4 <__ultoa_invert+0x84>
    2af0:	a9 f7       	brne	.-22     	; 0x2adc <__ultoa_invert+0x6c>
    2af2:	ea cf       	rjmp	.-44     	; 0x2ac8 <__ultoa_invert+0x58>
    2af4:	b4 e0       	ldi	r27, 0x04	; 4
    2af6:	a6 95       	lsr	r26
    2af8:	97 95       	ror	r25
    2afa:	87 95       	ror	r24
    2afc:	77 95       	ror	r23
    2afe:	67 95       	ror	r22
    2b00:	ba 95       	dec	r27
    2b02:	c9 f7       	brne	.-14     	; 0x2af6 <__ultoa_invert+0x86>
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	61 05       	cpc	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	08 95       	ret
    2b0c:	9b 01       	movw	r18, r22
    2b0e:	ac 01       	movw	r20, r24
    2b10:	0a 2e       	mov	r0, r26
    2b12:	06 94       	lsr	r0
    2b14:	57 95       	ror	r21
    2b16:	47 95       	ror	r20
    2b18:	37 95       	ror	r19
    2b1a:	27 95       	ror	r18
    2b1c:	ba 95       	dec	r27
    2b1e:	c9 f7       	brne	.-14     	; 0x2b12 <__ultoa_invert+0xa2>
    2b20:	62 0f       	add	r22, r18
    2b22:	73 1f       	adc	r23, r19
    2b24:	84 1f       	adc	r24, r20
    2b26:	95 1f       	adc	r25, r21
    2b28:	a0 1d       	adc	r26, r0
    2b2a:	08 95       	ret

00002b2c <__prologue_saves__>:
    2b2c:	2f 92       	push	r2
    2b2e:	3f 92       	push	r3
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	ca 1b       	sub	r28, r26
    2b56:	db 0b       	sbc	r29, r27
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	09 94       	ijmp

00002b64 <__epilogue_restores__>:
    2b64:	2a 88       	ldd	r2, Y+18	; 0x12
    2b66:	39 88       	ldd	r3, Y+17	; 0x11
    2b68:	48 88       	ldd	r4, Y+16	; 0x10
    2b6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b70:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b72:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b74:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b76:	b9 84       	ldd	r11, Y+9	; 0x09
    2b78:	c8 84       	ldd	r12, Y+8	; 0x08
    2b7a:	df 80       	ldd	r13, Y+7	; 0x07
    2b7c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b80:	0c 81       	ldd	r16, Y+4	; 0x04
    2b82:	1b 81       	ldd	r17, Y+3	; 0x03
    2b84:	aa 81       	ldd	r26, Y+2	; 0x02
    2b86:	b9 81       	ldd	r27, Y+1	; 0x01
    2b88:	ce 0f       	add	r28, r30
    2b8a:	d1 1d       	adc	r29, r1
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	ed 01       	movw	r28, r26
    2b98:	08 95       	ret

00002b9a <_exit>:
    2b9a:	f8 94       	cli

00002b9c <__stop_program>:
    2b9c:	ff cf       	rjmp	.-2      	; 0x2b9c <__stop_program>
